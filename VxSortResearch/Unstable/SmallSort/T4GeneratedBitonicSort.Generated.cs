// <auto-generated>
//     This code was generated by a tool on 2020-03-21-11:41:57
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.Intrinsics;
using static System.Runtime.Intrinsics.X86.Avx;
using static System.Runtime.Intrinsics.X86.Avx2;

namespace VxSortResearch.Unstable.SmallSort
{
    static unsafe partial class T4GeneratedBitonicSort<T>
    {

        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort01V(ref Vector256<int> d01)
        {
            // ReSharper disable JoinDeclarationAndInitializer
            Vector256<int> min, max, s;
            // ReSharper restore JoinDeclarationAndInitializer

            s   = Shuffle(d01.AsInt32(), X_1).AsInt32();
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, B_1);

            s   = Shuffle(d01.AsInt32(), X_R).AsInt32();
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, B_2);

            s   = Shuffle(d01.AsInt32(), X_1).AsInt32();
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, B_1);

            s   = Permute4x64(Shuffle(d01.AsInt32(), X_R).AsInt64(), P_X).AsInt32();
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, B_4);

            s   = Shuffle(d01.AsInt32(), X_2).AsInt32();
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, B_2);

            s   = Shuffle(d01.AsInt32(), X_1).AsInt32();
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, B_1);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort01VMerge(ref Vector256<int> d01)
        {
            // ReSharper disable JoinDeclarationAndInitializer
            Vector256<int> min, max, s;
            // ReSharper restore JoinDeclarationAndInitializer


            s   = Permute4x64(d01.AsInt64(), P_X).AsInt32();
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, B_4);
            s   = Shuffle(d01.AsInt32(), X_2).AsInt32();
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, B_2);

            s   = Shuffle(d01.AsInt32(), X_1).AsInt32();
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, B_1);
        }
        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort01V(ref Vector256<uint> d01)
        {
            // ReSharper disable JoinDeclarationAndInitializer
            Vector256<uint> min, max, s;
            // ReSharper restore JoinDeclarationAndInitializer

            s   = Shuffle(d01.AsInt32(), X_1).AsUInt32();
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, B_1);

            s   = Shuffle(d01.AsInt32(), X_R).AsUInt32();
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, B_2);

            s   = Shuffle(d01.AsInt32(), X_1).AsUInt32();
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, B_1);

            s   = Permute4x64(Shuffle(d01.AsInt32(), X_R).AsInt64(), P_X).AsUInt32();
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, B_4);

            s   = Shuffle(d01.AsInt32(), X_2).AsUInt32();
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, B_2);

            s   = Shuffle(d01.AsInt32(), X_1).AsUInt32();
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, B_1);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort01VMerge(ref Vector256<uint> d01)
        {
            // ReSharper disable JoinDeclarationAndInitializer
            Vector256<uint> min, max, s;
            // ReSharper restore JoinDeclarationAndInitializer


            s   = Permute4x64(d01.AsInt64(), P_X).AsUInt32();
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, B_4);
            s   = Shuffle(d01.AsInt32(), X_2).AsUInt32();
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, B_2);

            s   = Shuffle(d01.AsInt32(), X_1).AsUInt32();
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, B_1);
        }
        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort01V(ref Vector256<float> d01)
        {
            // ReSharper disable JoinDeclarationAndInitializer
            Vector256<float> min, max, s;
            // ReSharper restore JoinDeclarationAndInitializer

            s   = Shuffle(d01.AsInt32(), X_1).AsSingle();
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, B_1);

            s   = Shuffle(d01.AsInt32(), X_R).AsSingle();
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, B_2);

            s   = Shuffle(d01.AsInt32(), X_1).AsSingle();
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, B_1);

            s   = Permute4x64(Shuffle(d01.AsInt32(), X_R).AsInt64(), P_X).AsSingle();
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, B_4);

            s   = Shuffle(d01.AsInt32(), X_2).AsSingle();
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, B_2);

            s   = Shuffle(d01.AsInt32(), X_1).AsSingle();
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, B_1);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort01VMerge(ref Vector256<float> d01)
        {
            // ReSharper disable JoinDeclarationAndInitializer
            Vector256<float> min, max, s;
            // ReSharper restore JoinDeclarationAndInitializer


            s   = Permute4x64(d01.AsInt64(), P_X).AsSingle();
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, B_4);
            s   = Shuffle(d01.AsInt32(), X_2).AsSingle();
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, B_2);

            s   = Shuffle(d01.AsInt32(), X_1).AsSingle();
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, B_1);
        }
        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort01V(ref Vector256<long> d01)
        {
            // ReSharper disable JoinDeclarationAndInitializer
            Vector256<long> min, max, s;
            // ReSharper restore JoinDeclarationAndInitializer

            s   = Shuffle(d01.AsDouble(), d01.AsDouble(), 0b01_01).AsInt64();
            min = BlendVariable(s, d01, CompareGreaterThan(s, d01));
            max = BlendVariable(d01, s, CompareGreaterThan(s, d01));
            d01 = Blend(min.AsDouble(), max.AsDouble(), 0b10_10).AsInt64();

            s   = Permute4x64(d01, X_R).AsInt64();
            min = BlendVariable(s, d01, CompareGreaterThan(s, d01));
            max = BlendVariable(d01, s, CompareGreaterThan(s, d01));
            d01 = Blend(min.AsDouble(), max.AsDouble(), 0b11_00).AsInt64();

            s   = Shuffle(d01.AsDouble(), d01.AsDouble(), 0b01_01).AsInt64();
            min = BlendVariable(s, d01, CompareGreaterThan(s, d01));
            max = BlendVariable(d01, s, CompareGreaterThan(s, d01));
            d01 = Blend(min.AsDouble(), max.AsDouble(), 0b10_10).AsInt64();

        }

        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort01VMerge(ref Vector256<long> d01)
        {
            // ReSharper disable JoinDeclarationAndInitializer
            Vector256<long> min, max, s;
            // ReSharper restore JoinDeclarationAndInitializer


            s   = Permute4x64(d01, 0b01_00_11_10).AsInt64();
            min = BlendVariable(s, d01, CompareGreaterThan(s, d01));
            max = BlendVariable(d01, s, CompareGreaterThan(s, d01));
            d01 = Blend(min.AsDouble(), max.AsDouble(), 0b11_00).AsInt64();

            s   = Shuffle(d01.AsDouble(), d01.AsDouble(), 0b01_01).AsInt64();
            min = BlendVariable(s, d01, CompareGreaterThan(s, d01));
            max = BlendVariable(d01, s, CompareGreaterThan(s, d01));
            d01 = Blend(min.AsDouble(), max.AsDouble(), 0b10_10).AsInt64();
        }
        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort01V(ref Vector256<ulong> d01)
        {
            // ReSharper disable JoinDeclarationAndInitializer
            Vector256<ulong> min, max, s;
            // ReSharper restore JoinDeclarationAndInitializer

            var topBit = Vector256.Create(0x8000000000000000UL).AsInt64();
            s   = Shuffle(d01.AsDouble(), d01.AsDouble(), 0b01_01).AsUInt64();
            min = BlendVariable(s, d01, CompareGreaterThan(Xor(topBit, s.AsInt64()), Xor(topBit, d01.AsInt64())).AsUInt64());
            max = BlendVariable(d01, s, CompareGreaterThan(Xor(topBit, s.AsInt64()), Xor(topBit, d01.AsInt64())).AsUInt64());
            d01 = Blend(min.AsDouble(), max.AsDouble(), 0b10_10).AsUInt64();

            s   = Permute4x64(d01, X_R).AsUInt64();
            min = BlendVariable(s, d01, CompareGreaterThan(Xor(topBit, s.AsInt64()), Xor(topBit, d01.AsInt64())).AsUInt64());
            max = BlendVariable(d01, s, CompareGreaterThan(Xor(topBit, s.AsInt64()), Xor(topBit, d01.AsInt64())).AsUInt64());
            d01 = Blend(min.AsDouble(), max.AsDouble(), 0b11_00).AsUInt64();

            s   = Shuffle(d01.AsDouble(), d01.AsDouble(), 0b01_01).AsUInt64();
            min = BlendVariable(s, d01, CompareGreaterThan(Xor(topBit, s.AsInt64()), Xor(topBit, d01.AsInt64())).AsUInt64());
            max = BlendVariable(d01, s, CompareGreaterThan(Xor(topBit, s.AsInt64()), Xor(topBit, d01.AsInt64())).AsUInt64());
            d01 = Blend(min.AsDouble(), max.AsDouble(), 0b10_10).AsUInt64();

        }

        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort01VMerge(ref Vector256<ulong> d01)
        {
            // ReSharper disable JoinDeclarationAndInitializer
            Vector256<ulong> min, max, s;
            // ReSharper restore JoinDeclarationAndInitializer

            var topBit = Vector256.Create(0x8000000000000000UL).AsInt64();

            s   = Permute4x64(d01, 0b01_00_11_10).AsUInt64();
            min = BlendVariable(s, d01, CompareGreaterThan(Xor(topBit, s.AsInt64()), Xor(topBit, d01.AsInt64())).AsUInt64());
            max = BlendVariable(d01, s, CompareGreaterThan(Xor(topBit, s.AsInt64()), Xor(topBit, d01.AsInt64())).AsUInt64());
            d01 = Blend(min.AsDouble(), max.AsDouble(), 0b11_00).AsUInt64();

            s   = Shuffle(d01.AsDouble(), d01.AsDouble(), 0b01_01).AsUInt64();
            min = BlendVariable(s, d01, CompareGreaterThan(Xor(topBit, s.AsInt64()), Xor(topBit, d01.AsInt64())).AsUInt64());
            max = BlendVariable(d01, s, CompareGreaterThan(Xor(topBit, s.AsInt64()), Xor(topBit, d01.AsInt64())).AsUInt64());
            d01 = Blend(min.AsDouble(), max.AsDouble(), 0b10_10).AsUInt64();
        }
        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort01V(ref Vector256<double> d01)
        {
            // ReSharper disable JoinDeclarationAndInitializer
            Vector256<double> min, max, s;
            // ReSharper restore JoinDeclarationAndInitializer

            s   = Shuffle(d01.AsDouble(), d01.AsDouble(), 0b01_01).AsDouble();
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min.AsDouble(), max.AsDouble(), 0b10_10).AsDouble();

            s   = Permute4x64(d01, X_R).AsDouble();
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min.AsDouble(), max.AsDouble(), 0b11_00).AsDouble();

            s   = Shuffle(d01.AsDouble(), d01.AsDouble(), 0b01_01).AsDouble();
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min.AsDouble(), max.AsDouble(), 0b10_10).AsDouble();

        }

        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort01VMerge(ref Vector256<double> d01)
        {
            // ReSharper disable JoinDeclarationAndInitializer
            Vector256<double> min, max, s;
            // ReSharper restore JoinDeclarationAndInitializer


            s   = Permute4x64(d01, 0b01_00_11_10).AsDouble();
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min.AsDouble(), max.AsDouble(), 0b11_00).AsDouble();

            s   = Shuffle(d01.AsDouble(), d01.AsDouble(), 0b01_01).AsDouble();
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min.AsDouble(), max.AsDouble(), 0b10_10).AsDouble();
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort02V(ref Vector256<int> d01, ref Vector256<int> d02)
        {
            Vector256<int> tmp;


            BitonicSort01V(ref d01);
            BitonicSort01V(ref d02);

            tmp = Permute4x64(Shuffle(d02.AsInt32(), X_R).AsInt64(), P_X).AsInt32();
            d02 = Max(d01, tmp);
            d01 = Min(d01, tmp);

            BitonicSort01VMerge(ref d01);
            BitonicSort01VMerge(ref d02);
        }
        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort02VMerge(ref Vector256<int> d01, ref Vector256<int> d02)
        {
            Vector256<int> tmp;

            tmp = d01;
            d01 = Min(d02, d01);
            d02 = Max(d02, tmp);

            BitonicSort01VMerge(ref d01);
            BitonicSort01VMerge(ref d02);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort03V(ref Vector256<int> d01, ref Vector256<int> d02, ref Vector256<int> d03)
        {
            Vector256<int> tmp;


            BitonicSort02V(ref d01, ref d02);
            BitonicSort01V(ref d03);

            tmp = Permute4x64(Shuffle(d03.AsInt32(), X_R).AsInt64(), P_X).AsInt32();
            d03 = Max(d02, tmp);
            d02 = Min(d02, tmp);

            BitonicSort02VMerge(ref d01, ref d02);
            BitonicSort01VMerge(ref d03);
        }
        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort03VMerge(ref Vector256<int> d01, ref Vector256<int> d02, ref Vector256<int> d03)
        {
            Vector256<int> tmp;

            tmp = d01;
            d01 = Min(d03, d01);
            d03 = Max(d03, tmp);

            BitonicSort02VMerge(ref d01, ref d02);
            BitonicSort01VMerge(ref d03);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort04V(ref Vector256<int> d01, ref Vector256<int> d02, ref Vector256<int> d03, ref Vector256<int> d04)
        {
            Vector256<int> tmp;


            BitonicSort02V(ref d01, ref d02);
            BitonicSort02V(ref d03, ref d04);

            tmp = Permute4x64(Shuffle(d03.AsInt32(), X_R).AsInt64(), P_X).AsInt32();
            d03 = Max(d02, tmp);
            d02 = Min(d02, tmp);

            tmp = Permute4x64(Shuffle(d04.AsInt32(), X_R).AsInt64(), P_X).AsInt32();
            d04 = Max(d01, tmp);
            d01 = Min(d01, tmp);

            BitonicSort02VMerge(ref d01, ref d02);
            BitonicSort02VMerge(ref d03, ref d04);
        }
        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort04VMerge(ref Vector256<int> d01, ref Vector256<int> d02, ref Vector256<int> d03, ref Vector256<int> d04)
        {
            Vector256<int> tmp;

            tmp = d01;
            d01 = Min(d03, d01);
            d03 = Max(d03, tmp);

            tmp = d02;
            d02 = Min(d04, d02);
            d04 = Max(d04, tmp);

            BitonicSort02VMerge(ref d01, ref d02);
            BitonicSort02VMerge(ref d03, ref d04);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort05V(ref Vector256<int> d01, ref Vector256<int> d02, ref Vector256<int> d03, ref Vector256<int> d04, ref Vector256<int> d05)
        {
            Vector256<int> tmp;


            BitonicSort04V(ref d01, ref d02, ref d03, ref d04);
            BitonicSort01V(ref d05);

            tmp = Permute4x64(Shuffle(d05.AsInt32(), X_R).AsInt64(), P_X).AsInt32();
            d05 = Max(d04, tmp);
            d04 = Min(d04, tmp);

            BitonicSort04VMerge(ref d01, ref d02, ref d03, ref d04);
            BitonicSort01VMerge(ref d05);
        }
        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort05VMerge(ref Vector256<int> d01, ref Vector256<int> d02, ref Vector256<int> d03, ref Vector256<int> d04, ref Vector256<int> d05)
        {
            Vector256<int> tmp;

            tmp = d01;
            d01 = Min(d05, d01);
            d05 = Max(d05, tmp);

            BitonicSort04VMerge(ref d01, ref d02, ref d03, ref d04);
            BitonicSort01VMerge(ref d05);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort06V(ref Vector256<int> d01, ref Vector256<int> d02, ref Vector256<int> d03, ref Vector256<int> d04, ref Vector256<int> d05, ref Vector256<int> d06)
        {
            Vector256<int> tmp;


            BitonicSort04V(ref d01, ref d02, ref d03, ref d04);
            BitonicSort02V(ref d05, ref d06);

            tmp = Permute4x64(Shuffle(d05.AsInt32(), X_R).AsInt64(), P_X).AsInt32();
            d05 = Max(d04, tmp);
            d04 = Min(d04, tmp);

            tmp = Permute4x64(Shuffle(d06.AsInt32(), X_R).AsInt64(), P_X).AsInt32();
            d06 = Max(d03, tmp);
            d03 = Min(d03, tmp);

            BitonicSort04VMerge(ref d01, ref d02, ref d03, ref d04);
            BitonicSort02VMerge(ref d05, ref d06);
        }
        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort06VMerge(ref Vector256<int> d01, ref Vector256<int> d02, ref Vector256<int> d03, ref Vector256<int> d04, ref Vector256<int> d05, ref Vector256<int> d06)
        {
            Vector256<int> tmp;

            tmp = d01;
            d01 = Min(d05, d01);
            d05 = Max(d05, tmp);

            tmp = d02;
            d02 = Min(d06, d02);
            d06 = Max(d06, tmp);

            BitonicSort04VMerge(ref d01, ref d02, ref d03, ref d04);
            BitonicSort02VMerge(ref d05, ref d06);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort07V(ref Vector256<int> d01, ref Vector256<int> d02, ref Vector256<int> d03, ref Vector256<int> d04, ref Vector256<int> d05, ref Vector256<int> d06, ref Vector256<int> d07)
        {
            Vector256<int> tmp;


            BitonicSort04V(ref d01, ref d02, ref d03, ref d04);
            BitonicSort03V(ref d05, ref d06, ref d07);

            tmp = Permute4x64(Shuffle(d05.AsInt32(), X_R).AsInt64(), P_X).AsInt32();
            d05 = Max(d04, tmp);
            d04 = Min(d04, tmp);

            tmp = Permute4x64(Shuffle(d06.AsInt32(), X_R).AsInt64(), P_X).AsInt32();
            d06 = Max(d03, tmp);
            d03 = Min(d03, tmp);

            tmp = Permute4x64(Shuffle(d07.AsInt32(), X_R).AsInt64(), P_X).AsInt32();
            d07 = Max(d02, tmp);
            d02 = Min(d02, tmp);

            BitonicSort04VMerge(ref d01, ref d02, ref d03, ref d04);
            BitonicSort03VMerge(ref d05, ref d06, ref d07);
        }
        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort07VMerge(ref Vector256<int> d01, ref Vector256<int> d02, ref Vector256<int> d03, ref Vector256<int> d04, ref Vector256<int> d05, ref Vector256<int> d06, ref Vector256<int> d07)
        {
            Vector256<int> tmp;

            tmp = d01;
            d01 = Min(d05, d01);
            d05 = Max(d05, tmp);

            tmp = d02;
            d02 = Min(d06, d02);
            d06 = Max(d06, tmp);

            tmp = d03;
            d03 = Min(d07, d03);
            d07 = Max(d07, tmp);

            BitonicSort04VMerge(ref d01, ref d02, ref d03, ref d04);
            BitonicSort03VMerge(ref d05, ref d06, ref d07);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort08V(ref Vector256<int> d01, ref Vector256<int> d02, ref Vector256<int> d03, ref Vector256<int> d04, ref Vector256<int> d05, ref Vector256<int> d06, ref Vector256<int> d07, ref Vector256<int> d08)
        {
            Vector256<int> tmp;


            BitonicSort04V(ref d01, ref d02, ref d03, ref d04);
            BitonicSort04V(ref d05, ref d06, ref d07, ref d08);

            tmp = Permute4x64(Shuffle(d05.AsInt32(), X_R).AsInt64(), P_X).AsInt32();
            d05 = Max(d04, tmp);
            d04 = Min(d04, tmp);

            tmp = Permute4x64(Shuffle(d06.AsInt32(), X_R).AsInt64(), P_X).AsInt32();
            d06 = Max(d03, tmp);
            d03 = Min(d03, tmp);

            tmp = Permute4x64(Shuffle(d07.AsInt32(), X_R).AsInt64(), P_X).AsInt32();
            d07 = Max(d02, tmp);
            d02 = Min(d02, tmp);

            tmp = Permute4x64(Shuffle(d08.AsInt32(), X_R).AsInt64(), P_X).AsInt32();
            d08 = Max(d01, tmp);
            d01 = Min(d01, tmp);

            BitonicSort04VMerge(ref d01, ref d02, ref d03, ref d04);
            BitonicSort04VMerge(ref d05, ref d06, ref d07, ref d08);
        }
        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort08VMerge(ref Vector256<int> d01, ref Vector256<int> d02, ref Vector256<int> d03, ref Vector256<int> d04, ref Vector256<int> d05, ref Vector256<int> d06, ref Vector256<int> d07, ref Vector256<int> d08)
        {
            Vector256<int> tmp;

            tmp = d01;
            d01 = Min(d05, d01);
            d05 = Max(d05, tmp);

            tmp = d02;
            d02 = Min(d06, d02);
            d06 = Max(d06, tmp);

            tmp = d03;
            d03 = Min(d07, d03);
            d07 = Max(d07, tmp);

            tmp = d04;
            d04 = Min(d08, d04);
            d08 = Max(d08, tmp);

            BitonicSort04VMerge(ref d01, ref d02, ref d03, ref d04);
            BitonicSort04VMerge(ref d05, ref d06, ref d07, ref d08);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort09V(ref Vector256<int> d01, ref Vector256<int> d02, ref Vector256<int> d03, ref Vector256<int> d04, ref Vector256<int> d05, ref Vector256<int> d06, ref Vector256<int> d07, ref Vector256<int> d08, ref Vector256<int> d09)
        {
            Vector256<int> tmp;


            BitonicSort08V(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
            BitonicSort01V(ref d09);

            tmp = Permute4x64(Shuffle(d09.AsInt32(), X_R).AsInt64(), P_X).AsInt32();
            d09 = Max(d08, tmp);
            d08 = Min(d08, tmp);

            BitonicSort08VMerge(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
            BitonicSort01VMerge(ref d09);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort10V(ref Vector256<int> d01, ref Vector256<int> d02, ref Vector256<int> d03, ref Vector256<int> d04, ref Vector256<int> d05, ref Vector256<int> d06, ref Vector256<int> d07, ref Vector256<int> d08, ref Vector256<int> d09, ref Vector256<int> d10)
        {
            Vector256<int> tmp;


            BitonicSort08V(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
            BitonicSort02V(ref d09, ref d10);

            tmp = Permute4x64(Shuffle(d09.AsInt32(), X_R).AsInt64(), P_X).AsInt32();
            d09 = Max(d08, tmp);
            d08 = Min(d08, tmp);

            tmp = Permute4x64(Shuffle(d10.AsInt32(), X_R).AsInt64(), P_X).AsInt32();
            d10 = Max(d07, tmp);
            d07 = Min(d07, tmp);

            BitonicSort08VMerge(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
            BitonicSort02VMerge(ref d09, ref d10);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort11V(ref Vector256<int> d01, ref Vector256<int> d02, ref Vector256<int> d03, ref Vector256<int> d04, ref Vector256<int> d05, ref Vector256<int> d06, ref Vector256<int> d07, ref Vector256<int> d08, ref Vector256<int> d09, ref Vector256<int> d10, ref Vector256<int> d11)
        {
            Vector256<int> tmp;


            BitonicSort08V(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
            BitonicSort03V(ref d09, ref d10, ref d11);

            tmp = Permute4x64(Shuffle(d09.AsInt32(), X_R).AsInt64(), P_X).AsInt32();
            d09 = Max(d08, tmp);
            d08 = Min(d08, tmp);

            tmp = Permute4x64(Shuffle(d10.AsInt32(), X_R).AsInt64(), P_X).AsInt32();
            d10 = Max(d07, tmp);
            d07 = Min(d07, tmp);

            tmp = Permute4x64(Shuffle(d11.AsInt32(), X_R).AsInt64(), P_X).AsInt32();
            d11 = Max(d06, tmp);
            d06 = Min(d06, tmp);

            BitonicSort08VMerge(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
            BitonicSort03VMerge(ref d09, ref d10, ref d11);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort12V(ref Vector256<int> d01, ref Vector256<int> d02, ref Vector256<int> d03, ref Vector256<int> d04, ref Vector256<int> d05, ref Vector256<int> d06, ref Vector256<int> d07, ref Vector256<int> d08, ref Vector256<int> d09, ref Vector256<int> d10, ref Vector256<int> d11, ref Vector256<int> d12)
        {
            Vector256<int> tmp;


            BitonicSort08V(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
            BitonicSort04V(ref d09, ref d10, ref d11, ref d12);

            tmp = Permute4x64(Shuffle(d09.AsInt32(), X_R).AsInt64(), P_X).AsInt32();
            d09 = Max(d08, tmp);
            d08 = Min(d08, tmp);

            tmp = Permute4x64(Shuffle(d10.AsInt32(), X_R).AsInt64(), P_X).AsInt32();
            d10 = Max(d07, tmp);
            d07 = Min(d07, tmp);

            tmp = Permute4x64(Shuffle(d11.AsInt32(), X_R).AsInt64(), P_X).AsInt32();
            d11 = Max(d06, tmp);
            d06 = Min(d06, tmp);

            tmp = Permute4x64(Shuffle(d12.AsInt32(), X_R).AsInt64(), P_X).AsInt32();
            d12 = Max(d05, tmp);
            d05 = Min(d05, tmp);

            BitonicSort08VMerge(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
            BitonicSort04VMerge(ref d09, ref d10, ref d11, ref d12);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort13V(ref Vector256<int> d01, ref Vector256<int> d02, ref Vector256<int> d03, ref Vector256<int> d04, ref Vector256<int> d05, ref Vector256<int> d06, ref Vector256<int> d07, ref Vector256<int> d08, ref Vector256<int> d09, ref Vector256<int> d10, ref Vector256<int> d11, ref Vector256<int> d12, ref Vector256<int> d13)
        {
            Vector256<int> tmp;


            BitonicSort08V(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
            BitonicSort05V(ref d09, ref d10, ref d11, ref d12, ref d13);

            tmp = Permute4x64(Shuffle(d09.AsInt32(), X_R).AsInt64(), P_X).AsInt32();
            d09 = Max(d08, tmp);
            d08 = Min(d08, tmp);

            tmp = Permute4x64(Shuffle(d10.AsInt32(), X_R).AsInt64(), P_X).AsInt32();
            d10 = Max(d07, tmp);
            d07 = Min(d07, tmp);

            tmp = Permute4x64(Shuffle(d11.AsInt32(), X_R).AsInt64(), P_X).AsInt32();
            d11 = Max(d06, tmp);
            d06 = Min(d06, tmp);

            tmp = Permute4x64(Shuffle(d12.AsInt32(), X_R).AsInt64(), P_X).AsInt32();
            d12 = Max(d05, tmp);
            d05 = Min(d05, tmp);

            tmp = Permute4x64(Shuffle(d13.AsInt32(), X_R).AsInt64(), P_X).AsInt32();
            d13 = Max(d04, tmp);
            d04 = Min(d04, tmp);

            BitonicSort08VMerge(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
            BitonicSort05VMerge(ref d09, ref d10, ref d11, ref d12, ref d13);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort14V(ref Vector256<int> d01, ref Vector256<int> d02, ref Vector256<int> d03, ref Vector256<int> d04, ref Vector256<int> d05, ref Vector256<int> d06, ref Vector256<int> d07, ref Vector256<int> d08, ref Vector256<int> d09, ref Vector256<int> d10, ref Vector256<int> d11, ref Vector256<int> d12, ref Vector256<int> d13, ref Vector256<int> d14)
        {
            Vector256<int> tmp;


            BitonicSort08V(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
            BitonicSort06V(ref d09, ref d10, ref d11, ref d12, ref d13, ref d14);

            tmp = Permute4x64(Shuffle(d09.AsInt32(), X_R).AsInt64(), P_X).AsInt32();
            d09 = Max(d08, tmp);
            d08 = Min(d08, tmp);

            tmp = Permute4x64(Shuffle(d10.AsInt32(), X_R).AsInt64(), P_X).AsInt32();
            d10 = Max(d07, tmp);
            d07 = Min(d07, tmp);

            tmp = Permute4x64(Shuffle(d11.AsInt32(), X_R).AsInt64(), P_X).AsInt32();
            d11 = Max(d06, tmp);
            d06 = Min(d06, tmp);

            tmp = Permute4x64(Shuffle(d12.AsInt32(), X_R).AsInt64(), P_X).AsInt32();
            d12 = Max(d05, tmp);
            d05 = Min(d05, tmp);

            tmp = Permute4x64(Shuffle(d13.AsInt32(), X_R).AsInt64(), P_X).AsInt32();
            d13 = Max(d04, tmp);
            d04 = Min(d04, tmp);

            tmp = Permute4x64(Shuffle(d14.AsInt32(), X_R).AsInt64(), P_X).AsInt32();
            d14 = Max(d03, tmp);
            d03 = Min(d03, tmp);

            BitonicSort08VMerge(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
            BitonicSort06VMerge(ref d09, ref d10, ref d11, ref d12, ref d13, ref d14);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort15V(ref Vector256<int> d01, ref Vector256<int> d02, ref Vector256<int> d03, ref Vector256<int> d04, ref Vector256<int> d05, ref Vector256<int> d06, ref Vector256<int> d07, ref Vector256<int> d08, ref Vector256<int> d09, ref Vector256<int> d10, ref Vector256<int> d11, ref Vector256<int> d12, ref Vector256<int> d13, ref Vector256<int> d14, ref Vector256<int> d15)
        {
            Vector256<int> tmp;


            BitonicSort08V(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
            BitonicSort07V(ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15);

            tmp = Permute4x64(Shuffle(d09.AsInt32(), X_R).AsInt64(), P_X).AsInt32();
            d09 = Max(d08, tmp);
            d08 = Min(d08, tmp);

            tmp = Permute4x64(Shuffle(d10.AsInt32(), X_R).AsInt64(), P_X).AsInt32();
            d10 = Max(d07, tmp);
            d07 = Min(d07, tmp);

            tmp = Permute4x64(Shuffle(d11.AsInt32(), X_R).AsInt64(), P_X).AsInt32();
            d11 = Max(d06, tmp);
            d06 = Min(d06, tmp);

            tmp = Permute4x64(Shuffle(d12.AsInt32(), X_R).AsInt64(), P_X).AsInt32();
            d12 = Max(d05, tmp);
            d05 = Min(d05, tmp);

            tmp = Permute4x64(Shuffle(d13.AsInt32(), X_R).AsInt64(), P_X).AsInt32();
            d13 = Max(d04, tmp);
            d04 = Min(d04, tmp);

            tmp = Permute4x64(Shuffle(d14.AsInt32(), X_R).AsInt64(), P_X).AsInt32();
            d14 = Max(d03, tmp);
            d03 = Min(d03, tmp);

            tmp = Permute4x64(Shuffle(d15.AsInt32(), X_R).AsInt64(), P_X).AsInt32();
            d15 = Max(d02, tmp);
            d02 = Min(d02, tmp);

            BitonicSort08VMerge(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
            BitonicSort07VMerge(ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort16V(ref Vector256<int> d01, ref Vector256<int> d02, ref Vector256<int> d03, ref Vector256<int> d04, ref Vector256<int> d05, ref Vector256<int> d06, ref Vector256<int> d07, ref Vector256<int> d08, ref Vector256<int> d09, ref Vector256<int> d10, ref Vector256<int> d11, ref Vector256<int> d12, ref Vector256<int> d13, ref Vector256<int> d14, ref Vector256<int> d15, ref Vector256<int> d16)
        {
            Vector256<int> tmp;


            BitonicSort08V(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
            BitonicSort08V(ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16);

            tmp = Permute4x64(Shuffle(d09.AsInt32(), X_R).AsInt64(), P_X).AsInt32();
            d09 = Max(d08, tmp);
            d08 = Min(d08, tmp);

            tmp = Permute4x64(Shuffle(d10.AsInt32(), X_R).AsInt64(), P_X).AsInt32();
            d10 = Max(d07, tmp);
            d07 = Min(d07, tmp);

            tmp = Permute4x64(Shuffle(d11.AsInt32(), X_R).AsInt64(), P_X).AsInt32();
            d11 = Max(d06, tmp);
            d06 = Min(d06, tmp);

            tmp = Permute4x64(Shuffle(d12.AsInt32(), X_R).AsInt64(), P_X).AsInt32();
            d12 = Max(d05, tmp);
            d05 = Min(d05, tmp);

            tmp = Permute4x64(Shuffle(d13.AsInt32(), X_R).AsInt64(), P_X).AsInt32();
            d13 = Max(d04, tmp);
            d04 = Min(d04, tmp);

            tmp = Permute4x64(Shuffle(d14.AsInt32(), X_R).AsInt64(), P_X).AsInt32();
            d14 = Max(d03, tmp);
            d03 = Min(d03, tmp);

            tmp = Permute4x64(Shuffle(d15.AsInt32(), X_R).AsInt64(), P_X).AsInt32();
            d15 = Max(d02, tmp);
            d02 = Min(d02, tmp);

            tmp = Permute4x64(Shuffle(d16.AsInt32(), X_R).AsInt64(), P_X).AsInt32();
            d16 = Max(d01, tmp);
            d01 = Min(d01, tmp);

            BitonicSort08VMerge(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
            BitonicSort08VMerge(ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16);
        }


        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort01V(int* ptr)
        {
            var N = Vector256<int>.Count;

            var d01 = LoadDquVector256(ptr + 00*N);

            BitonicSort01V(ref d01);

            Store(ptr + 00*N, d01);
        }
        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort02V(int* ptr)
        {
            var N = Vector256<int>.Count;

            var d01 = LoadDquVector256(ptr + 00*N);
            var d02 = LoadDquVector256(ptr + 01*N);

            BitonicSort02V(ref d01, ref d02);

            Store(ptr + 00*N, d01);
            Store(ptr + 01*N, d02);
        }
        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort03V(int* ptr)
        {
            var N = Vector256<int>.Count;

            var d01 = LoadDquVector256(ptr + 00*N);
            var d02 = LoadDquVector256(ptr + 01*N);
            var d03 = LoadDquVector256(ptr + 02*N);

            BitonicSort03V(ref d01, ref d02, ref d03);

            Store(ptr + 00*N, d01);
            Store(ptr + 01*N, d02);
            Store(ptr + 02*N, d03);
        }
        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort04V(int* ptr)
        {
            var N = Vector256<int>.Count;

            var d01 = LoadDquVector256(ptr + 00*N);
            var d02 = LoadDquVector256(ptr + 01*N);
            var d03 = LoadDquVector256(ptr + 02*N);
            var d04 = LoadDquVector256(ptr + 03*N);

            BitonicSort04V(ref d01, ref d02, ref d03, ref d04);

            Store(ptr + 00*N, d01);
            Store(ptr + 01*N, d02);
            Store(ptr + 02*N, d03);
            Store(ptr + 03*N, d04);
        }
        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort05V(int* ptr)
        {
            var N = Vector256<int>.Count;

            var d01 = LoadDquVector256(ptr + 00*N);
            var d02 = LoadDquVector256(ptr + 01*N);
            var d03 = LoadDquVector256(ptr + 02*N);
            var d04 = LoadDquVector256(ptr + 03*N);
            var d05 = LoadDquVector256(ptr + 04*N);

            BitonicSort05V(ref d01, ref d02, ref d03, ref d04, ref d05);

            Store(ptr + 00*N, d01);
            Store(ptr + 01*N, d02);
            Store(ptr + 02*N, d03);
            Store(ptr + 03*N, d04);
            Store(ptr + 04*N, d05);
        }
        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort06V(int* ptr)
        {
            var N = Vector256<int>.Count;

            var d01 = LoadDquVector256(ptr + 00*N);
            var d02 = LoadDquVector256(ptr + 01*N);
            var d03 = LoadDquVector256(ptr + 02*N);
            var d04 = LoadDquVector256(ptr + 03*N);
            var d05 = LoadDquVector256(ptr + 04*N);
            var d06 = LoadDquVector256(ptr + 05*N);

            BitonicSort06V(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06);

            Store(ptr + 00*N, d01);
            Store(ptr + 01*N, d02);
            Store(ptr + 02*N, d03);
            Store(ptr + 03*N, d04);
            Store(ptr + 04*N, d05);
            Store(ptr + 05*N, d06);
        }
        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort07V(int* ptr)
        {
            var N = Vector256<int>.Count;

            var d01 = LoadDquVector256(ptr + 00*N);
            var d02 = LoadDquVector256(ptr + 01*N);
            var d03 = LoadDquVector256(ptr + 02*N);
            var d04 = LoadDquVector256(ptr + 03*N);
            var d05 = LoadDquVector256(ptr + 04*N);
            var d06 = LoadDquVector256(ptr + 05*N);
            var d07 = LoadDquVector256(ptr + 06*N);

            BitonicSort07V(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07);

            Store(ptr + 00*N, d01);
            Store(ptr + 01*N, d02);
            Store(ptr + 02*N, d03);
            Store(ptr + 03*N, d04);
            Store(ptr + 04*N, d05);
            Store(ptr + 05*N, d06);
            Store(ptr + 06*N, d07);
        }
        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort08V(int* ptr)
        {
            var N = Vector256<int>.Count;

            var d01 = LoadDquVector256(ptr + 00*N);
            var d02 = LoadDquVector256(ptr + 01*N);
            var d03 = LoadDquVector256(ptr + 02*N);
            var d04 = LoadDquVector256(ptr + 03*N);
            var d05 = LoadDquVector256(ptr + 04*N);
            var d06 = LoadDquVector256(ptr + 05*N);
            var d07 = LoadDquVector256(ptr + 06*N);
            var d08 = LoadDquVector256(ptr + 07*N);

            BitonicSort08V(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);

            Store(ptr + 00*N, d01);
            Store(ptr + 01*N, d02);
            Store(ptr + 02*N, d03);
            Store(ptr + 03*N, d04);
            Store(ptr + 04*N, d05);
            Store(ptr + 05*N, d06);
            Store(ptr + 06*N, d07);
            Store(ptr + 07*N, d08);
        }
        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort09V(int* ptr)
        {
            var N = Vector256<int>.Count;

            var d01 = LoadDquVector256(ptr + 00*N);
            var d02 = LoadDquVector256(ptr + 01*N);
            var d03 = LoadDquVector256(ptr + 02*N);
            var d04 = LoadDquVector256(ptr + 03*N);
            var d05 = LoadDquVector256(ptr + 04*N);
            var d06 = LoadDquVector256(ptr + 05*N);
            var d07 = LoadDquVector256(ptr + 06*N);
            var d08 = LoadDquVector256(ptr + 07*N);
            var d09 = LoadDquVector256(ptr + 08*N);

            BitonicSort09V(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09);

            Store(ptr + 00*N, d01);
            Store(ptr + 01*N, d02);
            Store(ptr + 02*N, d03);
            Store(ptr + 03*N, d04);
            Store(ptr + 04*N, d05);
            Store(ptr + 05*N, d06);
            Store(ptr + 06*N, d07);
            Store(ptr + 07*N, d08);
            Store(ptr + 08*N, d09);
        }
        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort10V(int* ptr)
        {
            var N = Vector256<int>.Count;

            var d01 = LoadDquVector256(ptr + 00*N);
            var d02 = LoadDquVector256(ptr + 01*N);
            var d03 = LoadDquVector256(ptr + 02*N);
            var d04 = LoadDquVector256(ptr + 03*N);
            var d05 = LoadDquVector256(ptr + 04*N);
            var d06 = LoadDquVector256(ptr + 05*N);
            var d07 = LoadDquVector256(ptr + 06*N);
            var d08 = LoadDquVector256(ptr + 07*N);
            var d09 = LoadDquVector256(ptr + 08*N);
            var d10 = LoadDquVector256(ptr + 09*N);

            BitonicSort10V(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10);

            Store(ptr + 00*N, d01);
            Store(ptr + 01*N, d02);
            Store(ptr + 02*N, d03);
            Store(ptr + 03*N, d04);
            Store(ptr + 04*N, d05);
            Store(ptr + 05*N, d06);
            Store(ptr + 06*N, d07);
            Store(ptr + 07*N, d08);
            Store(ptr + 08*N, d09);
            Store(ptr + 09*N, d10);
        }
        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort11V(int* ptr)
        {
            var N = Vector256<int>.Count;

            var d01 = LoadDquVector256(ptr + 00*N);
            var d02 = LoadDquVector256(ptr + 01*N);
            var d03 = LoadDquVector256(ptr + 02*N);
            var d04 = LoadDquVector256(ptr + 03*N);
            var d05 = LoadDquVector256(ptr + 04*N);
            var d06 = LoadDquVector256(ptr + 05*N);
            var d07 = LoadDquVector256(ptr + 06*N);
            var d08 = LoadDquVector256(ptr + 07*N);
            var d09 = LoadDquVector256(ptr + 08*N);
            var d10 = LoadDquVector256(ptr + 09*N);
            var d11 = LoadDquVector256(ptr + 10*N);

            BitonicSort11V(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11);

            Store(ptr + 00*N, d01);
            Store(ptr + 01*N, d02);
            Store(ptr + 02*N, d03);
            Store(ptr + 03*N, d04);
            Store(ptr + 04*N, d05);
            Store(ptr + 05*N, d06);
            Store(ptr + 06*N, d07);
            Store(ptr + 07*N, d08);
            Store(ptr + 08*N, d09);
            Store(ptr + 09*N, d10);
            Store(ptr + 10*N, d11);
        }
        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort12V(int* ptr)
        {
            var N = Vector256<int>.Count;

            var d01 = LoadDquVector256(ptr + 00*N);
            var d02 = LoadDquVector256(ptr + 01*N);
            var d03 = LoadDquVector256(ptr + 02*N);
            var d04 = LoadDquVector256(ptr + 03*N);
            var d05 = LoadDquVector256(ptr + 04*N);
            var d06 = LoadDquVector256(ptr + 05*N);
            var d07 = LoadDquVector256(ptr + 06*N);
            var d08 = LoadDquVector256(ptr + 07*N);
            var d09 = LoadDquVector256(ptr + 08*N);
            var d10 = LoadDquVector256(ptr + 09*N);
            var d11 = LoadDquVector256(ptr + 10*N);
            var d12 = LoadDquVector256(ptr + 11*N);

            BitonicSort12V(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12);

            Store(ptr + 00*N, d01);
            Store(ptr + 01*N, d02);
            Store(ptr + 02*N, d03);
            Store(ptr + 03*N, d04);
            Store(ptr + 04*N, d05);
            Store(ptr + 05*N, d06);
            Store(ptr + 06*N, d07);
            Store(ptr + 07*N, d08);
            Store(ptr + 08*N, d09);
            Store(ptr + 09*N, d10);
            Store(ptr + 10*N, d11);
            Store(ptr + 11*N, d12);
        }
        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort13V(int* ptr)
        {
            var N = Vector256<int>.Count;

            var d01 = LoadDquVector256(ptr + 00*N);
            var d02 = LoadDquVector256(ptr + 01*N);
            var d03 = LoadDquVector256(ptr + 02*N);
            var d04 = LoadDquVector256(ptr + 03*N);
            var d05 = LoadDquVector256(ptr + 04*N);
            var d06 = LoadDquVector256(ptr + 05*N);
            var d07 = LoadDquVector256(ptr + 06*N);
            var d08 = LoadDquVector256(ptr + 07*N);
            var d09 = LoadDquVector256(ptr + 08*N);
            var d10 = LoadDquVector256(ptr + 09*N);
            var d11 = LoadDquVector256(ptr + 10*N);
            var d12 = LoadDquVector256(ptr + 11*N);
            var d13 = LoadDquVector256(ptr + 12*N);

            BitonicSort13V(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13);

            Store(ptr + 00*N, d01);
            Store(ptr + 01*N, d02);
            Store(ptr + 02*N, d03);
            Store(ptr + 03*N, d04);
            Store(ptr + 04*N, d05);
            Store(ptr + 05*N, d06);
            Store(ptr + 06*N, d07);
            Store(ptr + 07*N, d08);
            Store(ptr + 08*N, d09);
            Store(ptr + 09*N, d10);
            Store(ptr + 10*N, d11);
            Store(ptr + 11*N, d12);
            Store(ptr + 12*N, d13);
        }
        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort14V(int* ptr)
        {
            var N = Vector256<int>.Count;

            var d01 = LoadDquVector256(ptr + 00*N);
            var d02 = LoadDquVector256(ptr + 01*N);
            var d03 = LoadDquVector256(ptr + 02*N);
            var d04 = LoadDquVector256(ptr + 03*N);
            var d05 = LoadDquVector256(ptr + 04*N);
            var d06 = LoadDquVector256(ptr + 05*N);
            var d07 = LoadDquVector256(ptr + 06*N);
            var d08 = LoadDquVector256(ptr + 07*N);
            var d09 = LoadDquVector256(ptr + 08*N);
            var d10 = LoadDquVector256(ptr + 09*N);
            var d11 = LoadDquVector256(ptr + 10*N);
            var d12 = LoadDquVector256(ptr + 11*N);
            var d13 = LoadDquVector256(ptr + 12*N);
            var d14 = LoadDquVector256(ptr + 13*N);

            BitonicSort14V(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14);

            Store(ptr + 00*N, d01);
            Store(ptr + 01*N, d02);
            Store(ptr + 02*N, d03);
            Store(ptr + 03*N, d04);
            Store(ptr + 04*N, d05);
            Store(ptr + 05*N, d06);
            Store(ptr + 06*N, d07);
            Store(ptr + 07*N, d08);
            Store(ptr + 08*N, d09);
            Store(ptr + 09*N, d10);
            Store(ptr + 10*N, d11);
            Store(ptr + 11*N, d12);
            Store(ptr + 12*N, d13);
            Store(ptr + 13*N, d14);
        }
        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort15V(int* ptr)
        {
            var N = Vector256<int>.Count;

            var d01 = LoadDquVector256(ptr + 00*N);
            var d02 = LoadDquVector256(ptr + 01*N);
            var d03 = LoadDquVector256(ptr + 02*N);
            var d04 = LoadDquVector256(ptr + 03*N);
            var d05 = LoadDquVector256(ptr + 04*N);
            var d06 = LoadDquVector256(ptr + 05*N);
            var d07 = LoadDquVector256(ptr + 06*N);
            var d08 = LoadDquVector256(ptr + 07*N);
            var d09 = LoadDquVector256(ptr + 08*N);
            var d10 = LoadDquVector256(ptr + 09*N);
            var d11 = LoadDquVector256(ptr + 10*N);
            var d12 = LoadDquVector256(ptr + 11*N);
            var d13 = LoadDquVector256(ptr + 12*N);
            var d14 = LoadDquVector256(ptr + 13*N);
            var d15 = LoadDquVector256(ptr + 14*N);

            BitonicSort15V(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15);

            Store(ptr + 00*N, d01);
            Store(ptr + 01*N, d02);
            Store(ptr + 02*N, d03);
            Store(ptr + 03*N, d04);
            Store(ptr + 04*N, d05);
            Store(ptr + 05*N, d06);
            Store(ptr + 06*N, d07);
            Store(ptr + 07*N, d08);
            Store(ptr + 08*N, d09);
            Store(ptr + 09*N, d10);
            Store(ptr + 10*N, d11);
            Store(ptr + 11*N, d12);
            Store(ptr + 12*N, d13);
            Store(ptr + 13*N, d14);
            Store(ptr + 14*N, d15);
        }
        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort16V(int* ptr)
        {
            var N = Vector256<int>.Count;

            var d01 = LoadDquVector256(ptr + 00*N);
            var d02 = LoadDquVector256(ptr + 01*N);
            var d03 = LoadDquVector256(ptr + 02*N);
            var d04 = LoadDquVector256(ptr + 03*N);
            var d05 = LoadDquVector256(ptr + 04*N);
            var d06 = LoadDquVector256(ptr + 05*N);
            var d07 = LoadDquVector256(ptr + 06*N);
            var d08 = LoadDquVector256(ptr + 07*N);
            var d09 = LoadDquVector256(ptr + 08*N);
            var d10 = LoadDquVector256(ptr + 09*N);
            var d11 = LoadDquVector256(ptr + 10*N);
            var d12 = LoadDquVector256(ptr + 11*N);
            var d13 = LoadDquVector256(ptr + 12*N);
            var d14 = LoadDquVector256(ptr + 13*N);
            var d15 = LoadDquVector256(ptr + 14*N);
            var d16 = LoadDquVector256(ptr + 15*N);

            BitonicSort16V(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16);

            Store(ptr + 00*N, d01);
            Store(ptr + 01*N, d02);
            Store(ptr + 02*N, d03);
            Store(ptr + 03*N, d04);
            Store(ptr + 04*N, d05);
            Store(ptr + 05*N, d06);
            Store(ptr + 06*N, d07);
            Store(ptr + 07*N, d08);
            Store(ptr + 08*N, d09);
            Store(ptr + 09*N, d10);
            Store(ptr + 10*N, d11);
            Store(ptr + 11*N, d12);
            Store(ptr + 12*N, d13);
            Store(ptr + 13*N, d14);
            Store(ptr + 14*N, d15);
            Store(ptr + 15*N, d16);
        }
        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort02V(ref Vector256<uint> d01, ref Vector256<uint> d02)
        {
            Vector256<uint> tmp;


            BitonicSort01V(ref d01);
            BitonicSort01V(ref d02);

            tmp = Permute4x64(Shuffle(d02.AsInt32(), X_R).AsInt64(), P_X).AsUInt32();
            d02 = Max(d01, tmp);
            d01 = Min(d01, tmp);

            BitonicSort01VMerge(ref d01);
            BitonicSort01VMerge(ref d02);
        }
        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort02VMerge(ref Vector256<uint> d01, ref Vector256<uint> d02)
        {
            Vector256<uint> tmp;

            tmp = d01;
            d01 = Min(d02, d01);
            d02 = Max(d02, tmp);

            BitonicSort01VMerge(ref d01);
            BitonicSort01VMerge(ref d02);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort03V(ref Vector256<uint> d01, ref Vector256<uint> d02, ref Vector256<uint> d03)
        {
            Vector256<uint> tmp;


            BitonicSort02V(ref d01, ref d02);
            BitonicSort01V(ref d03);

            tmp = Permute4x64(Shuffle(d03.AsInt32(), X_R).AsInt64(), P_X).AsUInt32();
            d03 = Max(d02, tmp);
            d02 = Min(d02, tmp);

            BitonicSort02VMerge(ref d01, ref d02);
            BitonicSort01VMerge(ref d03);
        }
        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort03VMerge(ref Vector256<uint> d01, ref Vector256<uint> d02, ref Vector256<uint> d03)
        {
            Vector256<uint> tmp;

            tmp = d01;
            d01 = Min(d03, d01);
            d03 = Max(d03, tmp);

            BitonicSort02VMerge(ref d01, ref d02);
            BitonicSort01VMerge(ref d03);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort04V(ref Vector256<uint> d01, ref Vector256<uint> d02, ref Vector256<uint> d03, ref Vector256<uint> d04)
        {
            Vector256<uint> tmp;


            BitonicSort02V(ref d01, ref d02);
            BitonicSort02V(ref d03, ref d04);

            tmp = Permute4x64(Shuffle(d03.AsInt32(), X_R).AsInt64(), P_X).AsUInt32();
            d03 = Max(d02, tmp);
            d02 = Min(d02, tmp);

            tmp = Permute4x64(Shuffle(d04.AsInt32(), X_R).AsInt64(), P_X).AsUInt32();
            d04 = Max(d01, tmp);
            d01 = Min(d01, tmp);

            BitonicSort02VMerge(ref d01, ref d02);
            BitonicSort02VMerge(ref d03, ref d04);
        }
        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort04VMerge(ref Vector256<uint> d01, ref Vector256<uint> d02, ref Vector256<uint> d03, ref Vector256<uint> d04)
        {
            Vector256<uint> tmp;

            tmp = d01;
            d01 = Min(d03, d01);
            d03 = Max(d03, tmp);

            tmp = d02;
            d02 = Min(d04, d02);
            d04 = Max(d04, tmp);

            BitonicSort02VMerge(ref d01, ref d02);
            BitonicSort02VMerge(ref d03, ref d04);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort05V(ref Vector256<uint> d01, ref Vector256<uint> d02, ref Vector256<uint> d03, ref Vector256<uint> d04, ref Vector256<uint> d05)
        {
            Vector256<uint> tmp;


            BitonicSort04V(ref d01, ref d02, ref d03, ref d04);
            BitonicSort01V(ref d05);

            tmp = Permute4x64(Shuffle(d05.AsInt32(), X_R).AsInt64(), P_X).AsUInt32();
            d05 = Max(d04, tmp);
            d04 = Min(d04, tmp);

            BitonicSort04VMerge(ref d01, ref d02, ref d03, ref d04);
            BitonicSort01VMerge(ref d05);
        }
        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort05VMerge(ref Vector256<uint> d01, ref Vector256<uint> d02, ref Vector256<uint> d03, ref Vector256<uint> d04, ref Vector256<uint> d05)
        {
            Vector256<uint> tmp;

            tmp = d01;
            d01 = Min(d05, d01);
            d05 = Max(d05, tmp);

            BitonicSort04VMerge(ref d01, ref d02, ref d03, ref d04);
            BitonicSort01VMerge(ref d05);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort06V(ref Vector256<uint> d01, ref Vector256<uint> d02, ref Vector256<uint> d03, ref Vector256<uint> d04, ref Vector256<uint> d05, ref Vector256<uint> d06)
        {
            Vector256<uint> tmp;


            BitonicSort04V(ref d01, ref d02, ref d03, ref d04);
            BitonicSort02V(ref d05, ref d06);

            tmp = Permute4x64(Shuffle(d05.AsInt32(), X_R).AsInt64(), P_X).AsUInt32();
            d05 = Max(d04, tmp);
            d04 = Min(d04, tmp);

            tmp = Permute4x64(Shuffle(d06.AsInt32(), X_R).AsInt64(), P_X).AsUInt32();
            d06 = Max(d03, tmp);
            d03 = Min(d03, tmp);

            BitonicSort04VMerge(ref d01, ref d02, ref d03, ref d04);
            BitonicSort02VMerge(ref d05, ref d06);
        }
        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort06VMerge(ref Vector256<uint> d01, ref Vector256<uint> d02, ref Vector256<uint> d03, ref Vector256<uint> d04, ref Vector256<uint> d05, ref Vector256<uint> d06)
        {
            Vector256<uint> tmp;

            tmp = d01;
            d01 = Min(d05, d01);
            d05 = Max(d05, tmp);

            tmp = d02;
            d02 = Min(d06, d02);
            d06 = Max(d06, tmp);

            BitonicSort04VMerge(ref d01, ref d02, ref d03, ref d04);
            BitonicSort02VMerge(ref d05, ref d06);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort07V(ref Vector256<uint> d01, ref Vector256<uint> d02, ref Vector256<uint> d03, ref Vector256<uint> d04, ref Vector256<uint> d05, ref Vector256<uint> d06, ref Vector256<uint> d07)
        {
            Vector256<uint> tmp;


            BitonicSort04V(ref d01, ref d02, ref d03, ref d04);
            BitonicSort03V(ref d05, ref d06, ref d07);

            tmp = Permute4x64(Shuffle(d05.AsInt32(), X_R).AsInt64(), P_X).AsUInt32();
            d05 = Max(d04, tmp);
            d04 = Min(d04, tmp);

            tmp = Permute4x64(Shuffle(d06.AsInt32(), X_R).AsInt64(), P_X).AsUInt32();
            d06 = Max(d03, tmp);
            d03 = Min(d03, tmp);

            tmp = Permute4x64(Shuffle(d07.AsInt32(), X_R).AsInt64(), P_X).AsUInt32();
            d07 = Max(d02, tmp);
            d02 = Min(d02, tmp);

            BitonicSort04VMerge(ref d01, ref d02, ref d03, ref d04);
            BitonicSort03VMerge(ref d05, ref d06, ref d07);
        }
        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort07VMerge(ref Vector256<uint> d01, ref Vector256<uint> d02, ref Vector256<uint> d03, ref Vector256<uint> d04, ref Vector256<uint> d05, ref Vector256<uint> d06, ref Vector256<uint> d07)
        {
            Vector256<uint> tmp;

            tmp = d01;
            d01 = Min(d05, d01);
            d05 = Max(d05, tmp);

            tmp = d02;
            d02 = Min(d06, d02);
            d06 = Max(d06, tmp);

            tmp = d03;
            d03 = Min(d07, d03);
            d07 = Max(d07, tmp);

            BitonicSort04VMerge(ref d01, ref d02, ref d03, ref d04);
            BitonicSort03VMerge(ref d05, ref d06, ref d07);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort08V(ref Vector256<uint> d01, ref Vector256<uint> d02, ref Vector256<uint> d03, ref Vector256<uint> d04, ref Vector256<uint> d05, ref Vector256<uint> d06, ref Vector256<uint> d07, ref Vector256<uint> d08)
        {
            Vector256<uint> tmp;


            BitonicSort04V(ref d01, ref d02, ref d03, ref d04);
            BitonicSort04V(ref d05, ref d06, ref d07, ref d08);

            tmp = Permute4x64(Shuffle(d05.AsInt32(), X_R).AsInt64(), P_X).AsUInt32();
            d05 = Max(d04, tmp);
            d04 = Min(d04, tmp);

            tmp = Permute4x64(Shuffle(d06.AsInt32(), X_R).AsInt64(), P_X).AsUInt32();
            d06 = Max(d03, tmp);
            d03 = Min(d03, tmp);

            tmp = Permute4x64(Shuffle(d07.AsInt32(), X_R).AsInt64(), P_X).AsUInt32();
            d07 = Max(d02, tmp);
            d02 = Min(d02, tmp);

            tmp = Permute4x64(Shuffle(d08.AsInt32(), X_R).AsInt64(), P_X).AsUInt32();
            d08 = Max(d01, tmp);
            d01 = Min(d01, tmp);

            BitonicSort04VMerge(ref d01, ref d02, ref d03, ref d04);
            BitonicSort04VMerge(ref d05, ref d06, ref d07, ref d08);
        }
        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort08VMerge(ref Vector256<uint> d01, ref Vector256<uint> d02, ref Vector256<uint> d03, ref Vector256<uint> d04, ref Vector256<uint> d05, ref Vector256<uint> d06, ref Vector256<uint> d07, ref Vector256<uint> d08)
        {
            Vector256<uint> tmp;

            tmp = d01;
            d01 = Min(d05, d01);
            d05 = Max(d05, tmp);

            tmp = d02;
            d02 = Min(d06, d02);
            d06 = Max(d06, tmp);

            tmp = d03;
            d03 = Min(d07, d03);
            d07 = Max(d07, tmp);

            tmp = d04;
            d04 = Min(d08, d04);
            d08 = Max(d08, tmp);

            BitonicSort04VMerge(ref d01, ref d02, ref d03, ref d04);
            BitonicSort04VMerge(ref d05, ref d06, ref d07, ref d08);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort09V(ref Vector256<uint> d01, ref Vector256<uint> d02, ref Vector256<uint> d03, ref Vector256<uint> d04, ref Vector256<uint> d05, ref Vector256<uint> d06, ref Vector256<uint> d07, ref Vector256<uint> d08, ref Vector256<uint> d09)
        {
            Vector256<uint> tmp;


            BitonicSort08V(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
            BitonicSort01V(ref d09);

            tmp = Permute4x64(Shuffle(d09.AsInt32(), X_R).AsInt64(), P_X).AsUInt32();
            d09 = Max(d08, tmp);
            d08 = Min(d08, tmp);

            BitonicSort08VMerge(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
            BitonicSort01VMerge(ref d09);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort10V(ref Vector256<uint> d01, ref Vector256<uint> d02, ref Vector256<uint> d03, ref Vector256<uint> d04, ref Vector256<uint> d05, ref Vector256<uint> d06, ref Vector256<uint> d07, ref Vector256<uint> d08, ref Vector256<uint> d09, ref Vector256<uint> d10)
        {
            Vector256<uint> tmp;


            BitonicSort08V(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
            BitonicSort02V(ref d09, ref d10);

            tmp = Permute4x64(Shuffle(d09.AsInt32(), X_R).AsInt64(), P_X).AsUInt32();
            d09 = Max(d08, tmp);
            d08 = Min(d08, tmp);

            tmp = Permute4x64(Shuffle(d10.AsInt32(), X_R).AsInt64(), P_X).AsUInt32();
            d10 = Max(d07, tmp);
            d07 = Min(d07, tmp);

            BitonicSort08VMerge(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
            BitonicSort02VMerge(ref d09, ref d10);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort11V(ref Vector256<uint> d01, ref Vector256<uint> d02, ref Vector256<uint> d03, ref Vector256<uint> d04, ref Vector256<uint> d05, ref Vector256<uint> d06, ref Vector256<uint> d07, ref Vector256<uint> d08, ref Vector256<uint> d09, ref Vector256<uint> d10, ref Vector256<uint> d11)
        {
            Vector256<uint> tmp;


            BitonicSort08V(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
            BitonicSort03V(ref d09, ref d10, ref d11);

            tmp = Permute4x64(Shuffle(d09.AsInt32(), X_R).AsInt64(), P_X).AsUInt32();
            d09 = Max(d08, tmp);
            d08 = Min(d08, tmp);

            tmp = Permute4x64(Shuffle(d10.AsInt32(), X_R).AsInt64(), P_X).AsUInt32();
            d10 = Max(d07, tmp);
            d07 = Min(d07, tmp);

            tmp = Permute4x64(Shuffle(d11.AsInt32(), X_R).AsInt64(), P_X).AsUInt32();
            d11 = Max(d06, tmp);
            d06 = Min(d06, tmp);

            BitonicSort08VMerge(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
            BitonicSort03VMerge(ref d09, ref d10, ref d11);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort12V(ref Vector256<uint> d01, ref Vector256<uint> d02, ref Vector256<uint> d03, ref Vector256<uint> d04, ref Vector256<uint> d05, ref Vector256<uint> d06, ref Vector256<uint> d07, ref Vector256<uint> d08, ref Vector256<uint> d09, ref Vector256<uint> d10, ref Vector256<uint> d11, ref Vector256<uint> d12)
        {
            Vector256<uint> tmp;


            BitonicSort08V(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
            BitonicSort04V(ref d09, ref d10, ref d11, ref d12);

            tmp = Permute4x64(Shuffle(d09.AsInt32(), X_R).AsInt64(), P_X).AsUInt32();
            d09 = Max(d08, tmp);
            d08 = Min(d08, tmp);

            tmp = Permute4x64(Shuffle(d10.AsInt32(), X_R).AsInt64(), P_X).AsUInt32();
            d10 = Max(d07, tmp);
            d07 = Min(d07, tmp);

            tmp = Permute4x64(Shuffle(d11.AsInt32(), X_R).AsInt64(), P_X).AsUInt32();
            d11 = Max(d06, tmp);
            d06 = Min(d06, tmp);

            tmp = Permute4x64(Shuffle(d12.AsInt32(), X_R).AsInt64(), P_X).AsUInt32();
            d12 = Max(d05, tmp);
            d05 = Min(d05, tmp);

            BitonicSort08VMerge(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
            BitonicSort04VMerge(ref d09, ref d10, ref d11, ref d12);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort13V(ref Vector256<uint> d01, ref Vector256<uint> d02, ref Vector256<uint> d03, ref Vector256<uint> d04, ref Vector256<uint> d05, ref Vector256<uint> d06, ref Vector256<uint> d07, ref Vector256<uint> d08, ref Vector256<uint> d09, ref Vector256<uint> d10, ref Vector256<uint> d11, ref Vector256<uint> d12, ref Vector256<uint> d13)
        {
            Vector256<uint> tmp;


            BitonicSort08V(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
            BitonicSort05V(ref d09, ref d10, ref d11, ref d12, ref d13);

            tmp = Permute4x64(Shuffle(d09.AsInt32(), X_R).AsInt64(), P_X).AsUInt32();
            d09 = Max(d08, tmp);
            d08 = Min(d08, tmp);

            tmp = Permute4x64(Shuffle(d10.AsInt32(), X_R).AsInt64(), P_X).AsUInt32();
            d10 = Max(d07, tmp);
            d07 = Min(d07, tmp);

            tmp = Permute4x64(Shuffle(d11.AsInt32(), X_R).AsInt64(), P_X).AsUInt32();
            d11 = Max(d06, tmp);
            d06 = Min(d06, tmp);

            tmp = Permute4x64(Shuffle(d12.AsInt32(), X_R).AsInt64(), P_X).AsUInt32();
            d12 = Max(d05, tmp);
            d05 = Min(d05, tmp);

            tmp = Permute4x64(Shuffle(d13.AsInt32(), X_R).AsInt64(), P_X).AsUInt32();
            d13 = Max(d04, tmp);
            d04 = Min(d04, tmp);

            BitonicSort08VMerge(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
            BitonicSort05VMerge(ref d09, ref d10, ref d11, ref d12, ref d13);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort14V(ref Vector256<uint> d01, ref Vector256<uint> d02, ref Vector256<uint> d03, ref Vector256<uint> d04, ref Vector256<uint> d05, ref Vector256<uint> d06, ref Vector256<uint> d07, ref Vector256<uint> d08, ref Vector256<uint> d09, ref Vector256<uint> d10, ref Vector256<uint> d11, ref Vector256<uint> d12, ref Vector256<uint> d13, ref Vector256<uint> d14)
        {
            Vector256<uint> tmp;


            BitonicSort08V(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
            BitonicSort06V(ref d09, ref d10, ref d11, ref d12, ref d13, ref d14);

            tmp = Permute4x64(Shuffle(d09.AsInt32(), X_R).AsInt64(), P_X).AsUInt32();
            d09 = Max(d08, tmp);
            d08 = Min(d08, tmp);

            tmp = Permute4x64(Shuffle(d10.AsInt32(), X_R).AsInt64(), P_X).AsUInt32();
            d10 = Max(d07, tmp);
            d07 = Min(d07, tmp);

            tmp = Permute4x64(Shuffle(d11.AsInt32(), X_R).AsInt64(), P_X).AsUInt32();
            d11 = Max(d06, tmp);
            d06 = Min(d06, tmp);

            tmp = Permute4x64(Shuffle(d12.AsInt32(), X_R).AsInt64(), P_X).AsUInt32();
            d12 = Max(d05, tmp);
            d05 = Min(d05, tmp);

            tmp = Permute4x64(Shuffle(d13.AsInt32(), X_R).AsInt64(), P_X).AsUInt32();
            d13 = Max(d04, tmp);
            d04 = Min(d04, tmp);

            tmp = Permute4x64(Shuffle(d14.AsInt32(), X_R).AsInt64(), P_X).AsUInt32();
            d14 = Max(d03, tmp);
            d03 = Min(d03, tmp);

            BitonicSort08VMerge(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
            BitonicSort06VMerge(ref d09, ref d10, ref d11, ref d12, ref d13, ref d14);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort15V(ref Vector256<uint> d01, ref Vector256<uint> d02, ref Vector256<uint> d03, ref Vector256<uint> d04, ref Vector256<uint> d05, ref Vector256<uint> d06, ref Vector256<uint> d07, ref Vector256<uint> d08, ref Vector256<uint> d09, ref Vector256<uint> d10, ref Vector256<uint> d11, ref Vector256<uint> d12, ref Vector256<uint> d13, ref Vector256<uint> d14, ref Vector256<uint> d15)
        {
            Vector256<uint> tmp;


            BitonicSort08V(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
            BitonicSort07V(ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15);

            tmp = Permute4x64(Shuffle(d09.AsInt32(), X_R).AsInt64(), P_X).AsUInt32();
            d09 = Max(d08, tmp);
            d08 = Min(d08, tmp);

            tmp = Permute4x64(Shuffle(d10.AsInt32(), X_R).AsInt64(), P_X).AsUInt32();
            d10 = Max(d07, tmp);
            d07 = Min(d07, tmp);

            tmp = Permute4x64(Shuffle(d11.AsInt32(), X_R).AsInt64(), P_X).AsUInt32();
            d11 = Max(d06, tmp);
            d06 = Min(d06, tmp);

            tmp = Permute4x64(Shuffle(d12.AsInt32(), X_R).AsInt64(), P_X).AsUInt32();
            d12 = Max(d05, tmp);
            d05 = Min(d05, tmp);

            tmp = Permute4x64(Shuffle(d13.AsInt32(), X_R).AsInt64(), P_X).AsUInt32();
            d13 = Max(d04, tmp);
            d04 = Min(d04, tmp);

            tmp = Permute4x64(Shuffle(d14.AsInt32(), X_R).AsInt64(), P_X).AsUInt32();
            d14 = Max(d03, tmp);
            d03 = Min(d03, tmp);

            tmp = Permute4x64(Shuffle(d15.AsInt32(), X_R).AsInt64(), P_X).AsUInt32();
            d15 = Max(d02, tmp);
            d02 = Min(d02, tmp);

            BitonicSort08VMerge(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
            BitonicSort07VMerge(ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort16V(ref Vector256<uint> d01, ref Vector256<uint> d02, ref Vector256<uint> d03, ref Vector256<uint> d04, ref Vector256<uint> d05, ref Vector256<uint> d06, ref Vector256<uint> d07, ref Vector256<uint> d08, ref Vector256<uint> d09, ref Vector256<uint> d10, ref Vector256<uint> d11, ref Vector256<uint> d12, ref Vector256<uint> d13, ref Vector256<uint> d14, ref Vector256<uint> d15, ref Vector256<uint> d16)
        {
            Vector256<uint> tmp;


            BitonicSort08V(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
            BitonicSort08V(ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16);

            tmp = Permute4x64(Shuffle(d09.AsInt32(), X_R).AsInt64(), P_X).AsUInt32();
            d09 = Max(d08, tmp);
            d08 = Min(d08, tmp);

            tmp = Permute4x64(Shuffle(d10.AsInt32(), X_R).AsInt64(), P_X).AsUInt32();
            d10 = Max(d07, tmp);
            d07 = Min(d07, tmp);

            tmp = Permute4x64(Shuffle(d11.AsInt32(), X_R).AsInt64(), P_X).AsUInt32();
            d11 = Max(d06, tmp);
            d06 = Min(d06, tmp);

            tmp = Permute4x64(Shuffle(d12.AsInt32(), X_R).AsInt64(), P_X).AsUInt32();
            d12 = Max(d05, tmp);
            d05 = Min(d05, tmp);

            tmp = Permute4x64(Shuffle(d13.AsInt32(), X_R).AsInt64(), P_X).AsUInt32();
            d13 = Max(d04, tmp);
            d04 = Min(d04, tmp);

            tmp = Permute4x64(Shuffle(d14.AsInt32(), X_R).AsInt64(), P_X).AsUInt32();
            d14 = Max(d03, tmp);
            d03 = Min(d03, tmp);

            tmp = Permute4x64(Shuffle(d15.AsInt32(), X_R).AsInt64(), P_X).AsUInt32();
            d15 = Max(d02, tmp);
            d02 = Min(d02, tmp);

            tmp = Permute4x64(Shuffle(d16.AsInt32(), X_R).AsInt64(), P_X).AsUInt32();
            d16 = Max(d01, tmp);
            d01 = Min(d01, tmp);

            BitonicSort08VMerge(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
            BitonicSort08VMerge(ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16);
        }


        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort01V(uint* ptr)
        {
            var N = Vector256<uint>.Count;

            var d01 = LoadDquVector256(ptr + 00*N);

            BitonicSort01V(ref d01);

            Store(ptr + 00*N, d01);
        }
        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort02V(uint* ptr)
        {
            var N = Vector256<uint>.Count;

            var d01 = LoadDquVector256(ptr + 00*N);
            var d02 = LoadDquVector256(ptr + 01*N);

            BitonicSort02V(ref d01, ref d02);

            Store(ptr + 00*N, d01);
            Store(ptr + 01*N, d02);
        }
        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort03V(uint* ptr)
        {
            var N = Vector256<uint>.Count;

            var d01 = LoadDquVector256(ptr + 00*N);
            var d02 = LoadDquVector256(ptr + 01*N);
            var d03 = LoadDquVector256(ptr + 02*N);

            BitonicSort03V(ref d01, ref d02, ref d03);

            Store(ptr + 00*N, d01);
            Store(ptr + 01*N, d02);
            Store(ptr + 02*N, d03);
        }
        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort04V(uint* ptr)
        {
            var N = Vector256<uint>.Count;

            var d01 = LoadDquVector256(ptr + 00*N);
            var d02 = LoadDquVector256(ptr + 01*N);
            var d03 = LoadDquVector256(ptr + 02*N);
            var d04 = LoadDquVector256(ptr + 03*N);

            BitonicSort04V(ref d01, ref d02, ref d03, ref d04);

            Store(ptr + 00*N, d01);
            Store(ptr + 01*N, d02);
            Store(ptr + 02*N, d03);
            Store(ptr + 03*N, d04);
        }
        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort05V(uint* ptr)
        {
            var N = Vector256<uint>.Count;

            var d01 = LoadDquVector256(ptr + 00*N);
            var d02 = LoadDquVector256(ptr + 01*N);
            var d03 = LoadDquVector256(ptr + 02*N);
            var d04 = LoadDquVector256(ptr + 03*N);
            var d05 = LoadDquVector256(ptr + 04*N);

            BitonicSort05V(ref d01, ref d02, ref d03, ref d04, ref d05);

            Store(ptr + 00*N, d01);
            Store(ptr + 01*N, d02);
            Store(ptr + 02*N, d03);
            Store(ptr + 03*N, d04);
            Store(ptr + 04*N, d05);
        }
        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort06V(uint* ptr)
        {
            var N = Vector256<uint>.Count;

            var d01 = LoadDquVector256(ptr + 00*N);
            var d02 = LoadDquVector256(ptr + 01*N);
            var d03 = LoadDquVector256(ptr + 02*N);
            var d04 = LoadDquVector256(ptr + 03*N);
            var d05 = LoadDquVector256(ptr + 04*N);
            var d06 = LoadDquVector256(ptr + 05*N);

            BitonicSort06V(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06);

            Store(ptr + 00*N, d01);
            Store(ptr + 01*N, d02);
            Store(ptr + 02*N, d03);
            Store(ptr + 03*N, d04);
            Store(ptr + 04*N, d05);
            Store(ptr + 05*N, d06);
        }
        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort07V(uint* ptr)
        {
            var N = Vector256<uint>.Count;

            var d01 = LoadDquVector256(ptr + 00*N);
            var d02 = LoadDquVector256(ptr + 01*N);
            var d03 = LoadDquVector256(ptr + 02*N);
            var d04 = LoadDquVector256(ptr + 03*N);
            var d05 = LoadDquVector256(ptr + 04*N);
            var d06 = LoadDquVector256(ptr + 05*N);
            var d07 = LoadDquVector256(ptr + 06*N);

            BitonicSort07V(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07);

            Store(ptr + 00*N, d01);
            Store(ptr + 01*N, d02);
            Store(ptr + 02*N, d03);
            Store(ptr + 03*N, d04);
            Store(ptr + 04*N, d05);
            Store(ptr + 05*N, d06);
            Store(ptr + 06*N, d07);
        }
        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort08V(uint* ptr)
        {
            var N = Vector256<uint>.Count;

            var d01 = LoadDquVector256(ptr + 00*N);
            var d02 = LoadDquVector256(ptr + 01*N);
            var d03 = LoadDquVector256(ptr + 02*N);
            var d04 = LoadDquVector256(ptr + 03*N);
            var d05 = LoadDquVector256(ptr + 04*N);
            var d06 = LoadDquVector256(ptr + 05*N);
            var d07 = LoadDquVector256(ptr + 06*N);
            var d08 = LoadDquVector256(ptr + 07*N);

            BitonicSort08V(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);

            Store(ptr + 00*N, d01);
            Store(ptr + 01*N, d02);
            Store(ptr + 02*N, d03);
            Store(ptr + 03*N, d04);
            Store(ptr + 04*N, d05);
            Store(ptr + 05*N, d06);
            Store(ptr + 06*N, d07);
            Store(ptr + 07*N, d08);
        }
        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort09V(uint* ptr)
        {
            var N = Vector256<uint>.Count;

            var d01 = LoadDquVector256(ptr + 00*N);
            var d02 = LoadDquVector256(ptr + 01*N);
            var d03 = LoadDquVector256(ptr + 02*N);
            var d04 = LoadDquVector256(ptr + 03*N);
            var d05 = LoadDquVector256(ptr + 04*N);
            var d06 = LoadDquVector256(ptr + 05*N);
            var d07 = LoadDquVector256(ptr + 06*N);
            var d08 = LoadDquVector256(ptr + 07*N);
            var d09 = LoadDquVector256(ptr + 08*N);

            BitonicSort09V(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09);

            Store(ptr + 00*N, d01);
            Store(ptr + 01*N, d02);
            Store(ptr + 02*N, d03);
            Store(ptr + 03*N, d04);
            Store(ptr + 04*N, d05);
            Store(ptr + 05*N, d06);
            Store(ptr + 06*N, d07);
            Store(ptr + 07*N, d08);
            Store(ptr + 08*N, d09);
        }
        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort10V(uint* ptr)
        {
            var N = Vector256<uint>.Count;

            var d01 = LoadDquVector256(ptr + 00*N);
            var d02 = LoadDquVector256(ptr + 01*N);
            var d03 = LoadDquVector256(ptr + 02*N);
            var d04 = LoadDquVector256(ptr + 03*N);
            var d05 = LoadDquVector256(ptr + 04*N);
            var d06 = LoadDquVector256(ptr + 05*N);
            var d07 = LoadDquVector256(ptr + 06*N);
            var d08 = LoadDquVector256(ptr + 07*N);
            var d09 = LoadDquVector256(ptr + 08*N);
            var d10 = LoadDquVector256(ptr + 09*N);

            BitonicSort10V(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10);

            Store(ptr + 00*N, d01);
            Store(ptr + 01*N, d02);
            Store(ptr + 02*N, d03);
            Store(ptr + 03*N, d04);
            Store(ptr + 04*N, d05);
            Store(ptr + 05*N, d06);
            Store(ptr + 06*N, d07);
            Store(ptr + 07*N, d08);
            Store(ptr + 08*N, d09);
            Store(ptr + 09*N, d10);
        }
        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort11V(uint* ptr)
        {
            var N = Vector256<uint>.Count;

            var d01 = LoadDquVector256(ptr + 00*N);
            var d02 = LoadDquVector256(ptr + 01*N);
            var d03 = LoadDquVector256(ptr + 02*N);
            var d04 = LoadDquVector256(ptr + 03*N);
            var d05 = LoadDquVector256(ptr + 04*N);
            var d06 = LoadDquVector256(ptr + 05*N);
            var d07 = LoadDquVector256(ptr + 06*N);
            var d08 = LoadDquVector256(ptr + 07*N);
            var d09 = LoadDquVector256(ptr + 08*N);
            var d10 = LoadDquVector256(ptr + 09*N);
            var d11 = LoadDquVector256(ptr + 10*N);

            BitonicSort11V(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11);

            Store(ptr + 00*N, d01);
            Store(ptr + 01*N, d02);
            Store(ptr + 02*N, d03);
            Store(ptr + 03*N, d04);
            Store(ptr + 04*N, d05);
            Store(ptr + 05*N, d06);
            Store(ptr + 06*N, d07);
            Store(ptr + 07*N, d08);
            Store(ptr + 08*N, d09);
            Store(ptr + 09*N, d10);
            Store(ptr + 10*N, d11);
        }
        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort12V(uint* ptr)
        {
            var N = Vector256<uint>.Count;

            var d01 = LoadDquVector256(ptr + 00*N);
            var d02 = LoadDquVector256(ptr + 01*N);
            var d03 = LoadDquVector256(ptr + 02*N);
            var d04 = LoadDquVector256(ptr + 03*N);
            var d05 = LoadDquVector256(ptr + 04*N);
            var d06 = LoadDquVector256(ptr + 05*N);
            var d07 = LoadDquVector256(ptr + 06*N);
            var d08 = LoadDquVector256(ptr + 07*N);
            var d09 = LoadDquVector256(ptr + 08*N);
            var d10 = LoadDquVector256(ptr + 09*N);
            var d11 = LoadDquVector256(ptr + 10*N);
            var d12 = LoadDquVector256(ptr + 11*N);

            BitonicSort12V(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12);

            Store(ptr + 00*N, d01);
            Store(ptr + 01*N, d02);
            Store(ptr + 02*N, d03);
            Store(ptr + 03*N, d04);
            Store(ptr + 04*N, d05);
            Store(ptr + 05*N, d06);
            Store(ptr + 06*N, d07);
            Store(ptr + 07*N, d08);
            Store(ptr + 08*N, d09);
            Store(ptr + 09*N, d10);
            Store(ptr + 10*N, d11);
            Store(ptr + 11*N, d12);
        }
        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort13V(uint* ptr)
        {
            var N = Vector256<uint>.Count;

            var d01 = LoadDquVector256(ptr + 00*N);
            var d02 = LoadDquVector256(ptr + 01*N);
            var d03 = LoadDquVector256(ptr + 02*N);
            var d04 = LoadDquVector256(ptr + 03*N);
            var d05 = LoadDquVector256(ptr + 04*N);
            var d06 = LoadDquVector256(ptr + 05*N);
            var d07 = LoadDquVector256(ptr + 06*N);
            var d08 = LoadDquVector256(ptr + 07*N);
            var d09 = LoadDquVector256(ptr + 08*N);
            var d10 = LoadDquVector256(ptr + 09*N);
            var d11 = LoadDquVector256(ptr + 10*N);
            var d12 = LoadDquVector256(ptr + 11*N);
            var d13 = LoadDquVector256(ptr + 12*N);

            BitonicSort13V(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13);

            Store(ptr + 00*N, d01);
            Store(ptr + 01*N, d02);
            Store(ptr + 02*N, d03);
            Store(ptr + 03*N, d04);
            Store(ptr + 04*N, d05);
            Store(ptr + 05*N, d06);
            Store(ptr + 06*N, d07);
            Store(ptr + 07*N, d08);
            Store(ptr + 08*N, d09);
            Store(ptr + 09*N, d10);
            Store(ptr + 10*N, d11);
            Store(ptr + 11*N, d12);
            Store(ptr + 12*N, d13);
        }
        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort14V(uint* ptr)
        {
            var N = Vector256<uint>.Count;

            var d01 = LoadDquVector256(ptr + 00*N);
            var d02 = LoadDquVector256(ptr + 01*N);
            var d03 = LoadDquVector256(ptr + 02*N);
            var d04 = LoadDquVector256(ptr + 03*N);
            var d05 = LoadDquVector256(ptr + 04*N);
            var d06 = LoadDquVector256(ptr + 05*N);
            var d07 = LoadDquVector256(ptr + 06*N);
            var d08 = LoadDquVector256(ptr + 07*N);
            var d09 = LoadDquVector256(ptr + 08*N);
            var d10 = LoadDquVector256(ptr + 09*N);
            var d11 = LoadDquVector256(ptr + 10*N);
            var d12 = LoadDquVector256(ptr + 11*N);
            var d13 = LoadDquVector256(ptr + 12*N);
            var d14 = LoadDquVector256(ptr + 13*N);

            BitonicSort14V(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14);

            Store(ptr + 00*N, d01);
            Store(ptr + 01*N, d02);
            Store(ptr + 02*N, d03);
            Store(ptr + 03*N, d04);
            Store(ptr + 04*N, d05);
            Store(ptr + 05*N, d06);
            Store(ptr + 06*N, d07);
            Store(ptr + 07*N, d08);
            Store(ptr + 08*N, d09);
            Store(ptr + 09*N, d10);
            Store(ptr + 10*N, d11);
            Store(ptr + 11*N, d12);
            Store(ptr + 12*N, d13);
            Store(ptr + 13*N, d14);
        }
        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort15V(uint* ptr)
        {
            var N = Vector256<uint>.Count;

            var d01 = LoadDquVector256(ptr + 00*N);
            var d02 = LoadDquVector256(ptr + 01*N);
            var d03 = LoadDquVector256(ptr + 02*N);
            var d04 = LoadDquVector256(ptr + 03*N);
            var d05 = LoadDquVector256(ptr + 04*N);
            var d06 = LoadDquVector256(ptr + 05*N);
            var d07 = LoadDquVector256(ptr + 06*N);
            var d08 = LoadDquVector256(ptr + 07*N);
            var d09 = LoadDquVector256(ptr + 08*N);
            var d10 = LoadDquVector256(ptr + 09*N);
            var d11 = LoadDquVector256(ptr + 10*N);
            var d12 = LoadDquVector256(ptr + 11*N);
            var d13 = LoadDquVector256(ptr + 12*N);
            var d14 = LoadDquVector256(ptr + 13*N);
            var d15 = LoadDquVector256(ptr + 14*N);

            BitonicSort15V(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15);

            Store(ptr + 00*N, d01);
            Store(ptr + 01*N, d02);
            Store(ptr + 02*N, d03);
            Store(ptr + 03*N, d04);
            Store(ptr + 04*N, d05);
            Store(ptr + 05*N, d06);
            Store(ptr + 06*N, d07);
            Store(ptr + 07*N, d08);
            Store(ptr + 08*N, d09);
            Store(ptr + 09*N, d10);
            Store(ptr + 10*N, d11);
            Store(ptr + 11*N, d12);
            Store(ptr + 12*N, d13);
            Store(ptr + 13*N, d14);
            Store(ptr + 14*N, d15);
        }
        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort16V(uint* ptr)
        {
            var N = Vector256<uint>.Count;

            var d01 = LoadDquVector256(ptr + 00*N);
            var d02 = LoadDquVector256(ptr + 01*N);
            var d03 = LoadDquVector256(ptr + 02*N);
            var d04 = LoadDquVector256(ptr + 03*N);
            var d05 = LoadDquVector256(ptr + 04*N);
            var d06 = LoadDquVector256(ptr + 05*N);
            var d07 = LoadDquVector256(ptr + 06*N);
            var d08 = LoadDquVector256(ptr + 07*N);
            var d09 = LoadDquVector256(ptr + 08*N);
            var d10 = LoadDquVector256(ptr + 09*N);
            var d11 = LoadDquVector256(ptr + 10*N);
            var d12 = LoadDquVector256(ptr + 11*N);
            var d13 = LoadDquVector256(ptr + 12*N);
            var d14 = LoadDquVector256(ptr + 13*N);
            var d15 = LoadDquVector256(ptr + 14*N);
            var d16 = LoadDquVector256(ptr + 15*N);

            BitonicSort16V(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16);

            Store(ptr + 00*N, d01);
            Store(ptr + 01*N, d02);
            Store(ptr + 02*N, d03);
            Store(ptr + 03*N, d04);
            Store(ptr + 04*N, d05);
            Store(ptr + 05*N, d06);
            Store(ptr + 06*N, d07);
            Store(ptr + 07*N, d08);
            Store(ptr + 08*N, d09);
            Store(ptr + 09*N, d10);
            Store(ptr + 10*N, d11);
            Store(ptr + 11*N, d12);
            Store(ptr + 12*N, d13);
            Store(ptr + 13*N, d14);
            Store(ptr + 14*N, d15);
            Store(ptr + 15*N, d16);
        }
        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort02V(ref Vector256<float> d01, ref Vector256<float> d02)
        {
            Vector256<float> tmp;


            BitonicSort01V(ref d01);
            BitonicSort01V(ref d02);

            tmp = Permute4x64(Shuffle(d02.AsInt32(), X_R).AsInt64(), P_X).AsSingle();
            d02 = Max(d01, tmp);
            d01 = Min(d01, tmp);

            BitonicSort01VMerge(ref d01);
            BitonicSort01VMerge(ref d02);
        }
        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort02VMerge(ref Vector256<float> d01, ref Vector256<float> d02)
        {
            Vector256<float> tmp;

            tmp = d01;
            d01 = Min(d02, d01);
            d02 = Max(d02, tmp);

            BitonicSort01VMerge(ref d01);
            BitonicSort01VMerge(ref d02);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort03V(ref Vector256<float> d01, ref Vector256<float> d02, ref Vector256<float> d03)
        {
            Vector256<float> tmp;


            BitonicSort02V(ref d01, ref d02);
            BitonicSort01V(ref d03);

            tmp = Permute4x64(Shuffle(d03.AsInt32(), X_R).AsInt64(), P_X).AsSingle();
            d03 = Max(d02, tmp);
            d02 = Min(d02, tmp);

            BitonicSort02VMerge(ref d01, ref d02);
            BitonicSort01VMerge(ref d03);
        }
        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort03VMerge(ref Vector256<float> d01, ref Vector256<float> d02, ref Vector256<float> d03)
        {
            Vector256<float> tmp;

            tmp = d01;
            d01 = Min(d03, d01);
            d03 = Max(d03, tmp);

            BitonicSort02VMerge(ref d01, ref d02);
            BitonicSort01VMerge(ref d03);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort04V(ref Vector256<float> d01, ref Vector256<float> d02, ref Vector256<float> d03, ref Vector256<float> d04)
        {
            Vector256<float> tmp;


            BitonicSort02V(ref d01, ref d02);
            BitonicSort02V(ref d03, ref d04);

            tmp = Permute4x64(Shuffle(d03.AsInt32(), X_R).AsInt64(), P_X).AsSingle();
            d03 = Max(d02, tmp);
            d02 = Min(d02, tmp);

            tmp = Permute4x64(Shuffle(d04.AsInt32(), X_R).AsInt64(), P_X).AsSingle();
            d04 = Max(d01, tmp);
            d01 = Min(d01, tmp);

            BitonicSort02VMerge(ref d01, ref d02);
            BitonicSort02VMerge(ref d03, ref d04);
        }
        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort04VMerge(ref Vector256<float> d01, ref Vector256<float> d02, ref Vector256<float> d03, ref Vector256<float> d04)
        {
            Vector256<float> tmp;

            tmp = d01;
            d01 = Min(d03, d01);
            d03 = Max(d03, tmp);

            tmp = d02;
            d02 = Min(d04, d02);
            d04 = Max(d04, tmp);

            BitonicSort02VMerge(ref d01, ref d02);
            BitonicSort02VMerge(ref d03, ref d04);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort05V(ref Vector256<float> d01, ref Vector256<float> d02, ref Vector256<float> d03, ref Vector256<float> d04, ref Vector256<float> d05)
        {
            Vector256<float> tmp;


            BitonicSort04V(ref d01, ref d02, ref d03, ref d04);
            BitonicSort01V(ref d05);

            tmp = Permute4x64(Shuffle(d05.AsInt32(), X_R).AsInt64(), P_X).AsSingle();
            d05 = Max(d04, tmp);
            d04 = Min(d04, tmp);

            BitonicSort04VMerge(ref d01, ref d02, ref d03, ref d04);
            BitonicSort01VMerge(ref d05);
        }
        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort05VMerge(ref Vector256<float> d01, ref Vector256<float> d02, ref Vector256<float> d03, ref Vector256<float> d04, ref Vector256<float> d05)
        {
            Vector256<float> tmp;

            tmp = d01;
            d01 = Min(d05, d01);
            d05 = Max(d05, tmp);

            BitonicSort04VMerge(ref d01, ref d02, ref d03, ref d04);
            BitonicSort01VMerge(ref d05);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort06V(ref Vector256<float> d01, ref Vector256<float> d02, ref Vector256<float> d03, ref Vector256<float> d04, ref Vector256<float> d05, ref Vector256<float> d06)
        {
            Vector256<float> tmp;


            BitonicSort04V(ref d01, ref d02, ref d03, ref d04);
            BitonicSort02V(ref d05, ref d06);

            tmp = Permute4x64(Shuffle(d05.AsInt32(), X_R).AsInt64(), P_X).AsSingle();
            d05 = Max(d04, tmp);
            d04 = Min(d04, tmp);

            tmp = Permute4x64(Shuffle(d06.AsInt32(), X_R).AsInt64(), P_X).AsSingle();
            d06 = Max(d03, tmp);
            d03 = Min(d03, tmp);

            BitonicSort04VMerge(ref d01, ref d02, ref d03, ref d04);
            BitonicSort02VMerge(ref d05, ref d06);
        }
        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort06VMerge(ref Vector256<float> d01, ref Vector256<float> d02, ref Vector256<float> d03, ref Vector256<float> d04, ref Vector256<float> d05, ref Vector256<float> d06)
        {
            Vector256<float> tmp;

            tmp = d01;
            d01 = Min(d05, d01);
            d05 = Max(d05, tmp);

            tmp = d02;
            d02 = Min(d06, d02);
            d06 = Max(d06, tmp);

            BitonicSort04VMerge(ref d01, ref d02, ref d03, ref d04);
            BitonicSort02VMerge(ref d05, ref d06);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort07V(ref Vector256<float> d01, ref Vector256<float> d02, ref Vector256<float> d03, ref Vector256<float> d04, ref Vector256<float> d05, ref Vector256<float> d06, ref Vector256<float> d07)
        {
            Vector256<float> tmp;


            BitonicSort04V(ref d01, ref d02, ref d03, ref d04);
            BitonicSort03V(ref d05, ref d06, ref d07);

            tmp = Permute4x64(Shuffle(d05.AsInt32(), X_R).AsInt64(), P_X).AsSingle();
            d05 = Max(d04, tmp);
            d04 = Min(d04, tmp);

            tmp = Permute4x64(Shuffle(d06.AsInt32(), X_R).AsInt64(), P_X).AsSingle();
            d06 = Max(d03, tmp);
            d03 = Min(d03, tmp);

            tmp = Permute4x64(Shuffle(d07.AsInt32(), X_R).AsInt64(), P_X).AsSingle();
            d07 = Max(d02, tmp);
            d02 = Min(d02, tmp);

            BitonicSort04VMerge(ref d01, ref d02, ref d03, ref d04);
            BitonicSort03VMerge(ref d05, ref d06, ref d07);
        }
        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort07VMerge(ref Vector256<float> d01, ref Vector256<float> d02, ref Vector256<float> d03, ref Vector256<float> d04, ref Vector256<float> d05, ref Vector256<float> d06, ref Vector256<float> d07)
        {
            Vector256<float> tmp;

            tmp = d01;
            d01 = Min(d05, d01);
            d05 = Max(d05, tmp);

            tmp = d02;
            d02 = Min(d06, d02);
            d06 = Max(d06, tmp);

            tmp = d03;
            d03 = Min(d07, d03);
            d07 = Max(d07, tmp);

            BitonicSort04VMerge(ref d01, ref d02, ref d03, ref d04);
            BitonicSort03VMerge(ref d05, ref d06, ref d07);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort08V(ref Vector256<float> d01, ref Vector256<float> d02, ref Vector256<float> d03, ref Vector256<float> d04, ref Vector256<float> d05, ref Vector256<float> d06, ref Vector256<float> d07, ref Vector256<float> d08)
        {
            Vector256<float> tmp;


            BitonicSort04V(ref d01, ref d02, ref d03, ref d04);
            BitonicSort04V(ref d05, ref d06, ref d07, ref d08);

            tmp = Permute4x64(Shuffle(d05.AsInt32(), X_R).AsInt64(), P_X).AsSingle();
            d05 = Max(d04, tmp);
            d04 = Min(d04, tmp);

            tmp = Permute4x64(Shuffle(d06.AsInt32(), X_R).AsInt64(), P_X).AsSingle();
            d06 = Max(d03, tmp);
            d03 = Min(d03, tmp);

            tmp = Permute4x64(Shuffle(d07.AsInt32(), X_R).AsInt64(), P_X).AsSingle();
            d07 = Max(d02, tmp);
            d02 = Min(d02, tmp);

            tmp = Permute4x64(Shuffle(d08.AsInt32(), X_R).AsInt64(), P_X).AsSingle();
            d08 = Max(d01, tmp);
            d01 = Min(d01, tmp);

            BitonicSort04VMerge(ref d01, ref d02, ref d03, ref d04);
            BitonicSort04VMerge(ref d05, ref d06, ref d07, ref d08);
        }
        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort08VMerge(ref Vector256<float> d01, ref Vector256<float> d02, ref Vector256<float> d03, ref Vector256<float> d04, ref Vector256<float> d05, ref Vector256<float> d06, ref Vector256<float> d07, ref Vector256<float> d08)
        {
            Vector256<float> tmp;

            tmp = d01;
            d01 = Min(d05, d01);
            d05 = Max(d05, tmp);

            tmp = d02;
            d02 = Min(d06, d02);
            d06 = Max(d06, tmp);

            tmp = d03;
            d03 = Min(d07, d03);
            d07 = Max(d07, tmp);

            tmp = d04;
            d04 = Min(d08, d04);
            d08 = Max(d08, tmp);

            BitonicSort04VMerge(ref d01, ref d02, ref d03, ref d04);
            BitonicSort04VMerge(ref d05, ref d06, ref d07, ref d08);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort09V(ref Vector256<float> d01, ref Vector256<float> d02, ref Vector256<float> d03, ref Vector256<float> d04, ref Vector256<float> d05, ref Vector256<float> d06, ref Vector256<float> d07, ref Vector256<float> d08, ref Vector256<float> d09)
        {
            Vector256<float> tmp;


            BitonicSort08V(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
            BitonicSort01V(ref d09);

            tmp = Permute4x64(Shuffle(d09.AsInt32(), X_R).AsInt64(), P_X).AsSingle();
            d09 = Max(d08, tmp);
            d08 = Min(d08, tmp);

            BitonicSort08VMerge(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
            BitonicSort01VMerge(ref d09);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort10V(ref Vector256<float> d01, ref Vector256<float> d02, ref Vector256<float> d03, ref Vector256<float> d04, ref Vector256<float> d05, ref Vector256<float> d06, ref Vector256<float> d07, ref Vector256<float> d08, ref Vector256<float> d09, ref Vector256<float> d10)
        {
            Vector256<float> tmp;


            BitonicSort08V(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
            BitonicSort02V(ref d09, ref d10);

            tmp = Permute4x64(Shuffle(d09.AsInt32(), X_R).AsInt64(), P_X).AsSingle();
            d09 = Max(d08, tmp);
            d08 = Min(d08, tmp);

            tmp = Permute4x64(Shuffle(d10.AsInt32(), X_R).AsInt64(), P_X).AsSingle();
            d10 = Max(d07, tmp);
            d07 = Min(d07, tmp);

            BitonicSort08VMerge(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
            BitonicSort02VMerge(ref d09, ref d10);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort11V(ref Vector256<float> d01, ref Vector256<float> d02, ref Vector256<float> d03, ref Vector256<float> d04, ref Vector256<float> d05, ref Vector256<float> d06, ref Vector256<float> d07, ref Vector256<float> d08, ref Vector256<float> d09, ref Vector256<float> d10, ref Vector256<float> d11)
        {
            Vector256<float> tmp;


            BitonicSort08V(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
            BitonicSort03V(ref d09, ref d10, ref d11);

            tmp = Permute4x64(Shuffle(d09.AsInt32(), X_R).AsInt64(), P_X).AsSingle();
            d09 = Max(d08, tmp);
            d08 = Min(d08, tmp);

            tmp = Permute4x64(Shuffle(d10.AsInt32(), X_R).AsInt64(), P_X).AsSingle();
            d10 = Max(d07, tmp);
            d07 = Min(d07, tmp);

            tmp = Permute4x64(Shuffle(d11.AsInt32(), X_R).AsInt64(), P_X).AsSingle();
            d11 = Max(d06, tmp);
            d06 = Min(d06, tmp);

            BitonicSort08VMerge(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
            BitonicSort03VMerge(ref d09, ref d10, ref d11);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort12V(ref Vector256<float> d01, ref Vector256<float> d02, ref Vector256<float> d03, ref Vector256<float> d04, ref Vector256<float> d05, ref Vector256<float> d06, ref Vector256<float> d07, ref Vector256<float> d08, ref Vector256<float> d09, ref Vector256<float> d10, ref Vector256<float> d11, ref Vector256<float> d12)
        {
            Vector256<float> tmp;


            BitonicSort08V(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
            BitonicSort04V(ref d09, ref d10, ref d11, ref d12);

            tmp = Permute4x64(Shuffle(d09.AsInt32(), X_R).AsInt64(), P_X).AsSingle();
            d09 = Max(d08, tmp);
            d08 = Min(d08, tmp);

            tmp = Permute4x64(Shuffle(d10.AsInt32(), X_R).AsInt64(), P_X).AsSingle();
            d10 = Max(d07, tmp);
            d07 = Min(d07, tmp);

            tmp = Permute4x64(Shuffle(d11.AsInt32(), X_R).AsInt64(), P_X).AsSingle();
            d11 = Max(d06, tmp);
            d06 = Min(d06, tmp);

            tmp = Permute4x64(Shuffle(d12.AsInt32(), X_R).AsInt64(), P_X).AsSingle();
            d12 = Max(d05, tmp);
            d05 = Min(d05, tmp);

            BitonicSort08VMerge(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
            BitonicSort04VMerge(ref d09, ref d10, ref d11, ref d12);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort13V(ref Vector256<float> d01, ref Vector256<float> d02, ref Vector256<float> d03, ref Vector256<float> d04, ref Vector256<float> d05, ref Vector256<float> d06, ref Vector256<float> d07, ref Vector256<float> d08, ref Vector256<float> d09, ref Vector256<float> d10, ref Vector256<float> d11, ref Vector256<float> d12, ref Vector256<float> d13)
        {
            Vector256<float> tmp;


            BitonicSort08V(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
            BitonicSort05V(ref d09, ref d10, ref d11, ref d12, ref d13);

            tmp = Permute4x64(Shuffle(d09.AsInt32(), X_R).AsInt64(), P_X).AsSingle();
            d09 = Max(d08, tmp);
            d08 = Min(d08, tmp);

            tmp = Permute4x64(Shuffle(d10.AsInt32(), X_R).AsInt64(), P_X).AsSingle();
            d10 = Max(d07, tmp);
            d07 = Min(d07, tmp);

            tmp = Permute4x64(Shuffle(d11.AsInt32(), X_R).AsInt64(), P_X).AsSingle();
            d11 = Max(d06, tmp);
            d06 = Min(d06, tmp);

            tmp = Permute4x64(Shuffle(d12.AsInt32(), X_R).AsInt64(), P_X).AsSingle();
            d12 = Max(d05, tmp);
            d05 = Min(d05, tmp);

            tmp = Permute4x64(Shuffle(d13.AsInt32(), X_R).AsInt64(), P_X).AsSingle();
            d13 = Max(d04, tmp);
            d04 = Min(d04, tmp);

            BitonicSort08VMerge(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
            BitonicSort05VMerge(ref d09, ref d10, ref d11, ref d12, ref d13);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort14V(ref Vector256<float> d01, ref Vector256<float> d02, ref Vector256<float> d03, ref Vector256<float> d04, ref Vector256<float> d05, ref Vector256<float> d06, ref Vector256<float> d07, ref Vector256<float> d08, ref Vector256<float> d09, ref Vector256<float> d10, ref Vector256<float> d11, ref Vector256<float> d12, ref Vector256<float> d13, ref Vector256<float> d14)
        {
            Vector256<float> tmp;


            BitonicSort08V(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
            BitonicSort06V(ref d09, ref d10, ref d11, ref d12, ref d13, ref d14);

            tmp = Permute4x64(Shuffle(d09.AsInt32(), X_R).AsInt64(), P_X).AsSingle();
            d09 = Max(d08, tmp);
            d08 = Min(d08, tmp);

            tmp = Permute4x64(Shuffle(d10.AsInt32(), X_R).AsInt64(), P_X).AsSingle();
            d10 = Max(d07, tmp);
            d07 = Min(d07, tmp);

            tmp = Permute4x64(Shuffle(d11.AsInt32(), X_R).AsInt64(), P_X).AsSingle();
            d11 = Max(d06, tmp);
            d06 = Min(d06, tmp);

            tmp = Permute4x64(Shuffle(d12.AsInt32(), X_R).AsInt64(), P_X).AsSingle();
            d12 = Max(d05, tmp);
            d05 = Min(d05, tmp);

            tmp = Permute4x64(Shuffle(d13.AsInt32(), X_R).AsInt64(), P_X).AsSingle();
            d13 = Max(d04, tmp);
            d04 = Min(d04, tmp);

            tmp = Permute4x64(Shuffle(d14.AsInt32(), X_R).AsInt64(), P_X).AsSingle();
            d14 = Max(d03, tmp);
            d03 = Min(d03, tmp);

            BitonicSort08VMerge(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
            BitonicSort06VMerge(ref d09, ref d10, ref d11, ref d12, ref d13, ref d14);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort15V(ref Vector256<float> d01, ref Vector256<float> d02, ref Vector256<float> d03, ref Vector256<float> d04, ref Vector256<float> d05, ref Vector256<float> d06, ref Vector256<float> d07, ref Vector256<float> d08, ref Vector256<float> d09, ref Vector256<float> d10, ref Vector256<float> d11, ref Vector256<float> d12, ref Vector256<float> d13, ref Vector256<float> d14, ref Vector256<float> d15)
        {
            Vector256<float> tmp;


            BitonicSort08V(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
            BitonicSort07V(ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15);

            tmp = Permute4x64(Shuffle(d09.AsInt32(), X_R).AsInt64(), P_X).AsSingle();
            d09 = Max(d08, tmp);
            d08 = Min(d08, tmp);

            tmp = Permute4x64(Shuffle(d10.AsInt32(), X_R).AsInt64(), P_X).AsSingle();
            d10 = Max(d07, tmp);
            d07 = Min(d07, tmp);

            tmp = Permute4x64(Shuffle(d11.AsInt32(), X_R).AsInt64(), P_X).AsSingle();
            d11 = Max(d06, tmp);
            d06 = Min(d06, tmp);

            tmp = Permute4x64(Shuffle(d12.AsInt32(), X_R).AsInt64(), P_X).AsSingle();
            d12 = Max(d05, tmp);
            d05 = Min(d05, tmp);

            tmp = Permute4x64(Shuffle(d13.AsInt32(), X_R).AsInt64(), P_X).AsSingle();
            d13 = Max(d04, tmp);
            d04 = Min(d04, tmp);

            tmp = Permute4x64(Shuffle(d14.AsInt32(), X_R).AsInt64(), P_X).AsSingle();
            d14 = Max(d03, tmp);
            d03 = Min(d03, tmp);

            tmp = Permute4x64(Shuffle(d15.AsInt32(), X_R).AsInt64(), P_X).AsSingle();
            d15 = Max(d02, tmp);
            d02 = Min(d02, tmp);

            BitonicSort08VMerge(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
            BitonicSort07VMerge(ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort16V(ref Vector256<float> d01, ref Vector256<float> d02, ref Vector256<float> d03, ref Vector256<float> d04, ref Vector256<float> d05, ref Vector256<float> d06, ref Vector256<float> d07, ref Vector256<float> d08, ref Vector256<float> d09, ref Vector256<float> d10, ref Vector256<float> d11, ref Vector256<float> d12, ref Vector256<float> d13, ref Vector256<float> d14, ref Vector256<float> d15, ref Vector256<float> d16)
        {
            Vector256<float> tmp;


            BitonicSort08V(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
            BitonicSort08V(ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16);

            tmp = Permute4x64(Shuffle(d09.AsInt32(), X_R).AsInt64(), P_X).AsSingle();
            d09 = Max(d08, tmp);
            d08 = Min(d08, tmp);

            tmp = Permute4x64(Shuffle(d10.AsInt32(), X_R).AsInt64(), P_X).AsSingle();
            d10 = Max(d07, tmp);
            d07 = Min(d07, tmp);

            tmp = Permute4x64(Shuffle(d11.AsInt32(), X_R).AsInt64(), P_X).AsSingle();
            d11 = Max(d06, tmp);
            d06 = Min(d06, tmp);

            tmp = Permute4x64(Shuffle(d12.AsInt32(), X_R).AsInt64(), P_X).AsSingle();
            d12 = Max(d05, tmp);
            d05 = Min(d05, tmp);

            tmp = Permute4x64(Shuffle(d13.AsInt32(), X_R).AsInt64(), P_X).AsSingle();
            d13 = Max(d04, tmp);
            d04 = Min(d04, tmp);

            tmp = Permute4x64(Shuffle(d14.AsInt32(), X_R).AsInt64(), P_X).AsSingle();
            d14 = Max(d03, tmp);
            d03 = Min(d03, tmp);

            tmp = Permute4x64(Shuffle(d15.AsInt32(), X_R).AsInt64(), P_X).AsSingle();
            d15 = Max(d02, tmp);
            d02 = Min(d02, tmp);

            tmp = Permute4x64(Shuffle(d16.AsInt32(), X_R).AsInt64(), P_X).AsSingle();
            d16 = Max(d01, tmp);
            d01 = Min(d01, tmp);

            BitonicSort08VMerge(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
            BitonicSort08VMerge(ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16);
        }


        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort01V(float* ptr)
        {
            var N = Vector256<float>.Count;

            var d01 = LoadVector256(ptr + 00*N);

            BitonicSort01V(ref d01);

            Store(ptr + 00*N, d01);
        }
        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort02V(float* ptr)
        {
            var N = Vector256<float>.Count;

            var d01 = LoadVector256(ptr + 00*N);
            var d02 = LoadVector256(ptr + 01*N);

            BitonicSort02V(ref d01, ref d02);

            Store(ptr + 00*N, d01);
            Store(ptr + 01*N, d02);
        }
        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort03V(float* ptr)
        {
            var N = Vector256<float>.Count;

            var d01 = LoadVector256(ptr + 00*N);
            var d02 = LoadVector256(ptr + 01*N);
            var d03 = LoadVector256(ptr + 02*N);

            BitonicSort03V(ref d01, ref d02, ref d03);

            Store(ptr + 00*N, d01);
            Store(ptr + 01*N, d02);
            Store(ptr + 02*N, d03);
        }
        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort04V(float* ptr)
        {
            var N = Vector256<float>.Count;

            var d01 = LoadVector256(ptr + 00*N);
            var d02 = LoadVector256(ptr + 01*N);
            var d03 = LoadVector256(ptr + 02*N);
            var d04 = LoadVector256(ptr + 03*N);

            BitonicSort04V(ref d01, ref d02, ref d03, ref d04);

            Store(ptr + 00*N, d01);
            Store(ptr + 01*N, d02);
            Store(ptr + 02*N, d03);
            Store(ptr + 03*N, d04);
        }
        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort05V(float* ptr)
        {
            var N = Vector256<float>.Count;

            var d01 = LoadVector256(ptr + 00*N);
            var d02 = LoadVector256(ptr + 01*N);
            var d03 = LoadVector256(ptr + 02*N);
            var d04 = LoadVector256(ptr + 03*N);
            var d05 = LoadVector256(ptr + 04*N);

            BitonicSort05V(ref d01, ref d02, ref d03, ref d04, ref d05);

            Store(ptr + 00*N, d01);
            Store(ptr + 01*N, d02);
            Store(ptr + 02*N, d03);
            Store(ptr + 03*N, d04);
            Store(ptr + 04*N, d05);
        }
        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort06V(float* ptr)
        {
            var N = Vector256<float>.Count;

            var d01 = LoadVector256(ptr + 00*N);
            var d02 = LoadVector256(ptr + 01*N);
            var d03 = LoadVector256(ptr + 02*N);
            var d04 = LoadVector256(ptr + 03*N);
            var d05 = LoadVector256(ptr + 04*N);
            var d06 = LoadVector256(ptr + 05*N);

            BitonicSort06V(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06);

            Store(ptr + 00*N, d01);
            Store(ptr + 01*N, d02);
            Store(ptr + 02*N, d03);
            Store(ptr + 03*N, d04);
            Store(ptr + 04*N, d05);
            Store(ptr + 05*N, d06);
        }
        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort07V(float* ptr)
        {
            var N = Vector256<float>.Count;

            var d01 = LoadVector256(ptr + 00*N);
            var d02 = LoadVector256(ptr + 01*N);
            var d03 = LoadVector256(ptr + 02*N);
            var d04 = LoadVector256(ptr + 03*N);
            var d05 = LoadVector256(ptr + 04*N);
            var d06 = LoadVector256(ptr + 05*N);
            var d07 = LoadVector256(ptr + 06*N);

            BitonicSort07V(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07);

            Store(ptr + 00*N, d01);
            Store(ptr + 01*N, d02);
            Store(ptr + 02*N, d03);
            Store(ptr + 03*N, d04);
            Store(ptr + 04*N, d05);
            Store(ptr + 05*N, d06);
            Store(ptr + 06*N, d07);
        }
        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort08V(float* ptr)
        {
            var N = Vector256<float>.Count;

            var d01 = LoadVector256(ptr + 00*N);
            var d02 = LoadVector256(ptr + 01*N);
            var d03 = LoadVector256(ptr + 02*N);
            var d04 = LoadVector256(ptr + 03*N);
            var d05 = LoadVector256(ptr + 04*N);
            var d06 = LoadVector256(ptr + 05*N);
            var d07 = LoadVector256(ptr + 06*N);
            var d08 = LoadVector256(ptr + 07*N);

            BitonicSort08V(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);

            Store(ptr + 00*N, d01);
            Store(ptr + 01*N, d02);
            Store(ptr + 02*N, d03);
            Store(ptr + 03*N, d04);
            Store(ptr + 04*N, d05);
            Store(ptr + 05*N, d06);
            Store(ptr + 06*N, d07);
            Store(ptr + 07*N, d08);
        }
        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort09V(float* ptr)
        {
            var N = Vector256<float>.Count;

            var d01 = LoadVector256(ptr + 00*N);
            var d02 = LoadVector256(ptr + 01*N);
            var d03 = LoadVector256(ptr + 02*N);
            var d04 = LoadVector256(ptr + 03*N);
            var d05 = LoadVector256(ptr + 04*N);
            var d06 = LoadVector256(ptr + 05*N);
            var d07 = LoadVector256(ptr + 06*N);
            var d08 = LoadVector256(ptr + 07*N);
            var d09 = LoadVector256(ptr + 08*N);

            BitonicSort09V(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09);

            Store(ptr + 00*N, d01);
            Store(ptr + 01*N, d02);
            Store(ptr + 02*N, d03);
            Store(ptr + 03*N, d04);
            Store(ptr + 04*N, d05);
            Store(ptr + 05*N, d06);
            Store(ptr + 06*N, d07);
            Store(ptr + 07*N, d08);
            Store(ptr + 08*N, d09);
        }
        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort10V(float* ptr)
        {
            var N = Vector256<float>.Count;

            var d01 = LoadVector256(ptr + 00*N);
            var d02 = LoadVector256(ptr + 01*N);
            var d03 = LoadVector256(ptr + 02*N);
            var d04 = LoadVector256(ptr + 03*N);
            var d05 = LoadVector256(ptr + 04*N);
            var d06 = LoadVector256(ptr + 05*N);
            var d07 = LoadVector256(ptr + 06*N);
            var d08 = LoadVector256(ptr + 07*N);
            var d09 = LoadVector256(ptr + 08*N);
            var d10 = LoadVector256(ptr + 09*N);

            BitonicSort10V(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10);

            Store(ptr + 00*N, d01);
            Store(ptr + 01*N, d02);
            Store(ptr + 02*N, d03);
            Store(ptr + 03*N, d04);
            Store(ptr + 04*N, d05);
            Store(ptr + 05*N, d06);
            Store(ptr + 06*N, d07);
            Store(ptr + 07*N, d08);
            Store(ptr + 08*N, d09);
            Store(ptr + 09*N, d10);
        }
        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort11V(float* ptr)
        {
            var N = Vector256<float>.Count;

            var d01 = LoadVector256(ptr + 00*N);
            var d02 = LoadVector256(ptr + 01*N);
            var d03 = LoadVector256(ptr + 02*N);
            var d04 = LoadVector256(ptr + 03*N);
            var d05 = LoadVector256(ptr + 04*N);
            var d06 = LoadVector256(ptr + 05*N);
            var d07 = LoadVector256(ptr + 06*N);
            var d08 = LoadVector256(ptr + 07*N);
            var d09 = LoadVector256(ptr + 08*N);
            var d10 = LoadVector256(ptr + 09*N);
            var d11 = LoadVector256(ptr + 10*N);

            BitonicSort11V(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11);

            Store(ptr + 00*N, d01);
            Store(ptr + 01*N, d02);
            Store(ptr + 02*N, d03);
            Store(ptr + 03*N, d04);
            Store(ptr + 04*N, d05);
            Store(ptr + 05*N, d06);
            Store(ptr + 06*N, d07);
            Store(ptr + 07*N, d08);
            Store(ptr + 08*N, d09);
            Store(ptr + 09*N, d10);
            Store(ptr + 10*N, d11);
        }
        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort12V(float* ptr)
        {
            var N = Vector256<float>.Count;

            var d01 = LoadVector256(ptr + 00*N);
            var d02 = LoadVector256(ptr + 01*N);
            var d03 = LoadVector256(ptr + 02*N);
            var d04 = LoadVector256(ptr + 03*N);
            var d05 = LoadVector256(ptr + 04*N);
            var d06 = LoadVector256(ptr + 05*N);
            var d07 = LoadVector256(ptr + 06*N);
            var d08 = LoadVector256(ptr + 07*N);
            var d09 = LoadVector256(ptr + 08*N);
            var d10 = LoadVector256(ptr + 09*N);
            var d11 = LoadVector256(ptr + 10*N);
            var d12 = LoadVector256(ptr + 11*N);

            BitonicSort12V(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12);

            Store(ptr + 00*N, d01);
            Store(ptr + 01*N, d02);
            Store(ptr + 02*N, d03);
            Store(ptr + 03*N, d04);
            Store(ptr + 04*N, d05);
            Store(ptr + 05*N, d06);
            Store(ptr + 06*N, d07);
            Store(ptr + 07*N, d08);
            Store(ptr + 08*N, d09);
            Store(ptr + 09*N, d10);
            Store(ptr + 10*N, d11);
            Store(ptr + 11*N, d12);
        }
        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort13V(float* ptr)
        {
            var N = Vector256<float>.Count;

            var d01 = LoadVector256(ptr + 00*N);
            var d02 = LoadVector256(ptr + 01*N);
            var d03 = LoadVector256(ptr + 02*N);
            var d04 = LoadVector256(ptr + 03*N);
            var d05 = LoadVector256(ptr + 04*N);
            var d06 = LoadVector256(ptr + 05*N);
            var d07 = LoadVector256(ptr + 06*N);
            var d08 = LoadVector256(ptr + 07*N);
            var d09 = LoadVector256(ptr + 08*N);
            var d10 = LoadVector256(ptr + 09*N);
            var d11 = LoadVector256(ptr + 10*N);
            var d12 = LoadVector256(ptr + 11*N);
            var d13 = LoadVector256(ptr + 12*N);

            BitonicSort13V(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13);

            Store(ptr + 00*N, d01);
            Store(ptr + 01*N, d02);
            Store(ptr + 02*N, d03);
            Store(ptr + 03*N, d04);
            Store(ptr + 04*N, d05);
            Store(ptr + 05*N, d06);
            Store(ptr + 06*N, d07);
            Store(ptr + 07*N, d08);
            Store(ptr + 08*N, d09);
            Store(ptr + 09*N, d10);
            Store(ptr + 10*N, d11);
            Store(ptr + 11*N, d12);
            Store(ptr + 12*N, d13);
        }
        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort14V(float* ptr)
        {
            var N = Vector256<float>.Count;

            var d01 = LoadVector256(ptr + 00*N);
            var d02 = LoadVector256(ptr + 01*N);
            var d03 = LoadVector256(ptr + 02*N);
            var d04 = LoadVector256(ptr + 03*N);
            var d05 = LoadVector256(ptr + 04*N);
            var d06 = LoadVector256(ptr + 05*N);
            var d07 = LoadVector256(ptr + 06*N);
            var d08 = LoadVector256(ptr + 07*N);
            var d09 = LoadVector256(ptr + 08*N);
            var d10 = LoadVector256(ptr + 09*N);
            var d11 = LoadVector256(ptr + 10*N);
            var d12 = LoadVector256(ptr + 11*N);
            var d13 = LoadVector256(ptr + 12*N);
            var d14 = LoadVector256(ptr + 13*N);

            BitonicSort14V(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14);

            Store(ptr + 00*N, d01);
            Store(ptr + 01*N, d02);
            Store(ptr + 02*N, d03);
            Store(ptr + 03*N, d04);
            Store(ptr + 04*N, d05);
            Store(ptr + 05*N, d06);
            Store(ptr + 06*N, d07);
            Store(ptr + 07*N, d08);
            Store(ptr + 08*N, d09);
            Store(ptr + 09*N, d10);
            Store(ptr + 10*N, d11);
            Store(ptr + 11*N, d12);
            Store(ptr + 12*N, d13);
            Store(ptr + 13*N, d14);
        }
        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort15V(float* ptr)
        {
            var N = Vector256<float>.Count;

            var d01 = LoadVector256(ptr + 00*N);
            var d02 = LoadVector256(ptr + 01*N);
            var d03 = LoadVector256(ptr + 02*N);
            var d04 = LoadVector256(ptr + 03*N);
            var d05 = LoadVector256(ptr + 04*N);
            var d06 = LoadVector256(ptr + 05*N);
            var d07 = LoadVector256(ptr + 06*N);
            var d08 = LoadVector256(ptr + 07*N);
            var d09 = LoadVector256(ptr + 08*N);
            var d10 = LoadVector256(ptr + 09*N);
            var d11 = LoadVector256(ptr + 10*N);
            var d12 = LoadVector256(ptr + 11*N);
            var d13 = LoadVector256(ptr + 12*N);
            var d14 = LoadVector256(ptr + 13*N);
            var d15 = LoadVector256(ptr + 14*N);

            BitonicSort15V(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15);

            Store(ptr + 00*N, d01);
            Store(ptr + 01*N, d02);
            Store(ptr + 02*N, d03);
            Store(ptr + 03*N, d04);
            Store(ptr + 04*N, d05);
            Store(ptr + 05*N, d06);
            Store(ptr + 06*N, d07);
            Store(ptr + 07*N, d08);
            Store(ptr + 08*N, d09);
            Store(ptr + 09*N, d10);
            Store(ptr + 10*N, d11);
            Store(ptr + 11*N, d12);
            Store(ptr + 12*N, d13);
            Store(ptr + 13*N, d14);
            Store(ptr + 14*N, d15);
        }
        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort16V(float* ptr)
        {
            var N = Vector256<float>.Count;

            var d01 = LoadVector256(ptr + 00*N);
            var d02 = LoadVector256(ptr + 01*N);
            var d03 = LoadVector256(ptr + 02*N);
            var d04 = LoadVector256(ptr + 03*N);
            var d05 = LoadVector256(ptr + 04*N);
            var d06 = LoadVector256(ptr + 05*N);
            var d07 = LoadVector256(ptr + 06*N);
            var d08 = LoadVector256(ptr + 07*N);
            var d09 = LoadVector256(ptr + 08*N);
            var d10 = LoadVector256(ptr + 09*N);
            var d11 = LoadVector256(ptr + 10*N);
            var d12 = LoadVector256(ptr + 11*N);
            var d13 = LoadVector256(ptr + 12*N);
            var d14 = LoadVector256(ptr + 13*N);
            var d15 = LoadVector256(ptr + 14*N);
            var d16 = LoadVector256(ptr + 15*N);

            BitonicSort16V(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16);

            Store(ptr + 00*N, d01);
            Store(ptr + 01*N, d02);
            Store(ptr + 02*N, d03);
            Store(ptr + 03*N, d04);
            Store(ptr + 04*N, d05);
            Store(ptr + 05*N, d06);
            Store(ptr + 06*N, d07);
            Store(ptr + 07*N, d08);
            Store(ptr + 08*N, d09);
            Store(ptr + 09*N, d10);
            Store(ptr + 10*N, d11);
            Store(ptr + 11*N, d12);
            Store(ptr + 12*N, d13);
            Store(ptr + 13*N, d14);
            Store(ptr + 14*N, d15);
            Store(ptr + 15*N, d16);
        }
        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort02V(ref Vector256<long> d01, ref Vector256<long> d02)
        {
            Vector256<long> tmp;


            BitonicSort01V(ref d01);
            BitonicSort01V(ref d02);

            tmp = Permute4x64(d02.AsDouble(), 0b00_01_10_11).AsInt64();
            d02 = BlendVariable(tmp, d01, CompareGreaterThan(d01, tmp));
            d01 = BlendVariable(d01, tmp, CompareGreaterThan(d01, tmp));

            BitonicSort01VMerge(ref d01);
            BitonicSort01VMerge(ref d02);
        }
        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort02VMerge(ref Vector256<long> d01, ref Vector256<long> d02)
        {
            Vector256<long> tmp;

            tmp = d01;
            d01 = BlendVariable(d02, d01, CompareGreaterThan(d02, d01));
            d02 = BlendVariable(tmp, d02, CompareGreaterThan(d02, tmp));

            BitonicSort01VMerge(ref d01);
            BitonicSort01VMerge(ref d02);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort03V(ref Vector256<long> d01, ref Vector256<long> d02, ref Vector256<long> d03)
        {
            Vector256<long> tmp;


            BitonicSort02V(ref d01, ref d02);
            BitonicSort01V(ref d03);

            tmp = Permute4x64(d03.AsDouble(), 0b00_01_10_11).AsInt64();
            d03 = BlendVariable(tmp, d02, CompareGreaterThan(d02, tmp));
            d02 = BlendVariable(d02, tmp, CompareGreaterThan(d02, tmp));

            BitonicSort02VMerge(ref d01, ref d02);
            BitonicSort01VMerge(ref d03);
        }
        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort03VMerge(ref Vector256<long> d01, ref Vector256<long> d02, ref Vector256<long> d03)
        {
            Vector256<long> tmp;

            tmp = d01;
            d01 = BlendVariable(d03, d01, CompareGreaterThan(d03, d01));
            d03 = BlendVariable(tmp, d03, CompareGreaterThan(d03, tmp));

            BitonicSort02VMerge(ref d01, ref d02);
            BitonicSort01VMerge(ref d03);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort04V(ref Vector256<long> d01, ref Vector256<long> d02, ref Vector256<long> d03, ref Vector256<long> d04)
        {
            Vector256<long> tmp;


            BitonicSort02V(ref d01, ref d02);
            BitonicSort02V(ref d03, ref d04);

            tmp = Permute4x64(d03.AsDouble(), 0b00_01_10_11).AsInt64();
            d03 = BlendVariable(tmp, d02, CompareGreaterThan(d02, tmp));
            d02 = BlendVariable(d02, tmp, CompareGreaterThan(d02, tmp));

            tmp = Permute4x64(d04.AsDouble(), 0b00_01_10_11).AsInt64();
            d04 = BlendVariable(tmp, d01, CompareGreaterThan(d01, tmp));
            d01 = BlendVariable(d01, tmp, CompareGreaterThan(d01, tmp));

            BitonicSort02VMerge(ref d01, ref d02);
            BitonicSort02VMerge(ref d03, ref d04);
        }
        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort04VMerge(ref Vector256<long> d01, ref Vector256<long> d02, ref Vector256<long> d03, ref Vector256<long> d04)
        {
            Vector256<long> tmp;

            tmp = d01;
            d01 = BlendVariable(d03, d01, CompareGreaterThan(d03, d01));
            d03 = BlendVariable(tmp, d03, CompareGreaterThan(d03, tmp));

            tmp = d02;
            d02 = BlendVariable(d04, d02, CompareGreaterThan(d04, d02));
            d04 = BlendVariable(tmp, d04, CompareGreaterThan(d04, tmp));

            BitonicSort02VMerge(ref d01, ref d02);
            BitonicSort02VMerge(ref d03, ref d04);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort05V(ref Vector256<long> d01, ref Vector256<long> d02, ref Vector256<long> d03, ref Vector256<long> d04, ref Vector256<long> d05)
        {
            Vector256<long> tmp;


            BitonicSort04V(ref d01, ref d02, ref d03, ref d04);
            BitonicSort01V(ref d05);

            tmp = Permute4x64(d05.AsDouble(), 0b00_01_10_11).AsInt64();
            d05 = BlendVariable(tmp, d04, CompareGreaterThan(d04, tmp));
            d04 = BlendVariable(d04, tmp, CompareGreaterThan(d04, tmp));

            BitonicSort04VMerge(ref d01, ref d02, ref d03, ref d04);
            BitonicSort01VMerge(ref d05);
        }
        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort05VMerge(ref Vector256<long> d01, ref Vector256<long> d02, ref Vector256<long> d03, ref Vector256<long> d04, ref Vector256<long> d05)
        {
            Vector256<long> tmp;

            tmp = d01;
            d01 = BlendVariable(d05, d01, CompareGreaterThan(d05, d01));
            d05 = BlendVariable(tmp, d05, CompareGreaterThan(d05, tmp));

            BitonicSort04VMerge(ref d01, ref d02, ref d03, ref d04);
            BitonicSort01VMerge(ref d05);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort06V(ref Vector256<long> d01, ref Vector256<long> d02, ref Vector256<long> d03, ref Vector256<long> d04, ref Vector256<long> d05, ref Vector256<long> d06)
        {
            Vector256<long> tmp;


            BitonicSort04V(ref d01, ref d02, ref d03, ref d04);
            BitonicSort02V(ref d05, ref d06);

            tmp = Permute4x64(d05.AsDouble(), 0b00_01_10_11).AsInt64();
            d05 = BlendVariable(tmp, d04, CompareGreaterThan(d04, tmp));
            d04 = BlendVariable(d04, tmp, CompareGreaterThan(d04, tmp));

            tmp = Permute4x64(d06.AsDouble(), 0b00_01_10_11).AsInt64();
            d06 = BlendVariable(tmp, d03, CompareGreaterThan(d03, tmp));
            d03 = BlendVariable(d03, tmp, CompareGreaterThan(d03, tmp));

            BitonicSort04VMerge(ref d01, ref d02, ref d03, ref d04);
            BitonicSort02VMerge(ref d05, ref d06);
        }
        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort06VMerge(ref Vector256<long> d01, ref Vector256<long> d02, ref Vector256<long> d03, ref Vector256<long> d04, ref Vector256<long> d05, ref Vector256<long> d06)
        {
            Vector256<long> tmp;

            tmp = d01;
            d01 = BlendVariable(d05, d01, CompareGreaterThan(d05, d01));
            d05 = BlendVariable(tmp, d05, CompareGreaterThan(d05, tmp));

            tmp = d02;
            d02 = BlendVariable(d06, d02, CompareGreaterThan(d06, d02));
            d06 = BlendVariable(tmp, d06, CompareGreaterThan(d06, tmp));

            BitonicSort04VMerge(ref d01, ref d02, ref d03, ref d04);
            BitonicSort02VMerge(ref d05, ref d06);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort07V(ref Vector256<long> d01, ref Vector256<long> d02, ref Vector256<long> d03, ref Vector256<long> d04, ref Vector256<long> d05, ref Vector256<long> d06, ref Vector256<long> d07)
        {
            Vector256<long> tmp;


            BitonicSort04V(ref d01, ref d02, ref d03, ref d04);
            BitonicSort03V(ref d05, ref d06, ref d07);

            tmp = Permute4x64(d05.AsDouble(), 0b00_01_10_11).AsInt64();
            d05 = BlendVariable(tmp, d04, CompareGreaterThan(d04, tmp));
            d04 = BlendVariable(d04, tmp, CompareGreaterThan(d04, tmp));

            tmp = Permute4x64(d06.AsDouble(), 0b00_01_10_11).AsInt64();
            d06 = BlendVariable(tmp, d03, CompareGreaterThan(d03, tmp));
            d03 = BlendVariable(d03, tmp, CompareGreaterThan(d03, tmp));

            tmp = Permute4x64(d07.AsDouble(), 0b00_01_10_11).AsInt64();
            d07 = BlendVariable(tmp, d02, CompareGreaterThan(d02, tmp));
            d02 = BlendVariable(d02, tmp, CompareGreaterThan(d02, tmp));

            BitonicSort04VMerge(ref d01, ref d02, ref d03, ref d04);
            BitonicSort03VMerge(ref d05, ref d06, ref d07);
        }
        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort07VMerge(ref Vector256<long> d01, ref Vector256<long> d02, ref Vector256<long> d03, ref Vector256<long> d04, ref Vector256<long> d05, ref Vector256<long> d06, ref Vector256<long> d07)
        {
            Vector256<long> tmp;

            tmp = d01;
            d01 = BlendVariable(d05, d01, CompareGreaterThan(d05, d01));
            d05 = BlendVariable(tmp, d05, CompareGreaterThan(d05, tmp));

            tmp = d02;
            d02 = BlendVariable(d06, d02, CompareGreaterThan(d06, d02));
            d06 = BlendVariable(tmp, d06, CompareGreaterThan(d06, tmp));

            tmp = d03;
            d03 = BlendVariable(d07, d03, CompareGreaterThan(d07, d03));
            d07 = BlendVariable(tmp, d07, CompareGreaterThan(d07, tmp));

            BitonicSort04VMerge(ref d01, ref d02, ref d03, ref d04);
            BitonicSort03VMerge(ref d05, ref d06, ref d07);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort08V(ref Vector256<long> d01, ref Vector256<long> d02, ref Vector256<long> d03, ref Vector256<long> d04, ref Vector256<long> d05, ref Vector256<long> d06, ref Vector256<long> d07, ref Vector256<long> d08)
        {
            Vector256<long> tmp;


            BitonicSort04V(ref d01, ref d02, ref d03, ref d04);
            BitonicSort04V(ref d05, ref d06, ref d07, ref d08);

            tmp = Permute4x64(d05.AsDouble(), 0b00_01_10_11).AsInt64();
            d05 = BlendVariable(tmp, d04, CompareGreaterThan(d04, tmp));
            d04 = BlendVariable(d04, tmp, CompareGreaterThan(d04, tmp));

            tmp = Permute4x64(d06.AsDouble(), 0b00_01_10_11).AsInt64();
            d06 = BlendVariable(tmp, d03, CompareGreaterThan(d03, tmp));
            d03 = BlendVariable(d03, tmp, CompareGreaterThan(d03, tmp));

            tmp = Permute4x64(d07.AsDouble(), 0b00_01_10_11).AsInt64();
            d07 = BlendVariable(tmp, d02, CompareGreaterThan(d02, tmp));
            d02 = BlendVariable(d02, tmp, CompareGreaterThan(d02, tmp));

            tmp = Permute4x64(d08.AsDouble(), 0b00_01_10_11).AsInt64();
            d08 = BlendVariable(tmp, d01, CompareGreaterThan(d01, tmp));
            d01 = BlendVariable(d01, tmp, CompareGreaterThan(d01, tmp));

            BitonicSort04VMerge(ref d01, ref d02, ref d03, ref d04);
            BitonicSort04VMerge(ref d05, ref d06, ref d07, ref d08);
        }
        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort08VMerge(ref Vector256<long> d01, ref Vector256<long> d02, ref Vector256<long> d03, ref Vector256<long> d04, ref Vector256<long> d05, ref Vector256<long> d06, ref Vector256<long> d07, ref Vector256<long> d08)
        {
            Vector256<long> tmp;

            tmp = d01;
            d01 = BlendVariable(d05, d01, CompareGreaterThan(d05, d01));
            d05 = BlendVariable(tmp, d05, CompareGreaterThan(d05, tmp));

            tmp = d02;
            d02 = BlendVariable(d06, d02, CompareGreaterThan(d06, d02));
            d06 = BlendVariable(tmp, d06, CompareGreaterThan(d06, tmp));

            tmp = d03;
            d03 = BlendVariable(d07, d03, CompareGreaterThan(d07, d03));
            d07 = BlendVariable(tmp, d07, CompareGreaterThan(d07, tmp));

            tmp = d04;
            d04 = BlendVariable(d08, d04, CompareGreaterThan(d08, d04));
            d08 = BlendVariable(tmp, d08, CompareGreaterThan(d08, tmp));

            BitonicSort04VMerge(ref d01, ref d02, ref d03, ref d04);
            BitonicSort04VMerge(ref d05, ref d06, ref d07, ref d08);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort09V(ref Vector256<long> d01, ref Vector256<long> d02, ref Vector256<long> d03, ref Vector256<long> d04, ref Vector256<long> d05, ref Vector256<long> d06, ref Vector256<long> d07, ref Vector256<long> d08, ref Vector256<long> d09)
        {
            Vector256<long> tmp;


            BitonicSort08V(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
            BitonicSort01V(ref d09);

            tmp = Permute4x64(d09.AsDouble(), 0b00_01_10_11).AsInt64();
            d09 = BlendVariable(tmp, d08, CompareGreaterThan(d08, tmp));
            d08 = BlendVariable(d08, tmp, CompareGreaterThan(d08, tmp));

            BitonicSort08VMerge(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
            BitonicSort01VMerge(ref d09);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort10V(ref Vector256<long> d01, ref Vector256<long> d02, ref Vector256<long> d03, ref Vector256<long> d04, ref Vector256<long> d05, ref Vector256<long> d06, ref Vector256<long> d07, ref Vector256<long> d08, ref Vector256<long> d09, ref Vector256<long> d10)
        {
            Vector256<long> tmp;


            BitonicSort08V(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
            BitonicSort02V(ref d09, ref d10);

            tmp = Permute4x64(d09.AsDouble(), 0b00_01_10_11).AsInt64();
            d09 = BlendVariable(tmp, d08, CompareGreaterThan(d08, tmp));
            d08 = BlendVariable(d08, tmp, CompareGreaterThan(d08, tmp));

            tmp = Permute4x64(d10.AsDouble(), 0b00_01_10_11).AsInt64();
            d10 = BlendVariable(tmp, d07, CompareGreaterThan(d07, tmp));
            d07 = BlendVariable(d07, tmp, CompareGreaterThan(d07, tmp));

            BitonicSort08VMerge(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
            BitonicSort02VMerge(ref d09, ref d10);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort11V(ref Vector256<long> d01, ref Vector256<long> d02, ref Vector256<long> d03, ref Vector256<long> d04, ref Vector256<long> d05, ref Vector256<long> d06, ref Vector256<long> d07, ref Vector256<long> d08, ref Vector256<long> d09, ref Vector256<long> d10, ref Vector256<long> d11)
        {
            Vector256<long> tmp;


            BitonicSort08V(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
            BitonicSort03V(ref d09, ref d10, ref d11);

            tmp = Permute4x64(d09.AsDouble(), 0b00_01_10_11).AsInt64();
            d09 = BlendVariable(tmp, d08, CompareGreaterThan(d08, tmp));
            d08 = BlendVariable(d08, tmp, CompareGreaterThan(d08, tmp));

            tmp = Permute4x64(d10.AsDouble(), 0b00_01_10_11).AsInt64();
            d10 = BlendVariable(tmp, d07, CompareGreaterThan(d07, tmp));
            d07 = BlendVariable(d07, tmp, CompareGreaterThan(d07, tmp));

            tmp = Permute4x64(d11.AsDouble(), 0b00_01_10_11).AsInt64();
            d11 = BlendVariable(tmp, d06, CompareGreaterThan(d06, tmp));
            d06 = BlendVariable(d06, tmp, CompareGreaterThan(d06, tmp));

            BitonicSort08VMerge(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
            BitonicSort03VMerge(ref d09, ref d10, ref d11);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort12V(ref Vector256<long> d01, ref Vector256<long> d02, ref Vector256<long> d03, ref Vector256<long> d04, ref Vector256<long> d05, ref Vector256<long> d06, ref Vector256<long> d07, ref Vector256<long> d08, ref Vector256<long> d09, ref Vector256<long> d10, ref Vector256<long> d11, ref Vector256<long> d12)
        {
            Vector256<long> tmp;


            BitonicSort08V(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
            BitonicSort04V(ref d09, ref d10, ref d11, ref d12);

            tmp = Permute4x64(d09.AsDouble(), 0b00_01_10_11).AsInt64();
            d09 = BlendVariable(tmp, d08, CompareGreaterThan(d08, tmp));
            d08 = BlendVariable(d08, tmp, CompareGreaterThan(d08, tmp));

            tmp = Permute4x64(d10.AsDouble(), 0b00_01_10_11).AsInt64();
            d10 = BlendVariable(tmp, d07, CompareGreaterThan(d07, tmp));
            d07 = BlendVariable(d07, tmp, CompareGreaterThan(d07, tmp));

            tmp = Permute4x64(d11.AsDouble(), 0b00_01_10_11).AsInt64();
            d11 = BlendVariable(tmp, d06, CompareGreaterThan(d06, tmp));
            d06 = BlendVariable(d06, tmp, CompareGreaterThan(d06, tmp));

            tmp = Permute4x64(d12.AsDouble(), 0b00_01_10_11).AsInt64();
            d12 = BlendVariable(tmp, d05, CompareGreaterThan(d05, tmp));
            d05 = BlendVariable(d05, tmp, CompareGreaterThan(d05, tmp));

            BitonicSort08VMerge(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
            BitonicSort04VMerge(ref d09, ref d10, ref d11, ref d12);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort13V(ref Vector256<long> d01, ref Vector256<long> d02, ref Vector256<long> d03, ref Vector256<long> d04, ref Vector256<long> d05, ref Vector256<long> d06, ref Vector256<long> d07, ref Vector256<long> d08, ref Vector256<long> d09, ref Vector256<long> d10, ref Vector256<long> d11, ref Vector256<long> d12, ref Vector256<long> d13)
        {
            Vector256<long> tmp;


            BitonicSort08V(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
            BitonicSort05V(ref d09, ref d10, ref d11, ref d12, ref d13);

            tmp = Permute4x64(d09.AsDouble(), 0b00_01_10_11).AsInt64();
            d09 = BlendVariable(tmp, d08, CompareGreaterThan(d08, tmp));
            d08 = BlendVariable(d08, tmp, CompareGreaterThan(d08, tmp));

            tmp = Permute4x64(d10.AsDouble(), 0b00_01_10_11).AsInt64();
            d10 = BlendVariable(tmp, d07, CompareGreaterThan(d07, tmp));
            d07 = BlendVariable(d07, tmp, CompareGreaterThan(d07, tmp));

            tmp = Permute4x64(d11.AsDouble(), 0b00_01_10_11).AsInt64();
            d11 = BlendVariable(tmp, d06, CompareGreaterThan(d06, tmp));
            d06 = BlendVariable(d06, tmp, CompareGreaterThan(d06, tmp));

            tmp = Permute4x64(d12.AsDouble(), 0b00_01_10_11).AsInt64();
            d12 = BlendVariable(tmp, d05, CompareGreaterThan(d05, tmp));
            d05 = BlendVariable(d05, tmp, CompareGreaterThan(d05, tmp));

            tmp = Permute4x64(d13.AsDouble(), 0b00_01_10_11).AsInt64();
            d13 = BlendVariable(tmp, d04, CompareGreaterThan(d04, tmp));
            d04 = BlendVariable(d04, tmp, CompareGreaterThan(d04, tmp));

            BitonicSort08VMerge(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
            BitonicSort05VMerge(ref d09, ref d10, ref d11, ref d12, ref d13);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort14V(ref Vector256<long> d01, ref Vector256<long> d02, ref Vector256<long> d03, ref Vector256<long> d04, ref Vector256<long> d05, ref Vector256<long> d06, ref Vector256<long> d07, ref Vector256<long> d08, ref Vector256<long> d09, ref Vector256<long> d10, ref Vector256<long> d11, ref Vector256<long> d12, ref Vector256<long> d13, ref Vector256<long> d14)
        {
            Vector256<long> tmp;


            BitonicSort08V(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
            BitonicSort06V(ref d09, ref d10, ref d11, ref d12, ref d13, ref d14);

            tmp = Permute4x64(d09.AsDouble(), 0b00_01_10_11).AsInt64();
            d09 = BlendVariable(tmp, d08, CompareGreaterThan(d08, tmp));
            d08 = BlendVariable(d08, tmp, CompareGreaterThan(d08, tmp));

            tmp = Permute4x64(d10.AsDouble(), 0b00_01_10_11).AsInt64();
            d10 = BlendVariable(tmp, d07, CompareGreaterThan(d07, tmp));
            d07 = BlendVariable(d07, tmp, CompareGreaterThan(d07, tmp));

            tmp = Permute4x64(d11.AsDouble(), 0b00_01_10_11).AsInt64();
            d11 = BlendVariable(tmp, d06, CompareGreaterThan(d06, tmp));
            d06 = BlendVariable(d06, tmp, CompareGreaterThan(d06, tmp));

            tmp = Permute4x64(d12.AsDouble(), 0b00_01_10_11).AsInt64();
            d12 = BlendVariable(tmp, d05, CompareGreaterThan(d05, tmp));
            d05 = BlendVariable(d05, tmp, CompareGreaterThan(d05, tmp));

            tmp = Permute4x64(d13.AsDouble(), 0b00_01_10_11).AsInt64();
            d13 = BlendVariable(tmp, d04, CompareGreaterThan(d04, tmp));
            d04 = BlendVariable(d04, tmp, CompareGreaterThan(d04, tmp));

            tmp = Permute4x64(d14.AsDouble(), 0b00_01_10_11).AsInt64();
            d14 = BlendVariable(tmp, d03, CompareGreaterThan(d03, tmp));
            d03 = BlendVariable(d03, tmp, CompareGreaterThan(d03, tmp));

            BitonicSort08VMerge(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
            BitonicSort06VMerge(ref d09, ref d10, ref d11, ref d12, ref d13, ref d14);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort15V(ref Vector256<long> d01, ref Vector256<long> d02, ref Vector256<long> d03, ref Vector256<long> d04, ref Vector256<long> d05, ref Vector256<long> d06, ref Vector256<long> d07, ref Vector256<long> d08, ref Vector256<long> d09, ref Vector256<long> d10, ref Vector256<long> d11, ref Vector256<long> d12, ref Vector256<long> d13, ref Vector256<long> d14, ref Vector256<long> d15)
        {
            Vector256<long> tmp;


            BitonicSort08V(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
            BitonicSort07V(ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15);

            tmp = Permute4x64(d09.AsDouble(), 0b00_01_10_11).AsInt64();
            d09 = BlendVariable(tmp, d08, CompareGreaterThan(d08, tmp));
            d08 = BlendVariable(d08, tmp, CompareGreaterThan(d08, tmp));

            tmp = Permute4x64(d10.AsDouble(), 0b00_01_10_11).AsInt64();
            d10 = BlendVariable(tmp, d07, CompareGreaterThan(d07, tmp));
            d07 = BlendVariable(d07, tmp, CompareGreaterThan(d07, tmp));

            tmp = Permute4x64(d11.AsDouble(), 0b00_01_10_11).AsInt64();
            d11 = BlendVariable(tmp, d06, CompareGreaterThan(d06, tmp));
            d06 = BlendVariable(d06, tmp, CompareGreaterThan(d06, tmp));

            tmp = Permute4x64(d12.AsDouble(), 0b00_01_10_11).AsInt64();
            d12 = BlendVariable(tmp, d05, CompareGreaterThan(d05, tmp));
            d05 = BlendVariable(d05, tmp, CompareGreaterThan(d05, tmp));

            tmp = Permute4x64(d13.AsDouble(), 0b00_01_10_11).AsInt64();
            d13 = BlendVariable(tmp, d04, CompareGreaterThan(d04, tmp));
            d04 = BlendVariable(d04, tmp, CompareGreaterThan(d04, tmp));

            tmp = Permute4x64(d14.AsDouble(), 0b00_01_10_11).AsInt64();
            d14 = BlendVariable(tmp, d03, CompareGreaterThan(d03, tmp));
            d03 = BlendVariable(d03, tmp, CompareGreaterThan(d03, tmp));

            tmp = Permute4x64(d15.AsDouble(), 0b00_01_10_11).AsInt64();
            d15 = BlendVariable(tmp, d02, CompareGreaterThan(d02, tmp));
            d02 = BlendVariable(d02, tmp, CompareGreaterThan(d02, tmp));

            BitonicSort08VMerge(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
            BitonicSort07VMerge(ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort16V(ref Vector256<long> d01, ref Vector256<long> d02, ref Vector256<long> d03, ref Vector256<long> d04, ref Vector256<long> d05, ref Vector256<long> d06, ref Vector256<long> d07, ref Vector256<long> d08, ref Vector256<long> d09, ref Vector256<long> d10, ref Vector256<long> d11, ref Vector256<long> d12, ref Vector256<long> d13, ref Vector256<long> d14, ref Vector256<long> d15, ref Vector256<long> d16)
        {
            Vector256<long> tmp;


            BitonicSort08V(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
            BitonicSort08V(ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16);

            tmp = Permute4x64(d09.AsDouble(), 0b00_01_10_11).AsInt64();
            d09 = BlendVariable(tmp, d08, CompareGreaterThan(d08, tmp));
            d08 = BlendVariable(d08, tmp, CompareGreaterThan(d08, tmp));

            tmp = Permute4x64(d10.AsDouble(), 0b00_01_10_11).AsInt64();
            d10 = BlendVariable(tmp, d07, CompareGreaterThan(d07, tmp));
            d07 = BlendVariable(d07, tmp, CompareGreaterThan(d07, tmp));

            tmp = Permute4x64(d11.AsDouble(), 0b00_01_10_11).AsInt64();
            d11 = BlendVariable(tmp, d06, CompareGreaterThan(d06, tmp));
            d06 = BlendVariable(d06, tmp, CompareGreaterThan(d06, tmp));

            tmp = Permute4x64(d12.AsDouble(), 0b00_01_10_11).AsInt64();
            d12 = BlendVariable(tmp, d05, CompareGreaterThan(d05, tmp));
            d05 = BlendVariable(d05, tmp, CompareGreaterThan(d05, tmp));

            tmp = Permute4x64(d13.AsDouble(), 0b00_01_10_11).AsInt64();
            d13 = BlendVariable(tmp, d04, CompareGreaterThan(d04, tmp));
            d04 = BlendVariable(d04, tmp, CompareGreaterThan(d04, tmp));

            tmp = Permute4x64(d14.AsDouble(), 0b00_01_10_11).AsInt64();
            d14 = BlendVariable(tmp, d03, CompareGreaterThan(d03, tmp));
            d03 = BlendVariable(d03, tmp, CompareGreaterThan(d03, tmp));

            tmp = Permute4x64(d15.AsDouble(), 0b00_01_10_11).AsInt64();
            d15 = BlendVariable(tmp, d02, CompareGreaterThan(d02, tmp));
            d02 = BlendVariable(d02, tmp, CompareGreaterThan(d02, tmp));

            tmp = Permute4x64(d16.AsDouble(), 0b00_01_10_11).AsInt64();
            d16 = BlendVariable(tmp, d01, CompareGreaterThan(d01, tmp));
            d01 = BlendVariable(d01, tmp, CompareGreaterThan(d01, tmp));

            BitonicSort08VMerge(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
            BitonicSort08VMerge(ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16);
        }


        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort01V(long* ptr)
        {
            var N = Vector256<long>.Count;

            var d01 = LoadDquVector256(ptr + 00*N);

            BitonicSort01V(ref d01);

            Store(ptr + 00*N, d01);
        }
        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort02V(long* ptr)
        {
            var N = Vector256<long>.Count;

            var d01 = LoadDquVector256(ptr + 00*N);
            var d02 = LoadDquVector256(ptr + 01*N);

            BitonicSort02V(ref d01, ref d02);

            Store(ptr + 00*N, d01);
            Store(ptr + 01*N, d02);
        }
        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort03V(long* ptr)
        {
            var N = Vector256<long>.Count;

            var d01 = LoadDquVector256(ptr + 00*N);
            var d02 = LoadDquVector256(ptr + 01*N);
            var d03 = LoadDquVector256(ptr + 02*N);

            BitonicSort03V(ref d01, ref d02, ref d03);

            Store(ptr + 00*N, d01);
            Store(ptr + 01*N, d02);
            Store(ptr + 02*N, d03);
        }
        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort04V(long* ptr)
        {
            var N = Vector256<long>.Count;

            var d01 = LoadDquVector256(ptr + 00*N);
            var d02 = LoadDquVector256(ptr + 01*N);
            var d03 = LoadDquVector256(ptr + 02*N);
            var d04 = LoadDquVector256(ptr + 03*N);

            BitonicSort04V(ref d01, ref d02, ref d03, ref d04);

            Store(ptr + 00*N, d01);
            Store(ptr + 01*N, d02);
            Store(ptr + 02*N, d03);
            Store(ptr + 03*N, d04);
        }
        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort05V(long* ptr)
        {
            var N = Vector256<long>.Count;

            var d01 = LoadDquVector256(ptr + 00*N);
            var d02 = LoadDquVector256(ptr + 01*N);
            var d03 = LoadDquVector256(ptr + 02*N);
            var d04 = LoadDquVector256(ptr + 03*N);
            var d05 = LoadDquVector256(ptr + 04*N);

            BitonicSort05V(ref d01, ref d02, ref d03, ref d04, ref d05);

            Store(ptr + 00*N, d01);
            Store(ptr + 01*N, d02);
            Store(ptr + 02*N, d03);
            Store(ptr + 03*N, d04);
            Store(ptr + 04*N, d05);
        }
        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort06V(long* ptr)
        {
            var N = Vector256<long>.Count;

            var d01 = LoadDquVector256(ptr + 00*N);
            var d02 = LoadDquVector256(ptr + 01*N);
            var d03 = LoadDquVector256(ptr + 02*N);
            var d04 = LoadDquVector256(ptr + 03*N);
            var d05 = LoadDquVector256(ptr + 04*N);
            var d06 = LoadDquVector256(ptr + 05*N);

            BitonicSort06V(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06);

            Store(ptr + 00*N, d01);
            Store(ptr + 01*N, d02);
            Store(ptr + 02*N, d03);
            Store(ptr + 03*N, d04);
            Store(ptr + 04*N, d05);
            Store(ptr + 05*N, d06);
        }
        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort07V(long* ptr)
        {
            var N = Vector256<long>.Count;

            var d01 = LoadDquVector256(ptr + 00*N);
            var d02 = LoadDquVector256(ptr + 01*N);
            var d03 = LoadDquVector256(ptr + 02*N);
            var d04 = LoadDquVector256(ptr + 03*N);
            var d05 = LoadDquVector256(ptr + 04*N);
            var d06 = LoadDquVector256(ptr + 05*N);
            var d07 = LoadDquVector256(ptr + 06*N);

            BitonicSort07V(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07);

            Store(ptr + 00*N, d01);
            Store(ptr + 01*N, d02);
            Store(ptr + 02*N, d03);
            Store(ptr + 03*N, d04);
            Store(ptr + 04*N, d05);
            Store(ptr + 05*N, d06);
            Store(ptr + 06*N, d07);
        }
        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort08V(long* ptr)
        {
            var N = Vector256<long>.Count;

            var d01 = LoadDquVector256(ptr + 00*N);
            var d02 = LoadDquVector256(ptr + 01*N);
            var d03 = LoadDquVector256(ptr + 02*N);
            var d04 = LoadDquVector256(ptr + 03*N);
            var d05 = LoadDquVector256(ptr + 04*N);
            var d06 = LoadDquVector256(ptr + 05*N);
            var d07 = LoadDquVector256(ptr + 06*N);
            var d08 = LoadDquVector256(ptr + 07*N);

            BitonicSort08V(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);

            Store(ptr + 00*N, d01);
            Store(ptr + 01*N, d02);
            Store(ptr + 02*N, d03);
            Store(ptr + 03*N, d04);
            Store(ptr + 04*N, d05);
            Store(ptr + 05*N, d06);
            Store(ptr + 06*N, d07);
            Store(ptr + 07*N, d08);
        }
        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort09V(long* ptr)
        {
            var N = Vector256<long>.Count;

            var d01 = LoadDquVector256(ptr + 00*N);
            var d02 = LoadDquVector256(ptr + 01*N);
            var d03 = LoadDquVector256(ptr + 02*N);
            var d04 = LoadDquVector256(ptr + 03*N);
            var d05 = LoadDquVector256(ptr + 04*N);
            var d06 = LoadDquVector256(ptr + 05*N);
            var d07 = LoadDquVector256(ptr + 06*N);
            var d08 = LoadDquVector256(ptr + 07*N);
            var d09 = LoadDquVector256(ptr + 08*N);

            BitonicSort09V(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09);

            Store(ptr + 00*N, d01);
            Store(ptr + 01*N, d02);
            Store(ptr + 02*N, d03);
            Store(ptr + 03*N, d04);
            Store(ptr + 04*N, d05);
            Store(ptr + 05*N, d06);
            Store(ptr + 06*N, d07);
            Store(ptr + 07*N, d08);
            Store(ptr + 08*N, d09);
        }
        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort10V(long* ptr)
        {
            var N = Vector256<long>.Count;

            var d01 = LoadDquVector256(ptr + 00*N);
            var d02 = LoadDquVector256(ptr + 01*N);
            var d03 = LoadDquVector256(ptr + 02*N);
            var d04 = LoadDquVector256(ptr + 03*N);
            var d05 = LoadDquVector256(ptr + 04*N);
            var d06 = LoadDquVector256(ptr + 05*N);
            var d07 = LoadDquVector256(ptr + 06*N);
            var d08 = LoadDquVector256(ptr + 07*N);
            var d09 = LoadDquVector256(ptr + 08*N);
            var d10 = LoadDquVector256(ptr + 09*N);

            BitonicSort10V(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10);

            Store(ptr + 00*N, d01);
            Store(ptr + 01*N, d02);
            Store(ptr + 02*N, d03);
            Store(ptr + 03*N, d04);
            Store(ptr + 04*N, d05);
            Store(ptr + 05*N, d06);
            Store(ptr + 06*N, d07);
            Store(ptr + 07*N, d08);
            Store(ptr + 08*N, d09);
            Store(ptr + 09*N, d10);
        }
        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort11V(long* ptr)
        {
            var N = Vector256<long>.Count;

            var d01 = LoadDquVector256(ptr + 00*N);
            var d02 = LoadDquVector256(ptr + 01*N);
            var d03 = LoadDquVector256(ptr + 02*N);
            var d04 = LoadDquVector256(ptr + 03*N);
            var d05 = LoadDquVector256(ptr + 04*N);
            var d06 = LoadDquVector256(ptr + 05*N);
            var d07 = LoadDquVector256(ptr + 06*N);
            var d08 = LoadDquVector256(ptr + 07*N);
            var d09 = LoadDquVector256(ptr + 08*N);
            var d10 = LoadDquVector256(ptr + 09*N);
            var d11 = LoadDquVector256(ptr + 10*N);

            BitonicSort11V(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11);

            Store(ptr + 00*N, d01);
            Store(ptr + 01*N, d02);
            Store(ptr + 02*N, d03);
            Store(ptr + 03*N, d04);
            Store(ptr + 04*N, d05);
            Store(ptr + 05*N, d06);
            Store(ptr + 06*N, d07);
            Store(ptr + 07*N, d08);
            Store(ptr + 08*N, d09);
            Store(ptr + 09*N, d10);
            Store(ptr + 10*N, d11);
        }
        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort12V(long* ptr)
        {
            var N = Vector256<long>.Count;

            var d01 = LoadDquVector256(ptr + 00*N);
            var d02 = LoadDquVector256(ptr + 01*N);
            var d03 = LoadDquVector256(ptr + 02*N);
            var d04 = LoadDquVector256(ptr + 03*N);
            var d05 = LoadDquVector256(ptr + 04*N);
            var d06 = LoadDquVector256(ptr + 05*N);
            var d07 = LoadDquVector256(ptr + 06*N);
            var d08 = LoadDquVector256(ptr + 07*N);
            var d09 = LoadDquVector256(ptr + 08*N);
            var d10 = LoadDquVector256(ptr + 09*N);
            var d11 = LoadDquVector256(ptr + 10*N);
            var d12 = LoadDquVector256(ptr + 11*N);

            BitonicSort12V(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12);

            Store(ptr + 00*N, d01);
            Store(ptr + 01*N, d02);
            Store(ptr + 02*N, d03);
            Store(ptr + 03*N, d04);
            Store(ptr + 04*N, d05);
            Store(ptr + 05*N, d06);
            Store(ptr + 06*N, d07);
            Store(ptr + 07*N, d08);
            Store(ptr + 08*N, d09);
            Store(ptr + 09*N, d10);
            Store(ptr + 10*N, d11);
            Store(ptr + 11*N, d12);
        }
        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort13V(long* ptr)
        {
            var N = Vector256<long>.Count;

            var d01 = LoadDquVector256(ptr + 00*N);
            var d02 = LoadDquVector256(ptr + 01*N);
            var d03 = LoadDquVector256(ptr + 02*N);
            var d04 = LoadDquVector256(ptr + 03*N);
            var d05 = LoadDquVector256(ptr + 04*N);
            var d06 = LoadDquVector256(ptr + 05*N);
            var d07 = LoadDquVector256(ptr + 06*N);
            var d08 = LoadDquVector256(ptr + 07*N);
            var d09 = LoadDquVector256(ptr + 08*N);
            var d10 = LoadDquVector256(ptr + 09*N);
            var d11 = LoadDquVector256(ptr + 10*N);
            var d12 = LoadDquVector256(ptr + 11*N);
            var d13 = LoadDquVector256(ptr + 12*N);

            BitonicSort13V(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13);

            Store(ptr + 00*N, d01);
            Store(ptr + 01*N, d02);
            Store(ptr + 02*N, d03);
            Store(ptr + 03*N, d04);
            Store(ptr + 04*N, d05);
            Store(ptr + 05*N, d06);
            Store(ptr + 06*N, d07);
            Store(ptr + 07*N, d08);
            Store(ptr + 08*N, d09);
            Store(ptr + 09*N, d10);
            Store(ptr + 10*N, d11);
            Store(ptr + 11*N, d12);
            Store(ptr + 12*N, d13);
        }
        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort14V(long* ptr)
        {
            var N = Vector256<long>.Count;

            var d01 = LoadDquVector256(ptr + 00*N);
            var d02 = LoadDquVector256(ptr + 01*N);
            var d03 = LoadDquVector256(ptr + 02*N);
            var d04 = LoadDquVector256(ptr + 03*N);
            var d05 = LoadDquVector256(ptr + 04*N);
            var d06 = LoadDquVector256(ptr + 05*N);
            var d07 = LoadDquVector256(ptr + 06*N);
            var d08 = LoadDquVector256(ptr + 07*N);
            var d09 = LoadDquVector256(ptr + 08*N);
            var d10 = LoadDquVector256(ptr + 09*N);
            var d11 = LoadDquVector256(ptr + 10*N);
            var d12 = LoadDquVector256(ptr + 11*N);
            var d13 = LoadDquVector256(ptr + 12*N);
            var d14 = LoadDquVector256(ptr + 13*N);

            BitonicSort14V(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14);

            Store(ptr + 00*N, d01);
            Store(ptr + 01*N, d02);
            Store(ptr + 02*N, d03);
            Store(ptr + 03*N, d04);
            Store(ptr + 04*N, d05);
            Store(ptr + 05*N, d06);
            Store(ptr + 06*N, d07);
            Store(ptr + 07*N, d08);
            Store(ptr + 08*N, d09);
            Store(ptr + 09*N, d10);
            Store(ptr + 10*N, d11);
            Store(ptr + 11*N, d12);
            Store(ptr + 12*N, d13);
            Store(ptr + 13*N, d14);
        }
        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort15V(long* ptr)
        {
            var N = Vector256<long>.Count;

            var d01 = LoadDquVector256(ptr + 00*N);
            var d02 = LoadDquVector256(ptr + 01*N);
            var d03 = LoadDquVector256(ptr + 02*N);
            var d04 = LoadDquVector256(ptr + 03*N);
            var d05 = LoadDquVector256(ptr + 04*N);
            var d06 = LoadDquVector256(ptr + 05*N);
            var d07 = LoadDquVector256(ptr + 06*N);
            var d08 = LoadDquVector256(ptr + 07*N);
            var d09 = LoadDquVector256(ptr + 08*N);
            var d10 = LoadDquVector256(ptr + 09*N);
            var d11 = LoadDquVector256(ptr + 10*N);
            var d12 = LoadDquVector256(ptr + 11*N);
            var d13 = LoadDquVector256(ptr + 12*N);
            var d14 = LoadDquVector256(ptr + 13*N);
            var d15 = LoadDquVector256(ptr + 14*N);

            BitonicSort15V(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15);

            Store(ptr + 00*N, d01);
            Store(ptr + 01*N, d02);
            Store(ptr + 02*N, d03);
            Store(ptr + 03*N, d04);
            Store(ptr + 04*N, d05);
            Store(ptr + 05*N, d06);
            Store(ptr + 06*N, d07);
            Store(ptr + 07*N, d08);
            Store(ptr + 08*N, d09);
            Store(ptr + 09*N, d10);
            Store(ptr + 10*N, d11);
            Store(ptr + 11*N, d12);
            Store(ptr + 12*N, d13);
            Store(ptr + 13*N, d14);
            Store(ptr + 14*N, d15);
        }
        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort16V(long* ptr)
        {
            var N = Vector256<long>.Count;

            var d01 = LoadDquVector256(ptr + 00*N);
            var d02 = LoadDquVector256(ptr + 01*N);
            var d03 = LoadDquVector256(ptr + 02*N);
            var d04 = LoadDquVector256(ptr + 03*N);
            var d05 = LoadDquVector256(ptr + 04*N);
            var d06 = LoadDquVector256(ptr + 05*N);
            var d07 = LoadDquVector256(ptr + 06*N);
            var d08 = LoadDquVector256(ptr + 07*N);
            var d09 = LoadDquVector256(ptr + 08*N);
            var d10 = LoadDquVector256(ptr + 09*N);
            var d11 = LoadDquVector256(ptr + 10*N);
            var d12 = LoadDquVector256(ptr + 11*N);
            var d13 = LoadDquVector256(ptr + 12*N);
            var d14 = LoadDquVector256(ptr + 13*N);
            var d15 = LoadDquVector256(ptr + 14*N);
            var d16 = LoadDquVector256(ptr + 15*N);

            BitonicSort16V(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16);

            Store(ptr + 00*N, d01);
            Store(ptr + 01*N, d02);
            Store(ptr + 02*N, d03);
            Store(ptr + 03*N, d04);
            Store(ptr + 04*N, d05);
            Store(ptr + 05*N, d06);
            Store(ptr + 06*N, d07);
            Store(ptr + 07*N, d08);
            Store(ptr + 08*N, d09);
            Store(ptr + 09*N, d10);
            Store(ptr + 10*N, d11);
            Store(ptr + 11*N, d12);
            Store(ptr + 12*N, d13);
            Store(ptr + 13*N, d14);
            Store(ptr + 14*N, d15);
            Store(ptr + 15*N, d16);
        }
        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort02V(ref Vector256<ulong> d01, ref Vector256<ulong> d02)
        {
            Vector256<ulong> tmp;

            var topBit = Vector256.Create(0x8000000000000000UL).AsInt64();

            BitonicSort01V(ref d01);
            BitonicSort01V(ref d02);

            tmp = Permute4x64(d02.AsDouble(), 0b00_01_10_11).AsUInt64();
            d02 = BlendVariable(tmp, d01, CompareGreaterThan(Xor(topBit, d01.AsInt64()), Xor(topBit, tmp.AsInt64())).AsUInt64());
            d01 = BlendVariable(d01, tmp, CompareGreaterThan(Xor(topBit, d01.AsInt64()), Xor(topBit, tmp.AsInt64())).AsUInt64());

            BitonicSort01VMerge(ref d01);
            BitonicSort01VMerge(ref d02);
        }
        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort02VMerge(ref Vector256<ulong> d01, ref Vector256<ulong> d02)
        {
            Vector256<ulong> tmp;

            var topBit = Vector256.Create(0x8000000000000000UL).AsInt64();
            tmp = d01;
            d01 = BlendVariable(d02, d01, CompareGreaterThan(Xor(topBit, d02.AsInt64()), Xor(topBit, d01.AsInt64())).AsUInt64());
            d02 = BlendVariable(tmp, d02, CompareGreaterThan(Xor(topBit, d02.AsInt64()), Xor(topBit, tmp.AsInt64())).AsUInt64());

            BitonicSort01VMerge(ref d01);
            BitonicSort01VMerge(ref d02);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort03V(ref Vector256<ulong> d01, ref Vector256<ulong> d02, ref Vector256<ulong> d03)
        {
            Vector256<ulong> tmp;

            var topBit = Vector256.Create(0x8000000000000000UL).AsInt64();

            BitonicSort02V(ref d01, ref d02);
            BitonicSort01V(ref d03);

            tmp = Permute4x64(d03.AsDouble(), 0b00_01_10_11).AsUInt64();
            d03 = BlendVariable(tmp, d02, CompareGreaterThan(Xor(topBit, d02.AsInt64()), Xor(topBit, tmp.AsInt64())).AsUInt64());
            d02 = BlendVariable(d02, tmp, CompareGreaterThan(Xor(topBit, d02.AsInt64()), Xor(topBit, tmp.AsInt64())).AsUInt64());

            BitonicSort02VMerge(ref d01, ref d02);
            BitonicSort01VMerge(ref d03);
        }
        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort03VMerge(ref Vector256<ulong> d01, ref Vector256<ulong> d02, ref Vector256<ulong> d03)
        {
            Vector256<ulong> tmp;

            var topBit = Vector256.Create(0x8000000000000000UL).AsInt64();
            tmp = d01;
            d01 = BlendVariable(d03, d01, CompareGreaterThan(Xor(topBit, d03.AsInt64()), Xor(topBit, d01.AsInt64())).AsUInt64());
            d03 = BlendVariable(tmp, d03, CompareGreaterThan(Xor(topBit, d03.AsInt64()), Xor(topBit, tmp.AsInt64())).AsUInt64());

            BitonicSort02VMerge(ref d01, ref d02);
            BitonicSort01VMerge(ref d03);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort04V(ref Vector256<ulong> d01, ref Vector256<ulong> d02, ref Vector256<ulong> d03, ref Vector256<ulong> d04)
        {
            Vector256<ulong> tmp;

            var topBit = Vector256.Create(0x8000000000000000UL).AsInt64();

            BitonicSort02V(ref d01, ref d02);
            BitonicSort02V(ref d03, ref d04);

            tmp = Permute4x64(d03.AsDouble(), 0b00_01_10_11).AsUInt64();
            d03 = BlendVariable(tmp, d02, CompareGreaterThan(Xor(topBit, d02.AsInt64()), Xor(topBit, tmp.AsInt64())).AsUInt64());
            d02 = BlendVariable(d02, tmp, CompareGreaterThan(Xor(topBit, d02.AsInt64()), Xor(topBit, tmp.AsInt64())).AsUInt64());

            tmp = Permute4x64(d04.AsDouble(), 0b00_01_10_11).AsUInt64();
            d04 = BlendVariable(tmp, d01, CompareGreaterThan(Xor(topBit, d01.AsInt64()), Xor(topBit, tmp.AsInt64())).AsUInt64());
            d01 = BlendVariable(d01, tmp, CompareGreaterThan(Xor(topBit, d01.AsInt64()), Xor(topBit, tmp.AsInt64())).AsUInt64());

            BitonicSort02VMerge(ref d01, ref d02);
            BitonicSort02VMerge(ref d03, ref d04);
        }
        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort04VMerge(ref Vector256<ulong> d01, ref Vector256<ulong> d02, ref Vector256<ulong> d03, ref Vector256<ulong> d04)
        {
            Vector256<ulong> tmp;

            var topBit = Vector256.Create(0x8000000000000000UL).AsInt64();
            tmp = d01;
            d01 = BlendVariable(d03, d01, CompareGreaterThan(Xor(topBit, d03.AsInt64()), Xor(topBit, d01.AsInt64())).AsUInt64());
            d03 = BlendVariable(tmp, d03, CompareGreaterThan(Xor(topBit, d03.AsInt64()), Xor(topBit, tmp.AsInt64())).AsUInt64());

            tmp = d02;
            d02 = BlendVariable(d04, d02, CompareGreaterThan(Xor(topBit, d04.AsInt64()), Xor(topBit, d02.AsInt64())).AsUInt64());
            d04 = BlendVariable(tmp, d04, CompareGreaterThan(Xor(topBit, d04.AsInt64()), Xor(topBit, tmp.AsInt64())).AsUInt64());

            BitonicSort02VMerge(ref d01, ref d02);
            BitonicSort02VMerge(ref d03, ref d04);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort05V(ref Vector256<ulong> d01, ref Vector256<ulong> d02, ref Vector256<ulong> d03, ref Vector256<ulong> d04, ref Vector256<ulong> d05)
        {
            Vector256<ulong> tmp;

            var topBit = Vector256.Create(0x8000000000000000UL).AsInt64();

            BitonicSort04V(ref d01, ref d02, ref d03, ref d04);
            BitonicSort01V(ref d05);

            tmp = Permute4x64(d05.AsDouble(), 0b00_01_10_11).AsUInt64();
            d05 = BlendVariable(tmp, d04, CompareGreaterThan(Xor(topBit, d04.AsInt64()), Xor(topBit, tmp.AsInt64())).AsUInt64());
            d04 = BlendVariable(d04, tmp, CompareGreaterThan(Xor(topBit, d04.AsInt64()), Xor(topBit, tmp.AsInt64())).AsUInt64());

            BitonicSort04VMerge(ref d01, ref d02, ref d03, ref d04);
            BitonicSort01VMerge(ref d05);
        }
        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort05VMerge(ref Vector256<ulong> d01, ref Vector256<ulong> d02, ref Vector256<ulong> d03, ref Vector256<ulong> d04, ref Vector256<ulong> d05)
        {
            Vector256<ulong> tmp;

            var topBit = Vector256.Create(0x8000000000000000UL).AsInt64();
            tmp = d01;
            d01 = BlendVariable(d05, d01, CompareGreaterThan(Xor(topBit, d05.AsInt64()), Xor(topBit, d01.AsInt64())).AsUInt64());
            d05 = BlendVariable(tmp, d05, CompareGreaterThan(Xor(topBit, d05.AsInt64()), Xor(topBit, tmp.AsInt64())).AsUInt64());

            BitonicSort04VMerge(ref d01, ref d02, ref d03, ref d04);
            BitonicSort01VMerge(ref d05);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort06V(ref Vector256<ulong> d01, ref Vector256<ulong> d02, ref Vector256<ulong> d03, ref Vector256<ulong> d04, ref Vector256<ulong> d05, ref Vector256<ulong> d06)
        {
            Vector256<ulong> tmp;

            var topBit = Vector256.Create(0x8000000000000000UL).AsInt64();

            BitonicSort04V(ref d01, ref d02, ref d03, ref d04);
            BitonicSort02V(ref d05, ref d06);

            tmp = Permute4x64(d05.AsDouble(), 0b00_01_10_11).AsUInt64();
            d05 = BlendVariable(tmp, d04, CompareGreaterThan(Xor(topBit, d04.AsInt64()), Xor(topBit, tmp.AsInt64())).AsUInt64());
            d04 = BlendVariable(d04, tmp, CompareGreaterThan(Xor(topBit, d04.AsInt64()), Xor(topBit, tmp.AsInt64())).AsUInt64());

            tmp = Permute4x64(d06.AsDouble(), 0b00_01_10_11).AsUInt64();
            d06 = BlendVariable(tmp, d03, CompareGreaterThan(Xor(topBit, d03.AsInt64()), Xor(topBit, tmp.AsInt64())).AsUInt64());
            d03 = BlendVariable(d03, tmp, CompareGreaterThan(Xor(topBit, d03.AsInt64()), Xor(topBit, tmp.AsInt64())).AsUInt64());

            BitonicSort04VMerge(ref d01, ref d02, ref d03, ref d04);
            BitonicSort02VMerge(ref d05, ref d06);
        }
        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort06VMerge(ref Vector256<ulong> d01, ref Vector256<ulong> d02, ref Vector256<ulong> d03, ref Vector256<ulong> d04, ref Vector256<ulong> d05, ref Vector256<ulong> d06)
        {
            Vector256<ulong> tmp;

            var topBit = Vector256.Create(0x8000000000000000UL).AsInt64();
            tmp = d01;
            d01 = BlendVariable(d05, d01, CompareGreaterThan(Xor(topBit, d05.AsInt64()), Xor(topBit, d01.AsInt64())).AsUInt64());
            d05 = BlendVariable(tmp, d05, CompareGreaterThan(Xor(topBit, d05.AsInt64()), Xor(topBit, tmp.AsInt64())).AsUInt64());

            tmp = d02;
            d02 = BlendVariable(d06, d02, CompareGreaterThan(Xor(topBit, d06.AsInt64()), Xor(topBit, d02.AsInt64())).AsUInt64());
            d06 = BlendVariable(tmp, d06, CompareGreaterThan(Xor(topBit, d06.AsInt64()), Xor(topBit, tmp.AsInt64())).AsUInt64());

            BitonicSort04VMerge(ref d01, ref d02, ref d03, ref d04);
            BitonicSort02VMerge(ref d05, ref d06);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort07V(ref Vector256<ulong> d01, ref Vector256<ulong> d02, ref Vector256<ulong> d03, ref Vector256<ulong> d04, ref Vector256<ulong> d05, ref Vector256<ulong> d06, ref Vector256<ulong> d07)
        {
            Vector256<ulong> tmp;

            var topBit = Vector256.Create(0x8000000000000000UL).AsInt64();

            BitonicSort04V(ref d01, ref d02, ref d03, ref d04);
            BitonicSort03V(ref d05, ref d06, ref d07);

            tmp = Permute4x64(d05.AsDouble(), 0b00_01_10_11).AsUInt64();
            d05 = BlendVariable(tmp, d04, CompareGreaterThan(Xor(topBit, d04.AsInt64()), Xor(topBit, tmp.AsInt64())).AsUInt64());
            d04 = BlendVariable(d04, tmp, CompareGreaterThan(Xor(topBit, d04.AsInt64()), Xor(topBit, tmp.AsInt64())).AsUInt64());

            tmp = Permute4x64(d06.AsDouble(), 0b00_01_10_11).AsUInt64();
            d06 = BlendVariable(tmp, d03, CompareGreaterThan(Xor(topBit, d03.AsInt64()), Xor(topBit, tmp.AsInt64())).AsUInt64());
            d03 = BlendVariable(d03, tmp, CompareGreaterThan(Xor(topBit, d03.AsInt64()), Xor(topBit, tmp.AsInt64())).AsUInt64());

            tmp = Permute4x64(d07.AsDouble(), 0b00_01_10_11).AsUInt64();
            d07 = BlendVariable(tmp, d02, CompareGreaterThan(Xor(topBit, d02.AsInt64()), Xor(topBit, tmp.AsInt64())).AsUInt64());
            d02 = BlendVariable(d02, tmp, CompareGreaterThan(Xor(topBit, d02.AsInt64()), Xor(topBit, tmp.AsInt64())).AsUInt64());

            BitonicSort04VMerge(ref d01, ref d02, ref d03, ref d04);
            BitonicSort03VMerge(ref d05, ref d06, ref d07);
        }
        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort07VMerge(ref Vector256<ulong> d01, ref Vector256<ulong> d02, ref Vector256<ulong> d03, ref Vector256<ulong> d04, ref Vector256<ulong> d05, ref Vector256<ulong> d06, ref Vector256<ulong> d07)
        {
            Vector256<ulong> tmp;

            var topBit = Vector256.Create(0x8000000000000000UL).AsInt64();
            tmp = d01;
            d01 = BlendVariable(d05, d01, CompareGreaterThan(Xor(topBit, d05.AsInt64()), Xor(topBit, d01.AsInt64())).AsUInt64());
            d05 = BlendVariable(tmp, d05, CompareGreaterThan(Xor(topBit, d05.AsInt64()), Xor(topBit, tmp.AsInt64())).AsUInt64());

            tmp = d02;
            d02 = BlendVariable(d06, d02, CompareGreaterThan(Xor(topBit, d06.AsInt64()), Xor(topBit, d02.AsInt64())).AsUInt64());
            d06 = BlendVariable(tmp, d06, CompareGreaterThan(Xor(topBit, d06.AsInt64()), Xor(topBit, tmp.AsInt64())).AsUInt64());

            tmp = d03;
            d03 = BlendVariable(d07, d03, CompareGreaterThan(Xor(topBit, d07.AsInt64()), Xor(topBit, d03.AsInt64())).AsUInt64());
            d07 = BlendVariable(tmp, d07, CompareGreaterThan(Xor(topBit, d07.AsInt64()), Xor(topBit, tmp.AsInt64())).AsUInt64());

            BitonicSort04VMerge(ref d01, ref d02, ref d03, ref d04);
            BitonicSort03VMerge(ref d05, ref d06, ref d07);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort08V(ref Vector256<ulong> d01, ref Vector256<ulong> d02, ref Vector256<ulong> d03, ref Vector256<ulong> d04, ref Vector256<ulong> d05, ref Vector256<ulong> d06, ref Vector256<ulong> d07, ref Vector256<ulong> d08)
        {
            Vector256<ulong> tmp;

            var topBit = Vector256.Create(0x8000000000000000UL).AsInt64();

            BitonicSort04V(ref d01, ref d02, ref d03, ref d04);
            BitonicSort04V(ref d05, ref d06, ref d07, ref d08);

            tmp = Permute4x64(d05.AsDouble(), 0b00_01_10_11).AsUInt64();
            d05 = BlendVariable(tmp, d04, CompareGreaterThan(Xor(topBit, d04.AsInt64()), Xor(topBit, tmp.AsInt64())).AsUInt64());
            d04 = BlendVariable(d04, tmp, CompareGreaterThan(Xor(topBit, d04.AsInt64()), Xor(topBit, tmp.AsInt64())).AsUInt64());

            tmp = Permute4x64(d06.AsDouble(), 0b00_01_10_11).AsUInt64();
            d06 = BlendVariable(tmp, d03, CompareGreaterThan(Xor(topBit, d03.AsInt64()), Xor(topBit, tmp.AsInt64())).AsUInt64());
            d03 = BlendVariable(d03, tmp, CompareGreaterThan(Xor(topBit, d03.AsInt64()), Xor(topBit, tmp.AsInt64())).AsUInt64());

            tmp = Permute4x64(d07.AsDouble(), 0b00_01_10_11).AsUInt64();
            d07 = BlendVariable(tmp, d02, CompareGreaterThan(Xor(topBit, d02.AsInt64()), Xor(topBit, tmp.AsInt64())).AsUInt64());
            d02 = BlendVariable(d02, tmp, CompareGreaterThan(Xor(topBit, d02.AsInt64()), Xor(topBit, tmp.AsInt64())).AsUInt64());

            tmp = Permute4x64(d08.AsDouble(), 0b00_01_10_11).AsUInt64();
            d08 = BlendVariable(tmp, d01, CompareGreaterThan(Xor(topBit, d01.AsInt64()), Xor(topBit, tmp.AsInt64())).AsUInt64());
            d01 = BlendVariable(d01, tmp, CompareGreaterThan(Xor(topBit, d01.AsInt64()), Xor(topBit, tmp.AsInt64())).AsUInt64());

            BitonicSort04VMerge(ref d01, ref d02, ref d03, ref d04);
            BitonicSort04VMerge(ref d05, ref d06, ref d07, ref d08);
        }
        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort08VMerge(ref Vector256<ulong> d01, ref Vector256<ulong> d02, ref Vector256<ulong> d03, ref Vector256<ulong> d04, ref Vector256<ulong> d05, ref Vector256<ulong> d06, ref Vector256<ulong> d07, ref Vector256<ulong> d08)
        {
            Vector256<ulong> tmp;

            var topBit = Vector256.Create(0x8000000000000000UL).AsInt64();
            tmp = d01;
            d01 = BlendVariable(d05, d01, CompareGreaterThan(Xor(topBit, d05.AsInt64()), Xor(topBit, d01.AsInt64())).AsUInt64());
            d05 = BlendVariable(tmp, d05, CompareGreaterThan(Xor(topBit, d05.AsInt64()), Xor(topBit, tmp.AsInt64())).AsUInt64());

            tmp = d02;
            d02 = BlendVariable(d06, d02, CompareGreaterThan(Xor(topBit, d06.AsInt64()), Xor(topBit, d02.AsInt64())).AsUInt64());
            d06 = BlendVariable(tmp, d06, CompareGreaterThan(Xor(topBit, d06.AsInt64()), Xor(topBit, tmp.AsInt64())).AsUInt64());

            tmp = d03;
            d03 = BlendVariable(d07, d03, CompareGreaterThan(Xor(topBit, d07.AsInt64()), Xor(topBit, d03.AsInt64())).AsUInt64());
            d07 = BlendVariable(tmp, d07, CompareGreaterThan(Xor(topBit, d07.AsInt64()), Xor(topBit, tmp.AsInt64())).AsUInt64());

            tmp = d04;
            d04 = BlendVariable(d08, d04, CompareGreaterThan(Xor(topBit, d08.AsInt64()), Xor(topBit, d04.AsInt64())).AsUInt64());
            d08 = BlendVariable(tmp, d08, CompareGreaterThan(Xor(topBit, d08.AsInt64()), Xor(topBit, tmp.AsInt64())).AsUInt64());

            BitonicSort04VMerge(ref d01, ref d02, ref d03, ref d04);
            BitonicSort04VMerge(ref d05, ref d06, ref d07, ref d08);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort09V(ref Vector256<ulong> d01, ref Vector256<ulong> d02, ref Vector256<ulong> d03, ref Vector256<ulong> d04, ref Vector256<ulong> d05, ref Vector256<ulong> d06, ref Vector256<ulong> d07, ref Vector256<ulong> d08, ref Vector256<ulong> d09)
        {
            Vector256<ulong> tmp;

            var topBit = Vector256.Create(0x8000000000000000UL).AsInt64();

            BitonicSort08V(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
            BitonicSort01V(ref d09);

            tmp = Permute4x64(d09.AsDouble(), 0b00_01_10_11).AsUInt64();
            d09 = BlendVariable(tmp, d08, CompareGreaterThan(Xor(topBit, d08.AsInt64()), Xor(topBit, tmp.AsInt64())).AsUInt64());
            d08 = BlendVariable(d08, tmp, CompareGreaterThan(Xor(topBit, d08.AsInt64()), Xor(topBit, tmp.AsInt64())).AsUInt64());

            BitonicSort08VMerge(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
            BitonicSort01VMerge(ref d09);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort10V(ref Vector256<ulong> d01, ref Vector256<ulong> d02, ref Vector256<ulong> d03, ref Vector256<ulong> d04, ref Vector256<ulong> d05, ref Vector256<ulong> d06, ref Vector256<ulong> d07, ref Vector256<ulong> d08, ref Vector256<ulong> d09, ref Vector256<ulong> d10)
        {
            Vector256<ulong> tmp;

            var topBit = Vector256.Create(0x8000000000000000UL).AsInt64();

            BitonicSort08V(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
            BitonicSort02V(ref d09, ref d10);

            tmp = Permute4x64(d09.AsDouble(), 0b00_01_10_11).AsUInt64();
            d09 = BlendVariable(tmp, d08, CompareGreaterThan(Xor(topBit, d08.AsInt64()), Xor(topBit, tmp.AsInt64())).AsUInt64());
            d08 = BlendVariable(d08, tmp, CompareGreaterThan(Xor(topBit, d08.AsInt64()), Xor(topBit, tmp.AsInt64())).AsUInt64());

            tmp = Permute4x64(d10.AsDouble(), 0b00_01_10_11).AsUInt64();
            d10 = BlendVariable(tmp, d07, CompareGreaterThan(Xor(topBit, d07.AsInt64()), Xor(topBit, tmp.AsInt64())).AsUInt64());
            d07 = BlendVariable(d07, tmp, CompareGreaterThan(Xor(topBit, d07.AsInt64()), Xor(topBit, tmp.AsInt64())).AsUInt64());

            BitonicSort08VMerge(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
            BitonicSort02VMerge(ref d09, ref d10);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort11V(ref Vector256<ulong> d01, ref Vector256<ulong> d02, ref Vector256<ulong> d03, ref Vector256<ulong> d04, ref Vector256<ulong> d05, ref Vector256<ulong> d06, ref Vector256<ulong> d07, ref Vector256<ulong> d08, ref Vector256<ulong> d09, ref Vector256<ulong> d10, ref Vector256<ulong> d11)
        {
            Vector256<ulong> tmp;

            var topBit = Vector256.Create(0x8000000000000000UL).AsInt64();

            BitonicSort08V(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
            BitonicSort03V(ref d09, ref d10, ref d11);

            tmp = Permute4x64(d09.AsDouble(), 0b00_01_10_11).AsUInt64();
            d09 = BlendVariable(tmp, d08, CompareGreaterThan(Xor(topBit, d08.AsInt64()), Xor(topBit, tmp.AsInt64())).AsUInt64());
            d08 = BlendVariable(d08, tmp, CompareGreaterThan(Xor(topBit, d08.AsInt64()), Xor(topBit, tmp.AsInt64())).AsUInt64());

            tmp = Permute4x64(d10.AsDouble(), 0b00_01_10_11).AsUInt64();
            d10 = BlendVariable(tmp, d07, CompareGreaterThan(Xor(topBit, d07.AsInt64()), Xor(topBit, tmp.AsInt64())).AsUInt64());
            d07 = BlendVariable(d07, tmp, CompareGreaterThan(Xor(topBit, d07.AsInt64()), Xor(topBit, tmp.AsInt64())).AsUInt64());

            tmp = Permute4x64(d11.AsDouble(), 0b00_01_10_11).AsUInt64();
            d11 = BlendVariable(tmp, d06, CompareGreaterThan(Xor(topBit, d06.AsInt64()), Xor(topBit, tmp.AsInt64())).AsUInt64());
            d06 = BlendVariable(d06, tmp, CompareGreaterThan(Xor(topBit, d06.AsInt64()), Xor(topBit, tmp.AsInt64())).AsUInt64());

            BitonicSort08VMerge(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
            BitonicSort03VMerge(ref d09, ref d10, ref d11);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort12V(ref Vector256<ulong> d01, ref Vector256<ulong> d02, ref Vector256<ulong> d03, ref Vector256<ulong> d04, ref Vector256<ulong> d05, ref Vector256<ulong> d06, ref Vector256<ulong> d07, ref Vector256<ulong> d08, ref Vector256<ulong> d09, ref Vector256<ulong> d10, ref Vector256<ulong> d11, ref Vector256<ulong> d12)
        {
            Vector256<ulong> tmp;

            var topBit = Vector256.Create(0x8000000000000000UL).AsInt64();

            BitonicSort08V(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
            BitonicSort04V(ref d09, ref d10, ref d11, ref d12);

            tmp = Permute4x64(d09.AsDouble(), 0b00_01_10_11).AsUInt64();
            d09 = BlendVariable(tmp, d08, CompareGreaterThan(Xor(topBit, d08.AsInt64()), Xor(topBit, tmp.AsInt64())).AsUInt64());
            d08 = BlendVariable(d08, tmp, CompareGreaterThan(Xor(topBit, d08.AsInt64()), Xor(topBit, tmp.AsInt64())).AsUInt64());

            tmp = Permute4x64(d10.AsDouble(), 0b00_01_10_11).AsUInt64();
            d10 = BlendVariable(tmp, d07, CompareGreaterThan(Xor(topBit, d07.AsInt64()), Xor(topBit, tmp.AsInt64())).AsUInt64());
            d07 = BlendVariable(d07, tmp, CompareGreaterThan(Xor(topBit, d07.AsInt64()), Xor(topBit, tmp.AsInt64())).AsUInt64());

            tmp = Permute4x64(d11.AsDouble(), 0b00_01_10_11).AsUInt64();
            d11 = BlendVariable(tmp, d06, CompareGreaterThan(Xor(topBit, d06.AsInt64()), Xor(topBit, tmp.AsInt64())).AsUInt64());
            d06 = BlendVariable(d06, tmp, CompareGreaterThan(Xor(topBit, d06.AsInt64()), Xor(topBit, tmp.AsInt64())).AsUInt64());

            tmp = Permute4x64(d12.AsDouble(), 0b00_01_10_11).AsUInt64();
            d12 = BlendVariable(tmp, d05, CompareGreaterThan(Xor(topBit, d05.AsInt64()), Xor(topBit, tmp.AsInt64())).AsUInt64());
            d05 = BlendVariable(d05, tmp, CompareGreaterThan(Xor(topBit, d05.AsInt64()), Xor(topBit, tmp.AsInt64())).AsUInt64());

            BitonicSort08VMerge(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
            BitonicSort04VMerge(ref d09, ref d10, ref d11, ref d12);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort13V(ref Vector256<ulong> d01, ref Vector256<ulong> d02, ref Vector256<ulong> d03, ref Vector256<ulong> d04, ref Vector256<ulong> d05, ref Vector256<ulong> d06, ref Vector256<ulong> d07, ref Vector256<ulong> d08, ref Vector256<ulong> d09, ref Vector256<ulong> d10, ref Vector256<ulong> d11, ref Vector256<ulong> d12, ref Vector256<ulong> d13)
        {
            Vector256<ulong> tmp;

            var topBit = Vector256.Create(0x8000000000000000UL).AsInt64();

            BitonicSort08V(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
            BitonicSort05V(ref d09, ref d10, ref d11, ref d12, ref d13);

            tmp = Permute4x64(d09.AsDouble(), 0b00_01_10_11).AsUInt64();
            d09 = BlendVariable(tmp, d08, CompareGreaterThan(Xor(topBit, d08.AsInt64()), Xor(topBit, tmp.AsInt64())).AsUInt64());
            d08 = BlendVariable(d08, tmp, CompareGreaterThan(Xor(topBit, d08.AsInt64()), Xor(topBit, tmp.AsInt64())).AsUInt64());

            tmp = Permute4x64(d10.AsDouble(), 0b00_01_10_11).AsUInt64();
            d10 = BlendVariable(tmp, d07, CompareGreaterThan(Xor(topBit, d07.AsInt64()), Xor(topBit, tmp.AsInt64())).AsUInt64());
            d07 = BlendVariable(d07, tmp, CompareGreaterThan(Xor(topBit, d07.AsInt64()), Xor(topBit, tmp.AsInt64())).AsUInt64());

            tmp = Permute4x64(d11.AsDouble(), 0b00_01_10_11).AsUInt64();
            d11 = BlendVariable(tmp, d06, CompareGreaterThan(Xor(topBit, d06.AsInt64()), Xor(topBit, tmp.AsInt64())).AsUInt64());
            d06 = BlendVariable(d06, tmp, CompareGreaterThan(Xor(topBit, d06.AsInt64()), Xor(topBit, tmp.AsInt64())).AsUInt64());

            tmp = Permute4x64(d12.AsDouble(), 0b00_01_10_11).AsUInt64();
            d12 = BlendVariable(tmp, d05, CompareGreaterThan(Xor(topBit, d05.AsInt64()), Xor(topBit, tmp.AsInt64())).AsUInt64());
            d05 = BlendVariable(d05, tmp, CompareGreaterThan(Xor(topBit, d05.AsInt64()), Xor(topBit, tmp.AsInt64())).AsUInt64());

            tmp = Permute4x64(d13.AsDouble(), 0b00_01_10_11).AsUInt64();
            d13 = BlendVariable(tmp, d04, CompareGreaterThan(Xor(topBit, d04.AsInt64()), Xor(topBit, tmp.AsInt64())).AsUInt64());
            d04 = BlendVariable(d04, tmp, CompareGreaterThan(Xor(topBit, d04.AsInt64()), Xor(topBit, tmp.AsInt64())).AsUInt64());

            BitonicSort08VMerge(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
            BitonicSort05VMerge(ref d09, ref d10, ref d11, ref d12, ref d13);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort14V(ref Vector256<ulong> d01, ref Vector256<ulong> d02, ref Vector256<ulong> d03, ref Vector256<ulong> d04, ref Vector256<ulong> d05, ref Vector256<ulong> d06, ref Vector256<ulong> d07, ref Vector256<ulong> d08, ref Vector256<ulong> d09, ref Vector256<ulong> d10, ref Vector256<ulong> d11, ref Vector256<ulong> d12, ref Vector256<ulong> d13, ref Vector256<ulong> d14)
        {
            Vector256<ulong> tmp;

            var topBit = Vector256.Create(0x8000000000000000UL).AsInt64();

            BitonicSort08V(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
            BitonicSort06V(ref d09, ref d10, ref d11, ref d12, ref d13, ref d14);

            tmp = Permute4x64(d09.AsDouble(), 0b00_01_10_11).AsUInt64();
            d09 = BlendVariable(tmp, d08, CompareGreaterThan(Xor(topBit, d08.AsInt64()), Xor(topBit, tmp.AsInt64())).AsUInt64());
            d08 = BlendVariable(d08, tmp, CompareGreaterThan(Xor(topBit, d08.AsInt64()), Xor(topBit, tmp.AsInt64())).AsUInt64());

            tmp = Permute4x64(d10.AsDouble(), 0b00_01_10_11).AsUInt64();
            d10 = BlendVariable(tmp, d07, CompareGreaterThan(Xor(topBit, d07.AsInt64()), Xor(topBit, tmp.AsInt64())).AsUInt64());
            d07 = BlendVariable(d07, tmp, CompareGreaterThan(Xor(topBit, d07.AsInt64()), Xor(topBit, tmp.AsInt64())).AsUInt64());

            tmp = Permute4x64(d11.AsDouble(), 0b00_01_10_11).AsUInt64();
            d11 = BlendVariable(tmp, d06, CompareGreaterThan(Xor(topBit, d06.AsInt64()), Xor(topBit, tmp.AsInt64())).AsUInt64());
            d06 = BlendVariable(d06, tmp, CompareGreaterThan(Xor(topBit, d06.AsInt64()), Xor(topBit, tmp.AsInt64())).AsUInt64());

            tmp = Permute4x64(d12.AsDouble(), 0b00_01_10_11).AsUInt64();
            d12 = BlendVariable(tmp, d05, CompareGreaterThan(Xor(topBit, d05.AsInt64()), Xor(topBit, tmp.AsInt64())).AsUInt64());
            d05 = BlendVariable(d05, tmp, CompareGreaterThan(Xor(topBit, d05.AsInt64()), Xor(topBit, tmp.AsInt64())).AsUInt64());

            tmp = Permute4x64(d13.AsDouble(), 0b00_01_10_11).AsUInt64();
            d13 = BlendVariable(tmp, d04, CompareGreaterThan(Xor(topBit, d04.AsInt64()), Xor(topBit, tmp.AsInt64())).AsUInt64());
            d04 = BlendVariable(d04, tmp, CompareGreaterThan(Xor(topBit, d04.AsInt64()), Xor(topBit, tmp.AsInt64())).AsUInt64());

            tmp = Permute4x64(d14.AsDouble(), 0b00_01_10_11).AsUInt64();
            d14 = BlendVariable(tmp, d03, CompareGreaterThan(Xor(topBit, d03.AsInt64()), Xor(topBit, tmp.AsInt64())).AsUInt64());
            d03 = BlendVariable(d03, tmp, CompareGreaterThan(Xor(topBit, d03.AsInt64()), Xor(topBit, tmp.AsInt64())).AsUInt64());

            BitonicSort08VMerge(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
            BitonicSort06VMerge(ref d09, ref d10, ref d11, ref d12, ref d13, ref d14);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort15V(ref Vector256<ulong> d01, ref Vector256<ulong> d02, ref Vector256<ulong> d03, ref Vector256<ulong> d04, ref Vector256<ulong> d05, ref Vector256<ulong> d06, ref Vector256<ulong> d07, ref Vector256<ulong> d08, ref Vector256<ulong> d09, ref Vector256<ulong> d10, ref Vector256<ulong> d11, ref Vector256<ulong> d12, ref Vector256<ulong> d13, ref Vector256<ulong> d14, ref Vector256<ulong> d15)
        {
            Vector256<ulong> tmp;

            var topBit = Vector256.Create(0x8000000000000000UL).AsInt64();

            BitonicSort08V(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
            BitonicSort07V(ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15);

            tmp = Permute4x64(d09.AsDouble(), 0b00_01_10_11).AsUInt64();
            d09 = BlendVariable(tmp, d08, CompareGreaterThan(Xor(topBit, d08.AsInt64()), Xor(topBit, tmp.AsInt64())).AsUInt64());
            d08 = BlendVariable(d08, tmp, CompareGreaterThan(Xor(topBit, d08.AsInt64()), Xor(topBit, tmp.AsInt64())).AsUInt64());

            tmp = Permute4x64(d10.AsDouble(), 0b00_01_10_11).AsUInt64();
            d10 = BlendVariable(tmp, d07, CompareGreaterThan(Xor(topBit, d07.AsInt64()), Xor(topBit, tmp.AsInt64())).AsUInt64());
            d07 = BlendVariable(d07, tmp, CompareGreaterThan(Xor(topBit, d07.AsInt64()), Xor(topBit, tmp.AsInt64())).AsUInt64());

            tmp = Permute4x64(d11.AsDouble(), 0b00_01_10_11).AsUInt64();
            d11 = BlendVariable(tmp, d06, CompareGreaterThan(Xor(topBit, d06.AsInt64()), Xor(topBit, tmp.AsInt64())).AsUInt64());
            d06 = BlendVariable(d06, tmp, CompareGreaterThan(Xor(topBit, d06.AsInt64()), Xor(topBit, tmp.AsInt64())).AsUInt64());

            tmp = Permute4x64(d12.AsDouble(), 0b00_01_10_11).AsUInt64();
            d12 = BlendVariable(tmp, d05, CompareGreaterThan(Xor(topBit, d05.AsInt64()), Xor(topBit, tmp.AsInt64())).AsUInt64());
            d05 = BlendVariable(d05, tmp, CompareGreaterThan(Xor(topBit, d05.AsInt64()), Xor(topBit, tmp.AsInt64())).AsUInt64());

            tmp = Permute4x64(d13.AsDouble(), 0b00_01_10_11).AsUInt64();
            d13 = BlendVariable(tmp, d04, CompareGreaterThan(Xor(topBit, d04.AsInt64()), Xor(topBit, tmp.AsInt64())).AsUInt64());
            d04 = BlendVariable(d04, tmp, CompareGreaterThan(Xor(topBit, d04.AsInt64()), Xor(topBit, tmp.AsInt64())).AsUInt64());

            tmp = Permute4x64(d14.AsDouble(), 0b00_01_10_11).AsUInt64();
            d14 = BlendVariable(tmp, d03, CompareGreaterThan(Xor(topBit, d03.AsInt64()), Xor(topBit, tmp.AsInt64())).AsUInt64());
            d03 = BlendVariable(d03, tmp, CompareGreaterThan(Xor(topBit, d03.AsInt64()), Xor(topBit, tmp.AsInt64())).AsUInt64());

            tmp = Permute4x64(d15.AsDouble(), 0b00_01_10_11).AsUInt64();
            d15 = BlendVariable(tmp, d02, CompareGreaterThan(Xor(topBit, d02.AsInt64()), Xor(topBit, tmp.AsInt64())).AsUInt64());
            d02 = BlendVariable(d02, tmp, CompareGreaterThan(Xor(topBit, d02.AsInt64()), Xor(topBit, tmp.AsInt64())).AsUInt64());

            BitonicSort08VMerge(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
            BitonicSort07VMerge(ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort16V(ref Vector256<ulong> d01, ref Vector256<ulong> d02, ref Vector256<ulong> d03, ref Vector256<ulong> d04, ref Vector256<ulong> d05, ref Vector256<ulong> d06, ref Vector256<ulong> d07, ref Vector256<ulong> d08, ref Vector256<ulong> d09, ref Vector256<ulong> d10, ref Vector256<ulong> d11, ref Vector256<ulong> d12, ref Vector256<ulong> d13, ref Vector256<ulong> d14, ref Vector256<ulong> d15, ref Vector256<ulong> d16)
        {
            Vector256<ulong> tmp;

            var topBit = Vector256.Create(0x8000000000000000UL).AsInt64();

            BitonicSort08V(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
            BitonicSort08V(ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16);

            tmp = Permute4x64(d09.AsDouble(), 0b00_01_10_11).AsUInt64();
            d09 = BlendVariable(tmp, d08, CompareGreaterThan(Xor(topBit, d08.AsInt64()), Xor(topBit, tmp.AsInt64())).AsUInt64());
            d08 = BlendVariable(d08, tmp, CompareGreaterThan(Xor(topBit, d08.AsInt64()), Xor(topBit, tmp.AsInt64())).AsUInt64());

            tmp = Permute4x64(d10.AsDouble(), 0b00_01_10_11).AsUInt64();
            d10 = BlendVariable(tmp, d07, CompareGreaterThan(Xor(topBit, d07.AsInt64()), Xor(topBit, tmp.AsInt64())).AsUInt64());
            d07 = BlendVariable(d07, tmp, CompareGreaterThan(Xor(topBit, d07.AsInt64()), Xor(topBit, tmp.AsInt64())).AsUInt64());

            tmp = Permute4x64(d11.AsDouble(), 0b00_01_10_11).AsUInt64();
            d11 = BlendVariable(tmp, d06, CompareGreaterThan(Xor(topBit, d06.AsInt64()), Xor(topBit, tmp.AsInt64())).AsUInt64());
            d06 = BlendVariable(d06, tmp, CompareGreaterThan(Xor(topBit, d06.AsInt64()), Xor(topBit, tmp.AsInt64())).AsUInt64());

            tmp = Permute4x64(d12.AsDouble(), 0b00_01_10_11).AsUInt64();
            d12 = BlendVariable(tmp, d05, CompareGreaterThan(Xor(topBit, d05.AsInt64()), Xor(topBit, tmp.AsInt64())).AsUInt64());
            d05 = BlendVariable(d05, tmp, CompareGreaterThan(Xor(topBit, d05.AsInt64()), Xor(topBit, tmp.AsInt64())).AsUInt64());

            tmp = Permute4x64(d13.AsDouble(), 0b00_01_10_11).AsUInt64();
            d13 = BlendVariable(tmp, d04, CompareGreaterThan(Xor(topBit, d04.AsInt64()), Xor(topBit, tmp.AsInt64())).AsUInt64());
            d04 = BlendVariable(d04, tmp, CompareGreaterThan(Xor(topBit, d04.AsInt64()), Xor(topBit, tmp.AsInt64())).AsUInt64());

            tmp = Permute4x64(d14.AsDouble(), 0b00_01_10_11).AsUInt64();
            d14 = BlendVariable(tmp, d03, CompareGreaterThan(Xor(topBit, d03.AsInt64()), Xor(topBit, tmp.AsInt64())).AsUInt64());
            d03 = BlendVariable(d03, tmp, CompareGreaterThan(Xor(topBit, d03.AsInt64()), Xor(topBit, tmp.AsInt64())).AsUInt64());

            tmp = Permute4x64(d15.AsDouble(), 0b00_01_10_11).AsUInt64();
            d15 = BlendVariable(tmp, d02, CompareGreaterThan(Xor(topBit, d02.AsInt64()), Xor(topBit, tmp.AsInt64())).AsUInt64());
            d02 = BlendVariable(d02, tmp, CompareGreaterThan(Xor(topBit, d02.AsInt64()), Xor(topBit, tmp.AsInt64())).AsUInt64());

            tmp = Permute4x64(d16.AsDouble(), 0b00_01_10_11).AsUInt64();
            d16 = BlendVariable(tmp, d01, CompareGreaterThan(Xor(topBit, d01.AsInt64()), Xor(topBit, tmp.AsInt64())).AsUInt64());
            d01 = BlendVariable(d01, tmp, CompareGreaterThan(Xor(topBit, d01.AsInt64()), Xor(topBit, tmp.AsInt64())).AsUInt64());

            BitonicSort08VMerge(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
            BitonicSort08VMerge(ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16);
        }


        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort01V(ulong* ptr)
        {
            var N = Vector256<ulong>.Count;

            var d01 = LoadDquVector256(ptr + 00*N);

            BitonicSort01V(ref d01);

            Store(ptr + 00*N, d01);
        }
        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort02V(ulong* ptr)
        {
            var N = Vector256<ulong>.Count;

            var d01 = LoadDquVector256(ptr + 00*N);
            var d02 = LoadDquVector256(ptr + 01*N);

            BitonicSort02V(ref d01, ref d02);

            Store(ptr + 00*N, d01);
            Store(ptr + 01*N, d02);
        }
        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort03V(ulong* ptr)
        {
            var N = Vector256<ulong>.Count;

            var d01 = LoadDquVector256(ptr + 00*N);
            var d02 = LoadDquVector256(ptr + 01*N);
            var d03 = LoadDquVector256(ptr + 02*N);

            BitonicSort03V(ref d01, ref d02, ref d03);

            Store(ptr + 00*N, d01);
            Store(ptr + 01*N, d02);
            Store(ptr + 02*N, d03);
        }
        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort04V(ulong* ptr)
        {
            var N = Vector256<ulong>.Count;

            var d01 = LoadDquVector256(ptr + 00*N);
            var d02 = LoadDquVector256(ptr + 01*N);
            var d03 = LoadDquVector256(ptr + 02*N);
            var d04 = LoadDquVector256(ptr + 03*N);

            BitonicSort04V(ref d01, ref d02, ref d03, ref d04);

            Store(ptr + 00*N, d01);
            Store(ptr + 01*N, d02);
            Store(ptr + 02*N, d03);
            Store(ptr + 03*N, d04);
        }
        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort05V(ulong* ptr)
        {
            var N = Vector256<ulong>.Count;

            var d01 = LoadDquVector256(ptr + 00*N);
            var d02 = LoadDquVector256(ptr + 01*N);
            var d03 = LoadDquVector256(ptr + 02*N);
            var d04 = LoadDquVector256(ptr + 03*N);
            var d05 = LoadDquVector256(ptr + 04*N);

            BitonicSort05V(ref d01, ref d02, ref d03, ref d04, ref d05);

            Store(ptr + 00*N, d01);
            Store(ptr + 01*N, d02);
            Store(ptr + 02*N, d03);
            Store(ptr + 03*N, d04);
            Store(ptr + 04*N, d05);
        }
        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort06V(ulong* ptr)
        {
            var N = Vector256<ulong>.Count;

            var d01 = LoadDquVector256(ptr + 00*N);
            var d02 = LoadDquVector256(ptr + 01*N);
            var d03 = LoadDquVector256(ptr + 02*N);
            var d04 = LoadDquVector256(ptr + 03*N);
            var d05 = LoadDquVector256(ptr + 04*N);
            var d06 = LoadDquVector256(ptr + 05*N);

            BitonicSort06V(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06);

            Store(ptr + 00*N, d01);
            Store(ptr + 01*N, d02);
            Store(ptr + 02*N, d03);
            Store(ptr + 03*N, d04);
            Store(ptr + 04*N, d05);
            Store(ptr + 05*N, d06);
        }
        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort07V(ulong* ptr)
        {
            var N = Vector256<ulong>.Count;

            var d01 = LoadDquVector256(ptr + 00*N);
            var d02 = LoadDquVector256(ptr + 01*N);
            var d03 = LoadDquVector256(ptr + 02*N);
            var d04 = LoadDquVector256(ptr + 03*N);
            var d05 = LoadDquVector256(ptr + 04*N);
            var d06 = LoadDquVector256(ptr + 05*N);
            var d07 = LoadDquVector256(ptr + 06*N);

            BitonicSort07V(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07);

            Store(ptr + 00*N, d01);
            Store(ptr + 01*N, d02);
            Store(ptr + 02*N, d03);
            Store(ptr + 03*N, d04);
            Store(ptr + 04*N, d05);
            Store(ptr + 05*N, d06);
            Store(ptr + 06*N, d07);
        }
        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort08V(ulong* ptr)
        {
            var N = Vector256<ulong>.Count;

            var d01 = LoadDquVector256(ptr + 00*N);
            var d02 = LoadDquVector256(ptr + 01*N);
            var d03 = LoadDquVector256(ptr + 02*N);
            var d04 = LoadDquVector256(ptr + 03*N);
            var d05 = LoadDquVector256(ptr + 04*N);
            var d06 = LoadDquVector256(ptr + 05*N);
            var d07 = LoadDquVector256(ptr + 06*N);
            var d08 = LoadDquVector256(ptr + 07*N);

            BitonicSort08V(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);

            Store(ptr + 00*N, d01);
            Store(ptr + 01*N, d02);
            Store(ptr + 02*N, d03);
            Store(ptr + 03*N, d04);
            Store(ptr + 04*N, d05);
            Store(ptr + 05*N, d06);
            Store(ptr + 06*N, d07);
            Store(ptr + 07*N, d08);
        }
        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort09V(ulong* ptr)
        {
            var N = Vector256<ulong>.Count;

            var d01 = LoadDquVector256(ptr + 00*N);
            var d02 = LoadDquVector256(ptr + 01*N);
            var d03 = LoadDquVector256(ptr + 02*N);
            var d04 = LoadDquVector256(ptr + 03*N);
            var d05 = LoadDquVector256(ptr + 04*N);
            var d06 = LoadDquVector256(ptr + 05*N);
            var d07 = LoadDquVector256(ptr + 06*N);
            var d08 = LoadDquVector256(ptr + 07*N);
            var d09 = LoadDquVector256(ptr + 08*N);

            BitonicSort09V(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09);

            Store(ptr + 00*N, d01);
            Store(ptr + 01*N, d02);
            Store(ptr + 02*N, d03);
            Store(ptr + 03*N, d04);
            Store(ptr + 04*N, d05);
            Store(ptr + 05*N, d06);
            Store(ptr + 06*N, d07);
            Store(ptr + 07*N, d08);
            Store(ptr + 08*N, d09);
        }
        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort10V(ulong* ptr)
        {
            var N = Vector256<ulong>.Count;

            var d01 = LoadDquVector256(ptr + 00*N);
            var d02 = LoadDquVector256(ptr + 01*N);
            var d03 = LoadDquVector256(ptr + 02*N);
            var d04 = LoadDquVector256(ptr + 03*N);
            var d05 = LoadDquVector256(ptr + 04*N);
            var d06 = LoadDquVector256(ptr + 05*N);
            var d07 = LoadDquVector256(ptr + 06*N);
            var d08 = LoadDquVector256(ptr + 07*N);
            var d09 = LoadDquVector256(ptr + 08*N);
            var d10 = LoadDquVector256(ptr + 09*N);

            BitonicSort10V(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10);

            Store(ptr + 00*N, d01);
            Store(ptr + 01*N, d02);
            Store(ptr + 02*N, d03);
            Store(ptr + 03*N, d04);
            Store(ptr + 04*N, d05);
            Store(ptr + 05*N, d06);
            Store(ptr + 06*N, d07);
            Store(ptr + 07*N, d08);
            Store(ptr + 08*N, d09);
            Store(ptr + 09*N, d10);
        }
        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort11V(ulong* ptr)
        {
            var N = Vector256<ulong>.Count;

            var d01 = LoadDquVector256(ptr + 00*N);
            var d02 = LoadDquVector256(ptr + 01*N);
            var d03 = LoadDquVector256(ptr + 02*N);
            var d04 = LoadDquVector256(ptr + 03*N);
            var d05 = LoadDquVector256(ptr + 04*N);
            var d06 = LoadDquVector256(ptr + 05*N);
            var d07 = LoadDquVector256(ptr + 06*N);
            var d08 = LoadDquVector256(ptr + 07*N);
            var d09 = LoadDquVector256(ptr + 08*N);
            var d10 = LoadDquVector256(ptr + 09*N);
            var d11 = LoadDquVector256(ptr + 10*N);

            BitonicSort11V(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11);

            Store(ptr + 00*N, d01);
            Store(ptr + 01*N, d02);
            Store(ptr + 02*N, d03);
            Store(ptr + 03*N, d04);
            Store(ptr + 04*N, d05);
            Store(ptr + 05*N, d06);
            Store(ptr + 06*N, d07);
            Store(ptr + 07*N, d08);
            Store(ptr + 08*N, d09);
            Store(ptr + 09*N, d10);
            Store(ptr + 10*N, d11);
        }
        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort12V(ulong* ptr)
        {
            var N = Vector256<ulong>.Count;

            var d01 = LoadDquVector256(ptr + 00*N);
            var d02 = LoadDquVector256(ptr + 01*N);
            var d03 = LoadDquVector256(ptr + 02*N);
            var d04 = LoadDquVector256(ptr + 03*N);
            var d05 = LoadDquVector256(ptr + 04*N);
            var d06 = LoadDquVector256(ptr + 05*N);
            var d07 = LoadDquVector256(ptr + 06*N);
            var d08 = LoadDquVector256(ptr + 07*N);
            var d09 = LoadDquVector256(ptr + 08*N);
            var d10 = LoadDquVector256(ptr + 09*N);
            var d11 = LoadDquVector256(ptr + 10*N);
            var d12 = LoadDquVector256(ptr + 11*N);

            BitonicSort12V(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12);

            Store(ptr + 00*N, d01);
            Store(ptr + 01*N, d02);
            Store(ptr + 02*N, d03);
            Store(ptr + 03*N, d04);
            Store(ptr + 04*N, d05);
            Store(ptr + 05*N, d06);
            Store(ptr + 06*N, d07);
            Store(ptr + 07*N, d08);
            Store(ptr + 08*N, d09);
            Store(ptr + 09*N, d10);
            Store(ptr + 10*N, d11);
            Store(ptr + 11*N, d12);
        }
        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort13V(ulong* ptr)
        {
            var N = Vector256<ulong>.Count;

            var d01 = LoadDquVector256(ptr + 00*N);
            var d02 = LoadDquVector256(ptr + 01*N);
            var d03 = LoadDquVector256(ptr + 02*N);
            var d04 = LoadDquVector256(ptr + 03*N);
            var d05 = LoadDquVector256(ptr + 04*N);
            var d06 = LoadDquVector256(ptr + 05*N);
            var d07 = LoadDquVector256(ptr + 06*N);
            var d08 = LoadDquVector256(ptr + 07*N);
            var d09 = LoadDquVector256(ptr + 08*N);
            var d10 = LoadDquVector256(ptr + 09*N);
            var d11 = LoadDquVector256(ptr + 10*N);
            var d12 = LoadDquVector256(ptr + 11*N);
            var d13 = LoadDquVector256(ptr + 12*N);

            BitonicSort13V(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13);

            Store(ptr + 00*N, d01);
            Store(ptr + 01*N, d02);
            Store(ptr + 02*N, d03);
            Store(ptr + 03*N, d04);
            Store(ptr + 04*N, d05);
            Store(ptr + 05*N, d06);
            Store(ptr + 06*N, d07);
            Store(ptr + 07*N, d08);
            Store(ptr + 08*N, d09);
            Store(ptr + 09*N, d10);
            Store(ptr + 10*N, d11);
            Store(ptr + 11*N, d12);
            Store(ptr + 12*N, d13);
        }
        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort14V(ulong* ptr)
        {
            var N = Vector256<ulong>.Count;

            var d01 = LoadDquVector256(ptr + 00*N);
            var d02 = LoadDquVector256(ptr + 01*N);
            var d03 = LoadDquVector256(ptr + 02*N);
            var d04 = LoadDquVector256(ptr + 03*N);
            var d05 = LoadDquVector256(ptr + 04*N);
            var d06 = LoadDquVector256(ptr + 05*N);
            var d07 = LoadDquVector256(ptr + 06*N);
            var d08 = LoadDquVector256(ptr + 07*N);
            var d09 = LoadDquVector256(ptr + 08*N);
            var d10 = LoadDquVector256(ptr + 09*N);
            var d11 = LoadDquVector256(ptr + 10*N);
            var d12 = LoadDquVector256(ptr + 11*N);
            var d13 = LoadDquVector256(ptr + 12*N);
            var d14 = LoadDquVector256(ptr + 13*N);

            BitonicSort14V(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14);

            Store(ptr + 00*N, d01);
            Store(ptr + 01*N, d02);
            Store(ptr + 02*N, d03);
            Store(ptr + 03*N, d04);
            Store(ptr + 04*N, d05);
            Store(ptr + 05*N, d06);
            Store(ptr + 06*N, d07);
            Store(ptr + 07*N, d08);
            Store(ptr + 08*N, d09);
            Store(ptr + 09*N, d10);
            Store(ptr + 10*N, d11);
            Store(ptr + 11*N, d12);
            Store(ptr + 12*N, d13);
            Store(ptr + 13*N, d14);
        }
        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort15V(ulong* ptr)
        {
            var N = Vector256<ulong>.Count;

            var d01 = LoadDquVector256(ptr + 00*N);
            var d02 = LoadDquVector256(ptr + 01*N);
            var d03 = LoadDquVector256(ptr + 02*N);
            var d04 = LoadDquVector256(ptr + 03*N);
            var d05 = LoadDquVector256(ptr + 04*N);
            var d06 = LoadDquVector256(ptr + 05*N);
            var d07 = LoadDquVector256(ptr + 06*N);
            var d08 = LoadDquVector256(ptr + 07*N);
            var d09 = LoadDquVector256(ptr + 08*N);
            var d10 = LoadDquVector256(ptr + 09*N);
            var d11 = LoadDquVector256(ptr + 10*N);
            var d12 = LoadDquVector256(ptr + 11*N);
            var d13 = LoadDquVector256(ptr + 12*N);
            var d14 = LoadDquVector256(ptr + 13*N);
            var d15 = LoadDquVector256(ptr + 14*N);

            BitonicSort15V(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15);

            Store(ptr + 00*N, d01);
            Store(ptr + 01*N, d02);
            Store(ptr + 02*N, d03);
            Store(ptr + 03*N, d04);
            Store(ptr + 04*N, d05);
            Store(ptr + 05*N, d06);
            Store(ptr + 06*N, d07);
            Store(ptr + 07*N, d08);
            Store(ptr + 08*N, d09);
            Store(ptr + 09*N, d10);
            Store(ptr + 10*N, d11);
            Store(ptr + 11*N, d12);
            Store(ptr + 12*N, d13);
            Store(ptr + 13*N, d14);
            Store(ptr + 14*N, d15);
        }
        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort16V(ulong* ptr)
        {
            var N = Vector256<ulong>.Count;

            var d01 = LoadDquVector256(ptr + 00*N);
            var d02 = LoadDquVector256(ptr + 01*N);
            var d03 = LoadDquVector256(ptr + 02*N);
            var d04 = LoadDquVector256(ptr + 03*N);
            var d05 = LoadDquVector256(ptr + 04*N);
            var d06 = LoadDquVector256(ptr + 05*N);
            var d07 = LoadDquVector256(ptr + 06*N);
            var d08 = LoadDquVector256(ptr + 07*N);
            var d09 = LoadDquVector256(ptr + 08*N);
            var d10 = LoadDquVector256(ptr + 09*N);
            var d11 = LoadDquVector256(ptr + 10*N);
            var d12 = LoadDquVector256(ptr + 11*N);
            var d13 = LoadDquVector256(ptr + 12*N);
            var d14 = LoadDquVector256(ptr + 13*N);
            var d15 = LoadDquVector256(ptr + 14*N);
            var d16 = LoadDquVector256(ptr + 15*N);

            BitonicSort16V(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16);

            Store(ptr + 00*N, d01);
            Store(ptr + 01*N, d02);
            Store(ptr + 02*N, d03);
            Store(ptr + 03*N, d04);
            Store(ptr + 04*N, d05);
            Store(ptr + 05*N, d06);
            Store(ptr + 06*N, d07);
            Store(ptr + 07*N, d08);
            Store(ptr + 08*N, d09);
            Store(ptr + 09*N, d10);
            Store(ptr + 10*N, d11);
            Store(ptr + 11*N, d12);
            Store(ptr + 12*N, d13);
            Store(ptr + 13*N, d14);
            Store(ptr + 14*N, d15);
            Store(ptr + 15*N, d16);
        }
        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort02V(ref Vector256<double> d01, ref Vector256<double> d02)
        {
            Vector256<double> tmp;


            BitonicSort01V(ref d01);
            BitonicSort01V(ref d02);

            tmp = Permute4x64(d02.AsDouble(), 0b00_01_10_11).AsDouble();
            d02 = Max(d01, tmp);
            d01 = Min(d01, tmp);

            BitonicSort01VMerge(ref d01);
            BitonicSort01VMerge(ref d02);
        }
        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort02VMerge(ref Vector256<double> d01, ref Vector256<double> d02)
        {
            Vector256<double> tmp;

            tmp = d01;
            d01 = Min(d02, d01);
            d02 = Max(d02, tmp);

            BitonicSort01VMerge(ref d01);
            BitonicSort01VMerge(ref d02);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort03V(ref Vector256<double> d01, ref Vector256<double> d02, ref Vector256<double> d03)
        {
            Vector256<double> tmp;


            BitonicSort02V(ref d01, ref d02);
            BitonicSort01V(ref d03);

            tmp = Permute4x64(d03.AsDouble(), 0b00_01_10_11).AsDouble();
            d03 = Max(d02, tmp);
            d02 = Min(d02, tmp);

            BitonicSort02VMerge(ref d01, ref d02);
            BitonicSort01VMerge(ref d03);
        }
        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort03VMerge(ref Vector256<double> d01, ref Vector256<double> d02, ref Vector256<double> d03)
        {
            Vector256<double> tmp;

            tmp = d01;
            d01 = Min(d03, d01);
            d03 = Max(d03, tmp);

            BitonicSort02VMerge(ref d01, ref d02);
            BitonicSort01VMerge(ref d03);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort04V(ref Vector256<double> d01, ref Vector256<double> d02, ref Vector256<double> d03, ref Vector256<double> d04)
        {
            Vector256<double> tmp;


            BitonicSort02V(ref d01, ref d02);
            BitonicSort02V(ref d03, ref d04);

            tmp = Permute4x64(d03.AsDouble(), 0b00_01_10_11).AsDouble();
            d03 = Max(d02, tmp);
            d02 = Min(d02, tmp);

            tmp = Permute4x64(d04.AsDouble(), 0b00_01_10_11).AsDouble();
            d04 = Max(d01, tmp);
            d01 = Min(d01, tmp);

            BitonicSort02VMerge(ref d01, ref d02);
            BitonicSort02VMerge(ref d03, ref d04);
        }
        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort04VMerge(ref Vector256<double> d01, ref Vector256<double> d02, ref Vector256<double> d03, ref Vector256<double> d04)
        {
            Vector256<double> tmp;

            tmp = d01;
            d01 = Min(d03, d01);
            d03 = Max(d03, tmp);

            tmp = d02;
            d02 = Min(d04, d02);
            d04 = Max(d04, tmp);

            BitonicSort02VMerge(ref d01, ref d02);
            BitonicSort02VMerge(ref d03, ref d04);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort05V(ref Vector256<double> d01, ref Vector256<double> d02, ref Vector256<double> d03, ref Vector256<double> d04, ref Vector256<double> d05)
        {
            Vector256<double> tmp;


            BitonicSort04V(ref d01, ref d02, ref d03, ref d04);
            BitonicSort01V(ref d05);

            tmp = Permute4x64(d05.AsDouble(), 0b00_01_10_11).AsDouble();
            d05 = Max(d04, tmp);
            d04 = Min(d04, tmp);

            BitonicSort04VMerge(ref d01, ref d02, ref d03, ref d04);
            BitonicSort01VMerge(ref d05);
        }
        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort05VMerge(ref Vector256<double> d01, ref Vector256<double> d02, ref Vector256<double> d03, ref Vector256<double> d04, ref Vector256<double> d05)
        {
            Vector256<double> tmp;

            tmp = d01;
            d01 = Min(d05, d01);
            d05 = Max(d05, tmp);

            BitonicSort04VMerge(ref d01, ref d02, ref d03, ref d04);
            BitonicSort01VMerge(ref d05);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort06V(ref Vector256<double> d01, ref Vector256<double> d02, ref Vector256<double> d03, ref Vector256<double> d04, ref Vector256<double> d05, ref Vector256<double> d06)
        {
            Vector256<double> tmp;


            BitonicSort04V(ref d01, ref d02, ref d03, ref d04);
            BitonicSort02V(ref d05, ref d06);

            tmp = Permute4x64(d05.AsDouble(), 0b00_01_10_11).AsDouble();
            d05 = Max(d04, tmp);
            d04 = Min(d04, tmp);

            tmp = Permute4x64(d06.AsDouble(), 0b00_01_10_11).AsDouble();
            d06 = Max(d03, tmp);
            d03 = Min(d03, tmp);

            BitonicSort04VMerge(ref d01, ref d02, ref d03, ref d04);
            BitonicSort02VMerge(ref d05, ref d06);
        }
        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort06VMerge(ref Vector256<double> d01, ref Vector256<double> d02, ref Vector256<double> d03, ref Vector256<double> d04, ref Vector256<double> d05, ref Vector256<double> d06)
        {
            Vector256<double> tmp;

            tmp = d01;
            d01 = Min(d05, d01);
            d05 = Max(d05, tmp);

            tmp = d02;
            d02 = Min(d06, d02);
            d06 = Max(d06, tmp);

            BitonicSort04VMerge(ref d01, ref d02, ref d03, ref d04);
            BitonicSort02VMerge(ref d05, ref d06);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort07V(ref Vector256<double> d01, ref Vector256<double> d02, ref Vector256<double> d03, ref Vector256<double> d04, ref Vector256<double> d05, ref Vector256<double> d06, ref Vector256<double> d07)
        {
            Vector256<double> tmp;


            BitonicSort04V(ref d01, ref d02, ref d03, ref d04);
            BitonicSort03V(ref d05, ref d06, ref d07);

            tmp = Permute4x64(d05.AsDouble(), 0b00_01_10_11).AsDouble();
            d05 = Max(d04, tmp);
            d04 = Min(d04, tmp);

            tmp = Permute4x64(d06.AsDouble(), 0b00_01_10_11).AsDouble();
            d06 = Max(d03, tmp);
            d03 = Min(d03, tmp);

            tmp = Permute4x64(d07.AsDouble(), 0b00_01_10_11).AsDouble();
            d07 = Max(d02, tmp);
            d02 = Min(d02, tmp);

            BitonicSort04VMerge(ref d01, ref d02, ref d03, ref d04);
            BitonicSort03VMerge(ref d05, ref d06, ref d07);
        }
        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort07VMerge(ref Vector256<double> d01, ref Vector256<double> d02, ref Vector256<double> d03, ref Vector256<double> d04, ref Vector256<double> d05, ref Vector256<double> d06, ref Vector256<double> d07)
        {
            Vector256<double> tmp;

            tmp = d01;
            d01 = Min(d05, d01);
            d05 = Max(d05, tmp);

            tmp = d02;
            d02 = Min(d06, d02);
            d06 = Max(d06, tmp);

            tmp = d03;
            d03 = Min(d07, d03);
            d07 = Max(d07, tmp);

            BitonicSort04VMerge(ref d01, ref d02, ref d03, ref d04);
            BitonicSort03VMerge(ref d05, ref d06, ref d07);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort08V(ref Vector256<double> d01, ref Vector256<double> d02, ref Vector256<double> d03, ref Vector256<double> d04, ref Vector256<double> d05, ref Vector256<double> d06, ref Vector256<double> d07, ref Vector256<double> d08)
        {
            Vector256<double> tmp;


            BitonicSort04V(ref d01, ref d02, ref d03, ref d04);
            BitonicSort04V(ref d05, ref d06, ref d07, ref d08);

            tmp = Permute4x64(d05.AsDouble(), 0b00_01_10_11).AsDouble();
            d05 = Max(d04, tmp);
            d04 = Min(d04, tmp);

            tmp = Permute4x64(d06.AsDouble(), 0b00_01_10_11).AsDouble();
            d06 = Max(d03, tmp);
            d03 = Min(d03, tmp);

            tmp = Permute4x64(d07.AsDouble(), 0b00_01_10_11).AsDouble();
            d07 = Max(d02, tmp);
            d02 = Min(d02, tmp);

            tmp = Permute4x64(d08.AsDouble(), 0b00_01_10_11).AsDouble();
            d08 = Max(d01, tmp);
            d01 = Min(d01, tmp);

            BitonicSort04VMerge(ref d01, ref d02, ref d03, ref d04);
            BitonicSort04VMerge(ref d05, ref d06, ref d07, ref d08);
        }
        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort08VMerge(ref Vector256<double> d01, ref Vector256<double> d02, ref Vector256<double> d03, ref Vector256<double> d04, ref Vector256<double> d05, ref Vector256<double> d06, ref Vector256<double> d07, ref Vector256<double> d08)
        {
            Vector256<double> tmp;

            tmp = d01;
            d01 = Min(d05, d01);
            d05 = Max(d05, tmp);

            tmp = d02;
            d02 = Min(d06, d02);
            d06 = Max(d06, tmp);

            tmp = d03;
            d03 = Min(d07, d03);
            d07 = Max(d07, tmp);

            tmp = d04;
            d04 = Min(d08, d04);
            d08 = Max(d08, tmp);

            BitonicSort04VMerge(ref d01, ref d02, ref d03, ref d04);
            BitonicSort04VMerge(ref d05, ref d06, ref d07, ref d08);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort09V(ref Vector256<double> d01, ref Vector256<double> d02, ref Vector256<double> d03, ref Vector256<double> d04, ref Vector256<double> d05, ref Vector256<double> d06, ref Vector256<double> d07, ref Vector256<double> d08, ref Vector256<double> d09)
        {
            Vector256<double> tmp;


            BitonicSort08V(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
            BitonicSort01V(ref d09);

            tmp = Permute4x64(d09.AsDouble(), 0b00_01_10_11).AsDouble();
            d09 = Max(d08, tmp);
            d08 = Min(d08, tmp);

            BitonicSort08VMerge(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
            BitonicSort01VMerge(ref d09);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort10V(ref Vector256<double> d01, ref Vector256<double> d02, ref Vector256<double> d03, ref Vector256<double> d04, ref Vector256<double> d05, ref Vector256<double> d06, ref Vector256<double> d07, ref Vector256<double> d08, ref Vector256<double> d09, ref Vector256<double> d10)
        {
            Vector256<double> tmp;


            BitonicSort08V(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
            BitonicSort02V(ref d09, ref d10);

            tmp = Permute4x64(d09.AsDouble(), 0b00_01_10_11).AsDouble();
            d09 = Max(d08, tmp);
            d08 = Min(d08, tmp);

            tmp = Permute4x64(d10.AsDouble(), 0b00_01_10_11).AsDouble();
            d10 = Max(d07, tmp);
            d07 = Min(d07, tmp);

            BitonicSort08VMerge(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
            BitonicSort02VMerge(ref d09, ref d10);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort11V(ref Vector256<double> d01, ref Vector256<double> d02, ref Vector256<double> d03, ref Vector256<double> d04, ref Vector256<double> d05, ref Vector256<double> d06, ref Vector256<double> d07, ref Vector256<double> d08, ref Vector256<double> d09, ref Vector256<double> d10, ref Vector256<double> d11)
        {
            Vector256<double> tmp;


            BitonicSort08V(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
            BitonicSort03V(ref d09, ref d10, ref d11);

            tmp = Permute4x64(d09.AsDouble(), 0b00_01_10_11).AsDouble();
            d09 = Max(d08, tmp);
            d08 = Min(d08, tmp);

            tmp = Permute4x64(d10.AsDouble(), 0b00_01_10_11).AsDouble();
            d10 = Max(d07, tmp);
            d07 = Min(d07, tmp);

            tmp = Permute4x64(d11.AsDouble(), 0b00_01_10_11).AsDouble();
            d11 = Max(d06, tmp);
            d06 = Min(d06, tmp);

            BitonicSort08VMerge(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
            BitonicSort03VMerge(ref d09, ref d10, ref d11);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort12V(ref Vector256<double> d01, ref Vector256<double> d02, ref Vector256<double> d03, ref Vector256<double> d04, ref Vector256<double> d05, ref Vector256<double> d06, ref Vector256<double> d07, ref Vector256<double> d08, ref Vector256<double> d09, ref Vector256<double> d10, ref Vector256<double> d11, ref Vector256<double> d12)
        {
            Vector256<double> tmp;


            BitonicSort08V(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
            BitonicSort04V(ref d09, ref d10, ref d11, ref d12);

            tmp = Permute4x64(d09.AsDouble(), 0b00_01_10_11).AsDouble();
            d09 = Max(d08, tmp);
            d08 = Min(d08, tmp);

            tmp = Permute4x64(d10.AsDouble(), 0b00_01_10_11).AsDouble();
            d10 = Max(d07, tmp);
            d07 = Min(d07, tmp);

            tmp = Permute4x64(d11.AsDouble(), 0b00_01_10_11).AsDouble();
            d11 = Max(d06, tmp);
            d06 = Min(d06, tmp);

            tmp = Permute4x64(d12.AsDouble(), 0b00_01_10_11).AsDouble();
            d12 = Max(d05, tmp);
            d05 = Min(d05, tmp);

            BitonicSort08VMerge(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
            BitonicSort04VMerge(ref d09, ref d10, ref d11, ref d12);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort13V(ref Vector256<double> d01, ref Vector256<double> d02, ref Vector256<double> d03, ref Vector256<double> d04, ref Vector256<double> d05, ref Vector256<double> d06, ref Vector256<double> d07, ref Vector256<double> d08, ref Vector256<double> d09, ref Vector256<double> d10, ref Vector256<double> d11, ref Vector256<double> d12, ref Vector256<double> d13)
        {
            Vector256<double> tmp;


            BitonicSort08V(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
            BitonicSort05V(ref d09, ref d10, ref d11, ref d12, ref d13);

            tmp = Permute4x64(d09.AsDouble(), 0b00_01_10_11).AsDouble();
            d09 = Max(d08, tmp);
            d08 = Min(d08, tmp);

            tmp = Permute4x64(d10.AsDouble(), 0b00_01_10_11).AsDouble();
            d10 = Max(d07, tmp);
            d07 = Min(d07, tmp);

            tmp = Permute4x64(d11.AsDouble(), 0b00_01_10_11).AsDouble();
            d11 = Max(d06, tmp);
            d06 = Min(d06, tmp);

            tmp = Permute4x64(d12.AsDouble(), 0b00_01_10_11).AsDouble();
            d12 = Max(d05, tmp);
            d05 = Min(d05, tmp);

            tmp = Permute4x64(d13.AsDouble(), 0b00_01_10_11).AsDouble();
            d13 = Max(d04, tmp);
            d04 = Min(d04, tmp);

            BitonicSort08VMerge(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
            BitonicSort05VMerge(ref d09, ref d10, ref d11, ref d12, ref d13);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort14V(ref Vector256<double> d01, ref Vector256<double> d02, ref Vector256<double> d03, ref Vector256<double> d04, ref Vector256<double> d05, ref Vector256<double> d06, ref Vector256<double> d07, ref Vector256<double> d08, ref Vector256<double> d09, ref Vector256<double> d10, ref Vector256<double> d11, ref Vector256<double> d12, ref Vector256<double> d13, ref Vector256<double> d14)
        {
            Vector256<double> tmp;


            BitonicSort08V(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
            BitonicSort06V(ref d09, ref d10, ref d11, ref d12, ref d13, ref d14);

            tmp = Permute4x64(d09.AsDouble(), 0b00_01_10_11).AsDouble();
            d09 = Max(d08, tmp);
            d08 = Min(d08, tmp);

            tmp = Permute4x64(d10.AsDouble(), 0b00_01_10_11).AsDouble();
            d10 = Max(d07, tmp);
            d07 = Min(d07, tmp);

            tmp = Permute4x64(d11.AsDouble(), 0b00_01_10_11).AsDouble();
            d11 = Max(d06, tmp);
            d06 = Min(d06, tmp);

            tmp = Permute4x64(d12.AsDouble(), 0b00_01_10_11).AsDouble();
            d12 = Max(d05, tmp);
            d05 = Min(d05, tmp);

            tmp = Permute4x64(d13.AsDouble(), 0b00_01_10_11).AsDouble();
            d13 = Max(d04, tmp);
            d04 = Min(d04, tmp);

            tmp = Permute4x64(d14.AsDouble(), 0b00_01_10_11).AsDouble();
            d14 = Max(d03, tmp);
            d03 = Min(d03, tmp);

            BitonicSort08VMerge(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
            BitonicSort06VMerge(ref d09, ref d10, ref d11, ref d12, ref d13, ref d14);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort15V(ref Vector256<double> d01, ref Vector256<double> d02, ref Vector256<double> d03, ref Vector256<double> d04, ref Vector256<double> d05, ref Vector256<double> d06, ref Vector256<double> d07, ref Vector256<double> d08, ref Vector256<double> d09, ref Vector256<double> d10, ref Vector256<double> d11, ref Vector256<double> d12, ref Vector256<double> d13, ref Vector256<double> d14, ref Vector256<double> d15)
        {
            Vector256<double> tmp;


            BitonicSort08V(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
            BitonicSort07V(ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15);

            tmp = Permute4x64(d09.AsDouble(), 0b00_01_10_11).AsDouble();
            d09 = Max(d08, tmp);
            d08 = Min(d08, tmp);

            tmp = Permute4x64(d10.AsDouble(), 0b00_01_10_11).AsDouble();
            d10 = Max(d07, tmp);
            d07 = Min(d07, tmp);

            tmp = Permute4x64(d11.AsDouble(), 0b00_01_10_11).AsDouble();
            d11 = Max(d06, tmp);
            d06 = Min(d06, tmp);

            tmp = Permute4x64(d12.AsDouble(), 0b00_01_10_11).AsDouble();
            d12 = Max(d05, tmp);
            d05 = Min(d05, tmp);

            tmp = Permute4x64(d13.AsDouble(), 0b00_01_10_11).AsDouble();
            d13 = Max(d04, tmp);
            d04 = Min(d04, tmp);

            tmp = Permute4x64(d14.AsDouble(), 0b00_01_10_11).AsDouble();
            d14 = Max(d03, tmp);
            d03 = Min(d03, tmp);

            tmp = Permute4x64(d15.AsDouble(), 0b00_01_10_11).AsDouble();
            d15 = Max(d02, tmp);
            d02 = Min(d02, tmp);

            BitonicSort08VMerge(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
            BitonicSort07VMerge(ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort16V(ref Vector256<double> d01, ref Vector256<double> d02, ref Vector256<double> d03, ref Vector256<double> d04, ref Vector256<double> d05, ref Vector256<double> d06, ref Vector256<double> d07, ref Vector256<double> d08, ref Vector256<double> d09, ref Vector256<double> d10, ref Vector256<double> d11, ref Vector256<double> d12, ref Vector256<double> d13, ref Vector256<double> d14, ref Vector256<double> d15, ref Vector256<double> d16)
        {
            Vector256<double> tmp;


            BitonicSort08V(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
            BitonicSort08V(ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16);

            tmp = Permute4x64(d09.AsDouble(), 0b00_01_10_11).AsDouble();
            d09 = Max(d08, tmp);
            d08 = Min(d08, tmp);

            tmp = Permute4x64(d10.AsDouble(), 0b00_01_10_11).AsDouble();
            d10 = Max(d07, tmp);
            d07 = Min(d07, tmp);

            tmp = Permute4x64(d11.AsDouble(), 0b00_01_10_11).AsDouble();
            d11 = Max(d06, tmp);
            d06 = Min(d06, tmp);

            tmp = Permute4x64(d12.AsDouble(), 0b00_01_10_11).AsDouble();
            d12 = Max(d05, tmp);
            d05 = Min(d05, tmp);

            tmp = Permute4x64(d13.AsDouble(), 0b00_01_10_11).AsDouble();
            d13 = Max(d04, tmp);
            d04 = Min(d04, tmp);

            tmp = Permute4x64(d14.AsDouble(), 0b00_01_10_11).AsDouble();
            d14 = Max(d03, tmp);
            d03 = Min(d03, tmp);

            tmp = Permute4x64(d15.AsDouble(), 0b00_01_10_11).AsDouble();
            d15 = Max(d02, tmp);
            d02 = Min(d02, tmp);

            tmp = Permute4x64(d16.AsDouble(), 0b00_01_10_11).AsDouble();
            d16 = Max(d01, tmp);
            d01 = Min(d01, tmp);

            BitonicSort08VMerge(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
            BitonicSort08VMerge(ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16);
        }


        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort01V(double* ptr)
        {
            var N = Vector256<double>.Count;

            var d01 = LoadVector256(ptr + 00*N);

            BitonicSort01V(ref d01);

            Store(ptr + 00*N, d01);
        }
        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort02V(double* ptr)
        {
            var N = Vector256<double>.Count;

            var d01 = LoadVector256(ptr + 00*N);
            var d02 = LoadVector256(ptr + 01*N);

            BitonicSort02V(ref d01, ref d02);

            Store(ptr + 00*N, d01);
            Store(ptr + 01*N, d02);
        }
        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort03V(double* ptr)
        {
            var N = Vector256<double>.Count;

            var d01 = LoadVector256(ptr + 00*N);
            var d02 = LoadVector256(ptr + 01*N);
            var d03 = LoadVector256(ptr + 02*N);

            BitonicSort03V(ref d01, ref d02, ref d03);

            Store(ptr + 00*N, d01);
            Store(ptr + 01*N, d02);
            Store(ptr + 02*N, d03);
        }
        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort04V(double* ptr)
        {
            var N = Vector256<double>.Count;

            var d01 = LoadVector256(ptr + 00*N);
            var d02 = LoadVector256(ptr + 01*N);
            var d03 = LoadVector256(ptr + 02*N);
            var d04 = LoadVector256(ptr + 03*N);

            BitonicSort04V(ref d01, ref d02, ref d03, ref d04);

            Store(ptr + 00*N, d01);
            Store(ptr + 01*N, d02);
            Store(ptr + 02*N, d03);
            Store(ptr + 03*N, d04);
        }
        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort05V(double* ptr)
        {
            var N = Vector256<double>.Count;

            var d01 = LoadVector256(ptr + 00*N);
            var d02 = LoadVector256(ptr + 01*N);
            var d03 = LoadVector256(ptr + 02*N);
            var d04 = LoadVector256(ptr + 03*N);
            var d05 = LoadVector256(ptr + 04*N);

            BitonicSort05V(ref d01, ref d02, ref d03, ref d04, ref d05);

            Store(ptr + 00*N, d01);
            Store(ptr + 01*N, d02);
            Store(ptr + 02*N, d03);
            Store(ptr + 03*N, d04);
            Store(ptr + 04*N, d05);
        }
        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort06V(double* ptr)
        {
            var N = Vector256<double>.Count;

            var d01 = LoadVector256(ptr + 00*N);
            var d02 = LoadVector256(ptr + 01*N);
            var d03 = LoadVector256(ptr + 02*N);
            var d04 = LoadVector256(ptr + 03*N);
            var d05 = LoadVector256(ptr + 04*N);
            var d06 = LoadVector256(ptr + 05*N);

            BitonicSort06V(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06);

            Store(ptr + 00*N, d01);
            Store(ptr + 01*N, d02);
            Store(ptr + 02*N, d03);
            Store(ptr + 03*N, d04);
            Store(ptr + 04*N, d05);
            Store(ptr + 05*N, d06);
        }
        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort07V(double* ptr)
        {
            var N = Vector256<double>.Count;

            var d01 = LoadVector256(ptr + 00*N);
            var d02 = LoadVector256(ptr + 01*N);
            var d03 = LoadVector256(ptr + 02*N);
            var d04 = LoadVector256(ptr + 03*N);
            var d05 = LoadVector256(ptr + 04*N);
            var d06 = LoadVector256(ptr + 05*N);
            var d07 = LoadVector256(ptr + 06*N);

            BitonicSort07V(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07);

            Store(ptr + 00*N, d01);
            Store(ptr + 01*N, d02);
            Store(ptr + 02*N, d03);
            Store(ptr + 03*N, d04);
            Store(ptr + 04*N, d05);
            Store(ptr + 05*N, d06);
            Store(ptr + 06*N, d07);
        }
        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort08V(double* ptr)
        {
            var N = Vector256<double>.Count;

            var d01 = LoadVector256(ptr + 00*N);
            var d02 = LoadVector256(ptr + 01*N);
            var d03 = LoadVector256(ptr + 02*N);
            var d04 = LoadVector256(ptr + 03*N);
            var d05 = LoadVector256(ptr + 04*N);
            var d06 = LoadVector256(ptr + 05*N);
            var d07 = LoadVector256(ptr + 06*N);
            var d08 = LoadVector256(ptr + 07*N);

            BitonicSort08V(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);

            Store(ptr + 00*N, d01);
            Store(ptr + 01*N, d02);
            Store(ptr + 02*N, d03);
            Store(ptr + 03*N, d04);
            Store(ptr + 04*N, d05);
            Store(ptr + 05*N, d06);
            Store(ptr + 06*N, d07);
            Store(ptr + 07*N, d08);
        }
        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort09V(double* ptr)
        {
            var N = Vector256<double>.Count;

            var d01 = LoadVector256(ptr + 00*N);
            var d02 = LoadVector256(ptr + 01*N);
            var d03 = LoadVector256(ptr + 02*N);
            var d04 = LoadVector256(ptr + 03*N);
            var d05 = LoadVector256(ptr + 04*N);
            var d06 = LoadVector256(ptr + 05*N);
            var d07 = LoadVector256(ptr + 06*N);
            var d08 = LoadVector256(ptr + 07*N);
            var d09 = LoadVector256(ptr + 08*N);

            BitonicSort09V(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09);

            Store(ptr + 00*N, d01);
            Store(ptr + 01*N, d02);
            Store(ptr + 02*N, d03);
            Store(ptr + 03*N, d04);
            Store(ptr + 04*N, d05);
            Store(ptr + 05*N, d06);
            Store(ptr + 06*N, d07);
            Store(ptr + 07*N, d08);
            Store(ptr + 08*N, d09);
        }
        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort10V(double* ptr)
        {
            var N = Vector256<double>.Count;

            var d01 = LoadVector256(ptr + 00*N);
            var d02 = LoadVector256(ptr + 01*N);
            var d03 = LoadVector256(ptr + 02*N);
            var d04 = LoadVector256(ptr + 03*N);
            var d05 = LoadVector256(ptr + 04*N);
            var d06 = LoadVector256(ptr + 05*N);
            var d07 = LoadVector256(ptr + 06*N);
            var d08 = LoadVector256(ptr + 07*N);
            var d09 = LoadVector256(ptr + 08*N);
            var d10 = LoadVector256(ptr + 09*N);

            BitonicSort10V(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10);

            Store(ptr + 00*N, d01);
            Store(ptr + 01*N, d02);
            Store(ptr + 02*N, d03);
            Store(ptr + 03*N, d04);
            Store(ptr + 04*N, d05);
            Store(ptr + 05*N, d06);
            Store(ptr + 06*N, d07);
            Store(ptr + 07*N, d08);
            Store(ptr + 08*N, d09);
            Store(ptr + 09*N, d10);
        }
        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort11V(double* ptr)
        {
            var N = Vector256<double>.Count;

            var d01 = LoadVector256(ptr + 00*N);
            var d02 = LoadVector256(ptr + 01*N);
            var d03 = LoadVector256(ptr + 02*N);
            var d04 = LoadVector256(ptr + 03*N);
            var d05 = LoadVector256(ptr + 04*N);
            var d06 = LoadVector256(ptr + 05*N);
            var d07 = LoadVector256(ptr + 06*N);
            var d08 = LoadVector256(ptr + 07*N);
            var d09 = LoadVector256(ptr + 08*N);
            var d10 = LoadVector256(ptr + 09*N);
            var d11 = LoadVector256(ptr + 10*N);

            BitonicSort11V(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11);

            Store(ptr + 00*N, d01);
            Store(ptr + 01*N, d02);
            Store(ptr + 02*N, d03);
            Store(ptr + 03*N, d04);
            Store(ptr + 04*N, d05);
            Store(ptr + 05*N, d06);
            Store(ptr + 06*N, d07);
            Store(ptr + 07*N, d08);
            Store(ptr + 08*N, d09);
            Store(ptr + 09*N, d10);
            Store(ptr + 10*N, d11);
        }
        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort12V(double* ptr)
        {
            var N = Vector256<double>.Count;

            var d01 = LoadVector256(ptr + 00*N);
            var d02 = LoadVector256(ptr + 01*N);
            var d03 = LoadVector256(ptr + 02*N);
            var d04 = LoadVector256(ptr + 03*N);
            var d05 = LoadVector256(ptr + 04*N);
            var d06 = LoadVector256(ptr + 05*N);
            var d07 = LoadVector256(ptr + 06*N);
            var d08 = LoadVector256(ptr + 07*N);
            var d09 = LoadVector256(ptr + 08*N);
            var d10 = LoadVector256(ptr + 09*N);
            var d11 = LoadVector256(ptr + 10*N);
            var d12 = LoadVector256(ptr + 11*N);

            BitonicSort12V(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12);

            Store(ptr + 00*N, d01);
            Store(ptr + 01*N, d02);
            Store(ptr + 02*N, d03);
            Store(ptr + 03*N, d04);
            Store(ptr + 04*N, d05);
            Store(ptr + 05*N, d06);
            Store(ptr + 06*N, d07);
            Store(ptr + 07*N, d08);
            Store(ptr + 08*N, d09);
            Store(ptr + 09*N, d10);
            Store(ptr + 10*N, d11);
            Store(ptr + 11*N, d12);
        }
        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort13V(double* ptr)
        {
            var N = Vector256<double>.Count;

            var d01 = LoadVector256(ptr + 00*N);
            var d02 = LoadVector256(ptr + 01*N);
            var d03 = LoadVector256(ptr + 02*N);
            var d04 = LoadVector256(ptr + 03*N);
            var d05 = LoadVector256(ptr + 04*N);
            var d06 = LoadVector256(ptr + 05*N);
            var d07 = LoadVector256(ptr + 06*N);
            var d08 = LoadVector256(ptr + 07*N);
            var d09 = LoadVector256(ptr + 08*N);
            var d10 = LoadVector256(ptr + 09*N);
            var d11 = LoadVector256(ptr + 10*N);
            var d12 = LoadVector256(ptr + 11*N);
            var d13 = LoadVector256(ptr + 12*N);

            BitonicSort13V(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13);

            Store(ptr + 00*N, d01);
            Store(ptr + 01*N, d02);
            Store(ptr + 02*N, d03);
            Store(ptr + 03*N, d04);
            Store(ptr + 04*N, d05);
            Store(ptr + 05*N, d06);
            Store(ptr + 06*N, d07);
            Store(ptr + 07*N, d08);
            Store(ptr + 08*N, d09);
            Store(ptr + 09*N, d10);
            Store(ptr + 10*N, d11);
            Store(ptr + 11*N, d12);
            Store(ptr + 12*N, d13);
        }
        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort14V(double* ptr)
        {
            var N = Vector256<double>.Count;

            var d01 = LoadVector256(ptr + 00*N);
            var d02 = LoadVector256(ptr + 01*N);
            var d03 = LoadVector256(ptr + 02*N);
            var d04 = LoadVector256(ptr + 03*N);
            var d05 = LoadVector256(ptr + 04*N);
            var d06 = LoadVector256(ptr + 05*N);
            var d07 = LoadVector256(ptr + 06*N);
            var d08 = LoadVector256(ptr + 07*N);
            var d09 = LoadVector256(ptr + 08*N);
            var d10 = LoadVector256(ptr + 09*N);
            var d11 = LoadVector256(ptr + 10*N);
            var d12 = LoadVector256(ptr + 11*N);
            var d13 = LoadVector256(ptr + 12*N);
            var d14 = LoadVector256(ptr + 13*N);

            BitonicSort14V(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14);

            Store(ptr + 00*N, d01);
            Store(ptr + 01*N, d02);
            Store(ptr + 02*N, d03);
            Store(ptr + 03*N, d04);
            Store(ptr + 04*N, d05);
            Store(ptr + 05*N, d06);
            Store(ptr + 06*N, d07);
            Store(ptr + 07*N, d08);
            Store(ptr + 08*N, d09);
            Store(ptr + 09*N, d10);
            Store(ptr + 10*N, d11);
            Store(ptr + 11*N, d12);
            Store(ptr + 12*N, d13);
            Store(ptr + 13*N, d14);
        }
        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort15V(double* ptr)
        {
            var N = Vector256<double>.Count;

            var d01 = LoadVector256(ptr + 00*N);
            var d02 = LoadVector256(ptr + 01*N);
            var d03 = LoadVector256(ptr + 02*N);
            var d04 = LoadVector256(ptr + 03*N);
            var d05 = LoadVector256(ptr + 04*N);
            var d06 = LoadVector256(ptr + 05*N);
            var d07 = LoadVector256(ptr + 06*N);
            var d08 = LoadVector256(ptr + 07*N);
            var d09 = LoadVector256(ptr + 08*N);
            var d10 = LoadVector256(ptr + 09*N);
            var d11 = LoadVector256(ptr + 10*N);
            var d12 = LoadVector256(ptr + 11*N);
            var d13 = LoadVector256(ptr + 12*N);
            var d14 = LoadVector256(ptr + 13*N);
            var d15 = LoadVector256(ptr + 14*N);

            BitonicSort15V(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15);

            Store(ptr + 00*N, d01);
            Store(ptr + 01*N, d02);
            Store(ptr + 02*N, d03);
            Store(ptr + 03*N, d04);
            Store(ptr + 04*N, d05);
            Store(ptr + 05*N, d06);
            Store(ptr + 06*N, d07);
            Store(ptr + 07*N, d08);
            Store(ptr + 08*N, d09);
            Store(ptr + 09*N, d10);
            Store(ptr + 10*N, d11);
            Store(ptr + 11*N, d12);
            Store(ptr + 12*N, d13);
            Store(ptr + 13*N, d14);
            Store(ptr + 14*N, d15);
        }
        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        static void BitonicSort16V(double* ptr)
        {
            var N = Vector256<double>.Count;

            var d01 = LoadVector256(ptr + 00*N);
            var d02 = LoadVector256(ptr + 01*N);
            var d03 = LoadVector256(ptr + 02*N);
            var d04 = LoadVector256(ptr + 03*N);
            var d05 = LoadVector256(ptr + 04*N);
            var d06 = LoadVector256(ptr + 05*N);
            var d07 = LoadVector256(ptr + 06*N);
            var d08 = LoadVector256(ptr + 07*N);
            var d09 = LoadVector256(ptr + 08*N);
            var d10 = LoadVector256(ptr + 09*N);
            var d11 = LoadVector256(ptr + 10*N);
            var d12 = LoadVector256(ptr + 11*N);
            var d13 = LoadVector256(ptr + 12*N);
            var d14 = LoadVector256(ptr + 13*N);
            var d15 = LoadVector256(ptr + 14*N);
            var d16 = LoadVector256(ptr + 15*N);

            BitonicSort16V(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16);

            Store(ptr + 00*N, d01);
            Store(ptr + 01*N, d02);
            Store(ptr + 02*N, d03);
            Store(ptr + 03*N, d04);
            Store(ptr + 04*N, d05);
            Store(ptr + 05*N, d06);
            Store(ptr + 06*N, d07);
            Store(ptr + 07*N, d08);
            Store(ptr + 08*N, d09);
            Store(ptr + 09*N, d10);
            Store(ptr + 10*N, d11);
            Store(ptr + 11*N, d12);
            Store(ptr + 12*N, d13);
            Store(ptr + 13*N, d14);
            Store(ptr + 14*N, d15);
            Store(ptr + 15*N, d16);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        public static void SortInt32(int* ptr, int length)
        {
            var N = Vector256<int>.Count;
            Debug.Assert(length % N == 0);
            //Debug.Assert(length <= MaxBitonicSortSize);

            switch (length / N) {
                case 01: BitonicSort01V(ptr); return;
                case 02: BitonicSort02V(ptr); return;
                case 03: BitonicSort03V(ptr); return;
                case 04: BitonicSort04V(ptr); return;
                case 05: BitonicSort05V(ptr); return;
                case 06: BitonicSort06V(ptr); return;
                case 07: BitonicSort07V(ptr); return;
                case 08: BitonicSort08V(ptr); return;
                case 09: BitonicSort09V(ptr); return;
                case 10: BitonicSort10V(ptr); return;
                case 11: BitonicSort11V(ptr); return;
                case 12: BitonicSort12V(ptr); return;
                case 13: BitonicSort13V(ptr); return;
                case 14: BitonicSort14V(ptr); return;
                case 15: BitonicSort15V(ptr); return;
                case 16: BitonicSort16V(ptr); return;

                default:
                    throw new NotSupportedException("length is not power a multiple of 8 && <= 128");
            }
        }
        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        public static void SortUInt32(uint* ptr, int length)
        {
            var N = Vector256<uint>.Count;
            Debug.Assert(length % N == 0);
            //Debug.Assert(length <= MaxBitonicSortSize);

            switch (length / N) {
                case 01: BitonicSort01V(ptr); return;
                case 02: BitonicSort02V(ptr); return;
                case 03: BitonicSort03V(ptr); return;
                case 04: BitonicSort04V(ptr); return;
                case 05: BitonicSort05V(ptr); return;
                case 06: BitonicSort06V(ptr); return;
                case 07: BitonicSort07V(ptr); return;
                case 08: BitonicSort08V(ptr); return;
                case 09: BitonicSort09V(ptr); return;
                case 10: BitonicSort10V(ptr); return;
                case 11: BitonicSort11V(ptr); return;
                case 12: BitonicSort12V(ptr); return;
                case 13: BitonicSort13V(ptr); return;
                case 14: BitonicSort14V(ptr); return;
                case 15: BitonicSort15V(ptr); return;
                case 16: BitonicSort16V(ptr); return;

                default:
                    throw new NotSupportedException("length is not power a multiple of 8 && <= 128");
            }
        }
        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        public static void SortSingle(float* ptr, int length)
        {
            var N = Vector256<float>.Count;
            Debug.Assert(length % N == 0);
            //Debug.Assert(length <= MaxBitonicSortSize);

            switch (length / N) {
                case 01: BitonicSort01V(ptr); return;
                case 02: BitonicSort02V(ptr); return;
                case 03: BitonicSort03V(ptr); return;
                case 04: BitonicSort04V(ptr); return;
                case 05: BitonicSort05V(ptr); return;
                case 06: BitonicSort06V(ptr); return;
                case 07: BitonicSort07V(ptr); return;
                case 08: BitonicSort08V(ptr); return;
                case 09: BitonicSort09V(ptr); return;
                case 10: BitonicSort10V(ptr); return;
                case 11: BitonicSort11V(ptr); return;
                case 12: BitonicSort12V(ptr); return;
                case 13: BitonicSort13V(ptr); return;
                case 14: BitonicSort14V(ptr); return;
                case 15: BitonicSort15V(ptr); return;
                case 16: BitonicSort16V(ptr); return;

                default:
                    throw new NotSupportedException("length is not power a multiple of 8 && <= 128");
            }
        }
        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        public static void SortInt64(long* ptr, int length)
        {
            var N = Vector256<long>.Count;
            Debug.Assert(length % N == 0);
            //Debug.Assert(length <= MaxBitonicSortSize);

            switch (length / N) {
                case 01: BitonicSort01V(ptr); return;
                case 02: BitonicSort02V(ptr); return;
                case 03: BitonicSort03V(ptr); return;
                case 04: BitonicSort04V(ptr); return;
                case 05: BitonicSort05V(ptr); return;
                case 06: BitonicSort06V(ptr); return;
                case 07: BitonicSort07V(ptr); return;
                case 08: BitonicSort08V(ptr); return;
                case 09: BitonicSort09V(ptr); return;
                case 10: BitonicSort10V(ptr); return;
                case 11: BitonicSort11V(ptr); return;
                case 12: BitonicSort12V(ptr); return;
                case 13: BitonicSort13V(ptr); return;
                case 14: BitonicSort14V(ptr); return;
                case 15: BitonicSort15V(ptr); return;
                case 16: BitonicSort16V(ptr); return;

                default:
                    throw new NotSupportedException("length is not power a multiple of 8 && <= 128");
            }
        }
        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        public static void SortUInt64(ulong* ptr, int length)
        {
            var N = Vector256<ulong>.Count;
            Debug.Assert(length % N == 0);
            //Debug.Assert(length <= MaxBitonicSortSize);

            switch (length / N) {
                case 01: BitonicSort01V(ptr); return;
                case 02: BitonicSort02V(ptr); return;
                case 03: BitonicSort03V(ptr); return;
                case 04: BitonicSort04V(ptr); return;
                case 05: BitonicSort05V(ptr); return;
                case 06: BitonicSort06V(ptr); return;
                case 07: BitonicSort07V(ptr); return;
                case 08: BitonicSort08V(ptr); return;
                case 09: BitonicSort09V(ptr); return;
                case 10: BitonicSort10V(ptr); return;
                case 11: BitonicSort11V(ptr); return;
                case 12: BitonicSort12V(ptr); return;
                case 13: BitonicSort13V(ptr); return;
                case 14: BitonicSort14V(ptr); return;
                case 15: BitonicSort15V(ptr); return;
                case 16: BitonicSort16V(ptr); return;

                default:
                    throw new NotSupportedException("length is not power a multiple of 8 && <= 128");
            }
        }
        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        public static void SortDouble(double* ptr, int length)
        {
            var N = Vector256<double>.Count;
            Debug.Assert(length % N == 0);
            //Debug.Assert(length <= MaxBitonicSortSize);

            switch (length / N) {
                case 01: BitonicSort01V(ptr); return;
                case 02: BitonicSort02V(ptr); return;
                case 03: BitonicSort03V(ptr); return;
                case 04: BitonicSort04V(ptr); return;
                case 05: BitonicSort05V(ptr); return;
                case 06: BitonicSort06V(ptr); return;
                case 07: BitonicSort07V(ptr); return;
                case 08: BitonicSort08V(ptr); return;
                case 09: BitonicSort09V(ptr); return;
                case 10: BitonicSort10V(ptr); return;
                case 11: BitonicSort11V(ptr); return;
                case 12: BitonicSort12V(ptr); return;
                case 13: BitonicSort13V(ptr); return;
                case 14: BitonicSort14V(ptr); return;
                case 15: BitonicSort15V(ptr); return;
                case 16: BitonicSort16V(ptr); return;

                default:
                    throw new NotSupportedException("length is not power a multiple of 8 && <= 128");
            }
        }



        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        public static void Sort(T* ptr, int length)
        {
            if (typeof(T) == typeof(int)) {
                SortInt32((int *) ptr, length);
            }
            else
            if (typeof(T) == typeof(uint)) {
                SortUInt32((uint *) ptr, length);
            }
            else
            if (typeof(T) == typeof(float)) {
                SortSingle((float *) ptr, length);
            }
            else
            if (typeof(T) == typeof(long)) {
                SortInt64((long *) ptr, length);
            }
            else
            if (typeof(T) == typeof(ulong)) {
                SortUInt64((ulong *) ptr, length);
            }
            else
            if (typeof(T) == typeof(double)) {
                SortDouble((double *) ptr, length);
            }
            else
                throw new NotSupportedException();
        }
    }
}
